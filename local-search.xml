<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Fluid 主题添加音乐功能</title>
    <link href="/2022/07/01/theme/fluid/"/>
    <url>/2022/07/01/theme/fluid/</url>
    
    <content type="html"><![CDATA[<p>效果请参考本页面的头部 👆</p><h1 id="注入器"><a href="#注入器" class="headerlink" title="注入器"></a>注入器</h1><p>新建 &#x2F;scripts&#x2F;music.js 文件,写入下面内容</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">hexo.extend.filter.register<span class="hljs-params">(&#x27;theme_inject&#x27;, function(injects)</span> &#123;<br>  injects.postMarkdownBegin.raw<span class="hljs-params">(&#x27;default&#x27;, &#x27;&lt;iframe <span class="hljs-attr">frameborder</span>=&quot;no&quot; <span class="hljs-attr">border</span>=&quot;0&quot; <span class="hljs-attr">marginwidth</span>=&quot;0&quot; <span class="hljs-attr">marginheight</span>=&quot;0&quot; <span class="hljs-attr">width</span>=330 <span class="hljs-attr">height</span>=110 <span class="hljs-attr">src</span>=&quot;//music.163.com/outchain/player?<span class="hljs-attr">type</span>=0&amp;<span class="hljs-attr">id</span>=2886962881&amp;<span class="hljs-attr">auto</span>=1&amp;<span class="hljs-attr">height</span>=90&quot;&gt;&lt;/iframe&gt;&#x27;)</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><p>完成,就这么优雅.</p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://aigisss.com/blog/posts/1563abd8.html">https://aigisss.com/blog/posts/1563abd8.html</a></p>]]></content>
    
    
    <categories>
      
      <category>建设博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>当我记笔记时，究竟在记什么？</title>
    <link href="/2022/06/29/home/%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/06/29/home/%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>当我记笔记时，究竟在记什么？当然是我的思考。我在学校期间，笔记多是写在纸上的。工作后笔记都是记在手机或电脑上的。不管什么形式，当我记笔记时，都是想把当时自己的想法记录下来。学习笔记是这样的，读书笔记也是这样的，日记更是这样的。</p><h2 id="不停地记"><a href="#不停地记" class="headerlink" title="不停地记"></a>不停地记</h2><p>我是一个话很少的人，可我的想法却很多。这就导致我的内心很矛盾，很难忍受表达不出想法的痛苦。各种所见所闻我都会产生各种想法，但我就是讲不出来，脑子里面一片混沌，特别的痛苦。看完一部特别喜欢的电影，我只会说：“卧槽，太好看了”。如果有人问我：有多好看？“非常好看”“非常非常好看”。唉，我的痛苦就是从语言的苍白开始的。还好有书籍，只有在阅读时，类似的症状才会有所缓解，因为书里的话很多时候就是我想说的话，每当读到和自己想法一致的内容时，我会感动的热泪盈眶，仿佛压抑了很久的喷嚏终于打了出来。在这种时候我就会摘录书中的文字，并写下几句自己的感受。可是这只能缓解症状，仍然无法解决我的痛苦。时间一长，那些各种笔记我再也想不起当初为什么记录，为什么写下那些话。</p><h2 id="不停地读"><a href="#不停地读" class="headerlink" title="不停地读"></a>不停地读</h2><p>为了缓解我的痛苦，我只能不停地读，不停地记笔记，这就好像是打游戏上瘾了。读书变成了我的生活必需，和吃饭睡觉一样重要。只要有时间我就会泡在图书馆，因为我买不起那么多书。待在图书馆或书店，我感觉自己就活在天堂，感受到了这个世界的第一等快乐。时间一长，我的笔记也越来越多。逐渐地我认识到长期这样也不行，我记录的笔记总是想不起来。我开始不断地反思我的这些行为到底有什么意义？我开始寻找解决之道，好几年后，我找到一个办法。</p><h2 id="不停地写"><a href="#不停地写" class="headerlink" title="不停地写"></a>不停地写</h2><p>没错，就是写作，但不是写日记，是要公开发表的那种。<br>写作是什么？当然是心灵感应。当我在斯蒂芬金的《写作这回事》里读到这句话时，那感觉就是当头一棒，瞬间明白了写作是什么。我于是开始在网上发布自己写的文章，我从不关心是否有人在看，也不关心写的有多烂。就是一直写，一直发。几年后，我发现和当初读书一样，我又上瘾了，停不下来了。但是这仍然没有解决我最初的痛苦，于是，我开始研究各种写作理论和写作方法，目的是让自己写得更清楚。这也促使我读的书更多，记录的笔记也更多，想写的主题同样更多。这个时候我觉得自己的脑子里仍然一片混沌，我走到了崩溃的边缘。</p><h2 id="管理笔记"><a href="#管理笔记" class="headerlink" title="管理笔记"></a>管理笔记</h2><p>记录的笔记越来越多，写的文章也越来多，这又带来了新的痛苦，没错，就是管理笔记。我受够了在各种文件夹翻来翻去找笔记的痛苦。我开始花费大量精力研究如何管理笔记，使用什么笔记工具。市面上流行的笔记软件，我都用过。在笔记软件之间换来换去，寻找适合自己的笔记软件成了一件大事。有句老话说得好，“工欲善其事，必先利其器”，作为一个人类是离不开使用工具的。我用过很多笔记软件，目前看来OBsidian是最适合我的，我简单谈谈为什么？为了方便，我简称Obsidian为Ob。谈工具离不开用户需求和使用场景。下面是我的理由。</p><p><code>排版</code>。Ob 支持最流行的markdown格式，因为我不想在排版上花费太多时间，markdown就很好地满足这个需求。当然这是最基本的需求，多数笔记软件都有这个功能。 <code>笔记存在本地</code>。很重要的一点是笔记文件是离线的，我不想把笔记交给第三方。 <code>文件管理</code>。Ob支持文件管理，我不需要在电脑的资源管理器和笔记软件之间跳来跳去，这非常方便。 <code>全局搜索</code>。无论是一句话还是一个关键词，你可以在整个笔记文件夹里搜索，包括文件里面的内容。 <code>关系图谱、双向链接</code>。Ob的特色功能是“关系图谱”和“双向链接”，这是按照卡片笔记法的原理设计的。我尤其喜欢关系图谱，它形象地展现出了各种想法之间的连接。查看图谱时，我发现了类似人际关系里的弱连接，这时往往会启发出新想法，获得灵感。 <code>功能扩展</code>。支持插件扩展软件功能，我完全可以按照自己的需求像搭积木一样组合出最适合我的软件功能。 <code>免费</code>。这是最重要的一点，如果你不使用同步功能，Ob个人使用永久免费，当然也不需要注册账号。一个工具再好用，需要付费的话，我还是要慎重考虑的。<code>两点不足</code>。当然也有一些小缺陷，没有Notion里面块的功能强大，不能任意的拖动块。 文件导出的格式有点少。我想以后这两个问题都会解决的。</p><h2 id="不停的重读"><a href="#不停的重读" class="headerlink" title="不停的重读"></a>不停的重读</h2><p>整理笔记、梳理自己的想法，每次都需要把所有的笔记阅读一遍，才能梳理出思路，整个大脑就像笔记本电脑载入大型项目后，因内存不足造成卡顿一样。直到读完《卡片笔记写作法》和使用Obsidian这个工具后，让我崩溃的问题似乎找到了解决办法，最起码看到了希望。为此，我兴奋了一个多月。我以前的写作流程也和卡片笔记法类似。最重要的区别只有一点，我是使用大脑反复阅读笔记，然后在大脑中寻找笔记间的联系，这就需要不停的重读笔记，笔记越多，我越痛苦。卡片笔记法结合Obsidian软件刚好解决了我的这个问题。我的大脑被解放了，通过这个方法和工具，我把大脑里做的事情在大脑外部做了。</p><h2 id="人是他写的文字"><a href="#人是他写的文字" class="headerlink" title="人是他写的文字"></a>人是他写的文字</h2><p>不写，就无法思考。卢曼这句话听起来有点夸张，可我的感受确实就是这样的。文字并不是思考的载体，而是思考的媒介。什么是媒介？电流需要通过导体才能传播，思考需要写出来的文字才能思考。我们写下的文字就是思考本身。用写作来思考就像给电脑加了内存条一样，思考会更加顺利、自然。</p><blockquote><p>理查德·费曼的办公室曾经有一位访客，他是一位历史学家，想采访费曼。他说当他看到费曼的笔记本时，非常高兴能够看到“费曼思维过程的精彩记录”。“不，不！”费曼反驳道，“这些不是我思维过程的记录，它们就是我的思维过程，实际上我的思维活动都是在纸上进行的。”“好吧，”历史学家说：“工作是在你的脑子里完成的，但它的记录还是在纸上。”“不，这不是记录，这就是工作过程。我需要在纸上开展工作，这就是那些纸。”<br>——《卡片笔记写作法》</p></blockquote><p>我们是通过语言来思考的，文字又是语言的媒介，这样抽象的思考就通过这些叫做“文字”的符号，形象的表现在纸面上了，当然你也可以画各种各样的图形。记笔记就是把抽象思维转变为形象思维的过程。为什么需要形象化？一段描写树叶的文字，一张树叶的照片，一段树叶的视频，你更喜欢哪种表现形式？图片和视频显然更加形象，它们不需要你太多的思考，理解起来比较省力。相比于文字，图片和视频虽然更形象，但用来表达抽象的事物时就没有文字方便，比如你很高兴这件事，用文字来表达就是“我很高兴”，四个字就够了，用图片和视频就比较麻烦。</p><p>18世纪德国哲学家费尔巴哈说过这样一句名言：“人是他吃的食物”。那么我模仿他的说法谈写作就是：人是他写的文字。所以，你想要了解一个人，读一读他的文章是个好办法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不知道读者们发现没有？思考、阅读、实践、反馈、再思考。这个过程就是不断地实践，然后获得反馈，调整思路后再实践。这就是我们认识这个世界的基本流程。</p><p>随着这个循环的不断重复，我们的认知也在不断地升级。回到最初的问题，当我记笔记时，究竟在记什么？我想你我心中已经有了最佳答案，但是我仍然无法准确的描述出来。为什么呢？我想《道德经》的开篇正好回答了这个问题。</p><blockquote><p>道可道，非常道；名可名，非常名。无名天地之始，有名万物之母。故常无欲，以观其妙；常有欲，以观其徼（jiào）。此两者同出而异名，同谓之玄，玄之又玄，众妙之门。</p></blockquote><hr><p><strong>行动与思考</strong></p><ul><li>读完此文你会记笔记吗？</li><li>你记笔记时，到底在记什么？</li></ul>]]></content>
    
    
    <categories>
      
      <category>精神家园</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Matery 主题个性化修改</title>
    <link href="/2022/06/27/theme/Matery%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E4%BF%AE%E6%94%B9/"/>
    <url>/2022/06/27/theme/Matery%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E4%BF%AE%E6%94%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="页面菜单栏图标个性化设置："><a href="#页面菜单栏图标个性化设置：" class="headerlink" title="页面菜单栏图标个性化设置："></a>页面菜单栏图标个性化设置：</h2><h3 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h3><p>matery主题中的小图标都是调用 <a href="http://www.fontawesome.com.cn/faicons">http://www.fontawesome.com.cn/faicons</a>  上的图标，记住图标名称，引用的时候直接写就行了，格式如下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">About:</span><br><span class="hljs-symbol">  url:</span> /about<br><span class="hljs-symbol">  icon:</span> fas fa-user-circle<br> <br></code></pre></td></tr></table></figure><h3 id="名称"><a href="#名称" class="headerlink" title="名称"></a>名称</h3><p>页面下大标题修改成和菜单栏文本相同：<br>打开 themes\hexo-theme-matery\languages\zh-CN.yml 文件，修改格式如下：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">archives:</span> 归档<br><span class="hljs-symbol">about:</span> 关于<br><span class="hljs-symbol">contact:</span> 访客登记薄<br><span class="hljs-symbol">friends:</span> 学习情报处  <br></code></pre></td></tr></table></figure><h2 id="关于我页面添加自定义内容"><a href="#关于我页面添加自定义内容" class="headerlink" title="关于我页面添加自定义内容"></a>关于我页面添加自定义内容</h2><p>打开 theme&#x2F;matery&#x2F;layout&#x2F;about.ejs 文件。<br>在 13 行有一个 <code>&lt;div class=&quot;card&quot;&gt;</code> 标签，找出其对应结尾的标签，大概在 61 行后面新增如下代码：</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-content&quot;</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-content article-card-content&quot;</span>&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title center-align&quot;</span> <span class="hljs-attr">data-aos</span>=<span class="hljs-string">&quot;zoom-in-up&quot;</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-info-circle&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&lt;%-</span><span class="language-ruby"> __(<span class="hljs-string">&#x27;关于&#x27;</span>) </span><span class="language-xml">%&gt;</span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;articleContent&quot;</span> <span class="hljs-attr">data-aos</span>=<span class="hljs-string">&quot;fade-up&quot;</span>&gt;</span></span><br><span class="language-xml">                     &lt;%-</span><span class="language-ruby"> page.content </span><span class="language-xml">%&gt;</span><br><span class="language-xml">                 <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">           <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>可以在 about 页 index.md 自定义内容。</p><h2 id="添加加载动画"><a href="#添加加载动画" class="headerlink" title="添加加载动画"></a>添加加载动画</h2><h3 id="1、在主题-x2F-layout-x2F-partial-x2F-目录新建一个loading-pages-ejs-内容如下："><a href="#1、在主题-x2F-layout-x2F-partial-x2F-目录新建一个loading-pages-ejs-内容如下：" class="headerlink" title="1、在主题 &#x2F;layout&#x2F;_partial&#x2F;目录新建一个loading-pages.ejs 内容如下："></a>1、在主题 &#x2F;layout&#x2F;_partial&#x2F;目录新建一个loading-pages.ejs 内容如下：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-id">#loading-container</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: fixed;</span><br><span class="language-css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100vh</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100vw</span>;</span><br><span class="language-css">        <span class="hljs-attribute">z-index</span>: <span class="hljs-number">9999</span>;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">        <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="language-css">        <span class="hljs-attribute">justify-content</span>: center;</span><br><span class="language-css">        <span class="hljs-attribute">align-items</span>: center;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: <span class="hljs-number">#FFF</span>;</span><br><span class="language-css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        <span class="hljs-comment">/* loader页面消失采用渐隐的方式*/</span></span><br><span class="language-css">        -webkit-<span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">1s</span> ease;</span><br><span class="language-css">        -moz-<span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">1s</span> ease;</span><br><span class="language-css">        -o-<span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">1s</span> ease;</span><br><span class="language-css">        <span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">1s</span> ease;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.loading-image</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">120px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.loading-image</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;</span><br><span class="language-css">        -webkit-<span class="hljs-attribute">animation</span>: pacman-balls <span class="hljs-number">1s</span> linear <span class="hljs-number">0s</span> infinite;</span><br><span class="language-css">        <span class="hljs-attribute">animation</span>: pacman-balls <span class="hljs-number">1s</span> linear <span class="hljs-number">0s</span> infinite</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.loading-image</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) &#123;</span><br><span class="language-css">        -webkit-<span class="hljs-attribute">animation</span>: pacman-balls <span class="hljs-number">1s</span> linear .<span class="hljs-number">33s</span> infinite;</span><br><span class="language-css">        <span class="hljs-attribute">animation</span>: pacman-balls <span class="hljs-number">1s</span> linear .<span class="hljs-number">33s</span> infinite</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.loading-image</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">4</span>) &#123;</span><br><span class="language-css">        -webkit-<span class="hljs-attribute">animation</span>: pacman-balls <span class="hljs-number">1s</span> linear .<span class="hljs-number">66s</span> infinite;</span><br><span class="language-css">        <span class="hljs-attribute">animation</span>: pacman-balls <span class="hljs-number">1s</span> linear .<span class="hljs-number">66s</span> infinite</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.loading-image</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">5</span>) &#123;</span><br><span class="language-css">        -webkit-<span class="hljs-attribute">animation</span>: pacman-balls <span class="hljs-number">1s</span> linear .<span class="hljs-number">99s</span> infinite;</span><br><span class="language-css">        <span class="hljs-attribute">animation</span>: pacman-balls <span class="hljs-number">1s</span> linear .<span class="hljs-number">99s</span> infinite</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">   <span class="hljs-selector-class">.loading-image</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:first</span>-of-type &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">25px</span> solid <span class="hljs-number">#49b1f5</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-right-color</span>: transparent;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">        -webkit-<span class="hljs-attribute">animation</span>: rotate_pacman_half_up .<span class="hljs-number">5s</span> <span class="hljs-number">0s</span> infinite;</span><br><span class="language-css">        <span class="hljs-attribute">animation</span>: rotate_pacman_half_up .<span class="hljs-number">5s</span> <span class="hljs-number">0s</span> infinite;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.loading-image</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">25px</span> solid <span class="hljs-number">#49b1f5</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-right-color</span>: transparent;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">        -webkit-<span class="hljs-attribute">animation</span>: rotate_pacman_half_down .<span class="hljs-number">5s</span> <span class="hljs-number">0s</span> infinite;</span><br><span class="language-css">        <span class="hljs-attribute">animation</span>: rotate_pacman_half_down .<span class="hljs-number">5s</span> <span class="hljs-number">0s</span> infinite;</span><br><span class="language-css">        <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">50px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-keyword">@-webkit-keyframes</span> rotate_pacman_half_up &#123;<span class="hljs-number">0%</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">270deg</span>)&#125;<span class="hljs-number">50%</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">1turn</span>)&#125;<span class="hljs-selector-tag">to</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">270deg</span>)&#125;&#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-keyword">@keyframes</span> rotate_pacman_half_up &#123;<span class="hljs-number">0%</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">270deg</span>)&#125;<span class="hljs-number">50%</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">1turn</span>)&#125;<span class="hljs-selector-tag">to</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">270deg</span>)&#125;&#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-keyword">@-webkit-keyframes</span> rotate_pacman_half_down &#123;<span class="hljs-number">0%</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">90deg</span>)&#125;<span class="hljs-number">50%</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0deg</span>)&#125;<span class="hljs-selector-tag">to</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">90deg</span>)&#125;&#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-keyword">@keyframes</span> rotate_pacman_half_down &#123;<span class="hljs-number">0%</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">90deg</span>)&#125;<span class="hljs-number">50%</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0deg</span>)&#125;<span class="hljs-selector-tag">to</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">90deg</span>)&#125;&#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-keyword">@-webkit-keyframes</span> pacman-balls &#123;<span class="hljs-number">75%</span> &#123;<span class="hljs-attribute">opacity</span>: .<span class="hljs-number">7</span>&#125;<span class="hljs-selector-tag">to</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">100px</span>, -<span class="hljs-number">6.25px</span>)&#125;&#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-keyword">@keyframes</span> pacman-balls &#123;<span class="hljs-number">75%</span> &#123;<span class="hljs-attribute">opacity</span>: .<span class="hljs-number">7</span>&#125;<span class="hljs-selector-tag">to</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">100px</span>, -<span class="hljs-number">6.25px</span>)&#125;&#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.loading-image</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>),</span><br><span class="language-css">    <span class="hljs-selector-class">.loading-image</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">4</span>),</span><br><span class="language-css">    <span class="hljs-selector-class">.loading-image</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">5</span>),</span><br><span class="language-css">    <span class="hljs-selector-class">.loading-image</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">6</span>)&#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#49b1f5</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">2px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">6.25px</span>);</span><br><span class="language-css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.loading-text</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">20vh</span>;</span><br><span class="language-css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#2c3e50</span>;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2rem</span>;</span><br><span class="language-css">        <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-number">10px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.2</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-keyword">@media</span> <span class="hljs-keyword">only</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">500px</span>) &#123;</span><br><span class="language-css">         <span class="hljs-selector-class">.loading-text</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.5rem</span>;</span><br><span class="language-css">         &#125;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.fadeout</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">alpha</span>(opacity=<span class="hljs-number">0</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-comment">/* logo出现动画 */</span></span><br><span class="language-css">    <span class="hljs-keyword">@-webkit-keyframes</span> fadeInDown&#123;<span class="hljs-number">0%</span>&#123;<span class="hljs-attribute">opacity</span>:<span class="hljs-number">0</span>;-webkit-<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate3d</span>(<span class="hljs-number">0</span>,-<span class="hljs-number">100%</span>,<span class="hljs-number">0</span>);<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate3d</span>(<span class="hljs-number">0</span>,-<span class="hljs-number">100%</span>,<span class="hljs-number">0</span>)&#125;<span class="hljs-number">100%</span>&#123;<span class="hljs-attribute">opacity</span>:<span class="hljs-number">1</span>;-webkit-<span class="hljs-attribute">transform</span>:none;<span class="hljs-attribute">transform</span>:none&#125;&#125;</span><br><span class="language-css">    <span class="hljs-keyword">@keyframes</span> fadeInDown&#123;<span class="hljs-number">0%</span>&#123;<span class="hljs-attribute">opacity</span>:<span class="hljs-number">0</span>;-webkit-<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate3d</span>(<span class="hljs-number">0</span>,-<span class="hljs-number">100%</span>,<span class="hljs-number">0</span>);&#125;&#125;</span><br><span class="language-css"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> loaded = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">       <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> loader = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;loading-container&quot;</span>);</span><br><span class="language-javascript">            loader.<span class="hljs-property">className</span>=<span class="hljs-string">&quot;fadeout&quot;</span> ;<span class="hljs-comment">//使用渐隐的方法淡出loading page</span></span><br><span class="language-javascript">            <span class="hljs-comment">// document.getElementById(&quot;body-wrap&quot;).style.display=&quot;flex&quot;;</span></span><br><span class="language-javascript">            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                loader.<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&quot;none&quot;</span>;</span><br><span class="language-javascript">            &#125;,<span class="hljs-number">2500</span>); </span><br><span class="language-javascript">        &#125;,<span class="hljs-number">1000</span>);<span class="hljs-comment">//强制显示loading page 1s  </span></span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">    <span class="hljs-title function_">loaded</span>();</span><br><span class="language-javascript">&#125;)()</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、在主题的-layout-目录找到-layout-ejs-文件"><a href="#2、在主题的-layout-目录找到-layout-ejs-文件" class="headerlink" title="2、在主题的 layout 目录找到 layout.ejs 文件"></a>2、在主题的 layout 目录找到 layout.ejs 文件</h3><p>在 <body> 附近添加内容后如下：</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;&lt;%=</span></span></span><span class="language-ruby"> config.language </span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">%&gt;&quot;</span>&gt;</span></span><br><span class="language-xml">&lt;%-</span><span class="language-ruby"> partial(<span class="hljs-string">&#x27;_partial/head&#x27;</span>) </span><span class="language-xml">%&gt;</span><br><span class="language-xml"></span><br><span class="language-xml"> &lt;%</span><span class="language-ruby"> <span class="hljs-keyword">if</span> (theme.loadingPages.enable) &#123; </span><span class="language-xml">%&gt;</span><br><span class="language-xml">    &lt;%-</span><span class="language-ruby"> partial(<span class="hljs-string">&#x27;_partial/loading-pages&#x27;</span>) </span><span class="language-xml">%&gt;</span><br><span class="language-xml"> &lt;%</span><span class="language-ruby"> &#125; </span><span class="language-xml">%&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    &lt;%</span><span class="language-ruby"> <span class="hljs-keyword">if</span> (theme.loadingPages.enable) &#123; </span><span class="language-xml">%&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loading-container&quot;</span>&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;loading-text&quot;</span>&gt;</span>嘘~  正在从服务器偷取页面 . . . <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> </span><br><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;loading-image&quot;</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    &lt;%</span><span class="language-ruby"> &#125; </span><span class="language-xml">%&gt;</span><br><span class="language-xml"></span><br><span class="language-xml">    &lt;%-</span><span class="language-ruby"> partial(<span class="hljs-string">&#x27;_partial/header&#x27;</span>) </span><span class="language-xml">%&gt;</span><br><span class="language-xml">    ...</span><br></code></pre></td></tr></table></figure><h3 id="3、在主题配置文件-config-yml添加开关配置"><a href="#3、在主题配置文件-config-yml添加开关配置" class="headerlink" title="3、在主题配置文件_config.yml添加开关配置"></a>3、在主题配置文件_config.yml添加开关配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">loadingPages:<br>  <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span>  <br><span class="hljs-built_in">enable</span> 设置为 <span class="hljs-literal">true</span> 表示开启加载动画， <span class="hljs-literal">false</span> 表示关闭加载动画。<br></code></pre></td></tr></table></figure><h2 id="修改博客标题在手机端的字体大小"><a href="#修改博客标题在手机端的字体大小" class="headerlink" title="修改博客标题在手机端的字体大小"></a>修改博客标题在手机端的字体大小</h2><p>在主题文件的source&#x2F;css&#x2F;my.css文件中，新增下面这样的 CSS 代码，然后设置成自己喜欢的字体大小即可</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">/* 修改首页轮播的标题大小 */</span><br><span class="hljs-keyword">@media</span> <span class="hljs-keyword">only</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">601px</span>) &#123;<br>    <span class="hljs-selector-class">.bg-cover</span> <span class="hljs-selector-class">.title</span> &#123;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2.5rem</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 修改博客标题的字体大小 */</span><br><span class="hljs-keyword">@media</span> <span class="hljs-keyword">only</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">601px</span>) &#123;<br>    <span class="hljs-selector-tag">header</span> <span class="hljs-selector-class">.brand-logo</span> <span class="hljs-selector-class">.logo-span</span> &#123;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.5rem</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="去掉banner的颜色动画"><a href="#去掉banner的颜色动画" class="headerlink" title="去掉banner的颜色动画"></a>去掉banner的颜色动画</h2><p>有的同学可能不喜欢banner的颜色遮罩，特别是在banner图片的颜色和动画颜色一样时，表现不出图片的美观。去掉后放一张高清小姐姐大图，博客访问量一下迅速爆炸！听我的准没错，那如何去掉这个烦人的彩色动画呢？跟着我：在theme主题目录下，找到 source&#x2F;css&#x2F;matery.css文件,ctrl+F快捷键查找.bg-cover:after，注释掉即可。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext">/* .bg-cover:after &#123;<br>    <span class="hljs-attribute">-webkit-animation</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rainbow 60s infinite;</span><br>    <span class="hljs-attribute">animation</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rainbow 60s infinite;</span><br>&#125; */<br></code></pre></td></tr></table></figure><hr><p>参考资料</p><p><a href="https://blog.csdn.net/kuashijidexibao/article/details/112971657">https://blog.csdn.net/kuashijidexibao/article/details/112971657</a></p><p><a href="https://zhuanlan.zhihu.com/p/259728821">https://zhuanlan.zhihu.com/p/259728821</a></p><p>添加相册<br><a href="https://www.cnblogs.com/chendeqiang/p/12861726.html">https://www.cnblogs.com/chendeqiang/p/12861726.html</a><br><a href="https://blog.csdn.net/weixin_39759247/article/details/107055255">https://blog.csdn.net/weixin_39759247/article/details/107055255</a></p>]]></content>
    
    
    <categories>
      
      <category>建设博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Matery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022-Hello World</title>
    <link href="/2022/06/26/home/2022-hello-world/"/>
    <url>/2022/06/26/home/2022-hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="我换了个马甲又回来了"><a href="#我换了个马甲又回来了" class="headerlink" title="我换了个马甲又回来了"></a>我换了个马甲又回来了</h1><p>好久没有写博客了，最近整理电脑文件，发现这个闲置的角落。</p><p>自认为这件事很有意义，于是我打扫了一下卫生，换了个皮肤，瞬间清爽了许多。</p><p>没有那么多的花里胡哨，我只需要清爽简单。</p>]]></content>
    
    
    <categories>
      
      <category>精神家园</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编辑器之神Vim</title>
    <link href="/2019/11/16/tools/%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9EVim/"/>
    <url>/2019/11/16/tools/%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9EVim/</url>
    
    <content type="html"><![CDATA[<p>在linxu下，不得不提的一款效率工具就是Vim。学习使用vim这个工具就像学自行车，学会了想咋骑就咋骑，想多优雅就有多优雅。</p><h2 id="1-普通模式"><a href="#1-普通模式" class="headerlink" title="1. 普通模式"></a>1. 普通模式</h2><p>首次打开 vim 就是普通模式，是使用频率最高的，所以是默认模式。</p><h3 id="1-1-内容浏览，移动光标，翻页"><a href="#1-1-内容浏览，移动光标，翻页" class="headerlink" title="1.1 内容浏览，移动光标，翻页"></a>1.1 内容浏览，移动光标，翻页</h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>j k h l</td><td>下、上、左、右移动光标</td></tr><tr><td>w</td><td>移动到单词的开头</td></tr><tr><td>e</td><td>移动到单词的结尾</td></tr><tr><td>gg , 1G</td><td>移动到文件开始</td></tr><tr><td>G, $, [end]</td><td>移动到文件结尾</td></tr><tr><td>&lt; ctrl + f &gt; [PgUp]</td><td>向下一页</td></tr><tr><td>&lt; ctrl + b &gt;  [PgDn]</td><td>向上一页</td></tr><tr><td>:n</td><td>移动到第 n 行</td></tr></tbody></table><h3 id="1-2-选择操作对象-可视模式"><a href="#1-2-选择操作对象-可视模式" class="headerlink" title="1.2 选择操作对象-可视模式"></a>1.2 选择操作对象-可视模式</h3><p>v , &lt; shift + v &gt; , &lt; ctrl+ v &gt; 分别对应 “字、行、列”，然后再移动以扩大选区。</p><p><em><strong>*– VISUAL –*</strong></em> 字符</p><p><em><strong>*– VISUAL LINE –*</strong></em> 行</p><p><em><strong>*– VISUAL BLOCK –*</strong></em> 列</p><p>Esc 退出选择</p><h3 id="1-3-剪切、复制、粘贴、删除"><a href="#1-3-剪切、复制、粘贴、删除" class="headerlink" title="1.3 剪切、复制、粘贴、删除"></a>1.3 剪切、复制、粘贴、删除</h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>dd</td><td>剪切或删除一行</td></tr><tr><td>6dd</td><td>剪切或删除6行</td></tr><tr><td>yy</td><td>复制光标所在的行</td></tr><tr><td>p</td><td>在光标所在的下一行粘贴</td></tr><tr><td>P (大)</td><td>在光标所在的行粘贴</td></tr><tr><td>dG</td><td>删除光标所在行到最后一行内容</td></tr><tr><td>c</td><td>重复删除多个数据</td></tr><tr><td>x</td><td>向后删除一个字符</td></tr><tr><td>X (大)</td><td>向前删除一个字符</td></tr><tr><td>dw</td><td>删除单词</td></tr></tbody></table><h3 id="1-4-撤销和重做"><a href="#1-4-撤销和重做" class="headerlink" title="1.4 撤销和重做"></a>1.4 撤销和重做</h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>u</td><td>撤销前一个操作</td></tr><tr><td>&lt; ctrl + r &gt;</td><td>重做前一个操作，反撤销</td></tr></tbody></table><h3 id="查找、替换"><a href="#查找、替换" class="headerlink" title="查找、替换"></a>查找、替换</h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>&#x2F;word</td><td>向后查找word</td></tr><tr><td>?word</td><td>向前查找word</td></tr><tr><td>n</td><td>向下继续查找</td></tr><tr><td>N</td><td>向上继续查找</td></tr><tr><td>r</td><td>替换光标所在字符</td></tr><tr><td>R</td><td>从光标处开始一直替换字符，Esc结束</td></tr><tr><td>:1,10s&#x2F;old&#x2F;new&#x2F;g</td><td>替换1-10行所有的old为new</td></tr><tr><td>:%s&#x2F;old&#x2F;new&#x2F;g</td><td>替换整个文件所有的old为new</td></tr><tr><td>:1,10s&#x2F;^&#x2F;#&#x2F;g</td><td>使用#注释1-10行</td></tr></tbody></table><h2 id="2-插入模式-INSERT"><a href="#2-插入模式-INSERT" class="headerlink" title="2. 插入模式-INSERT"></a>2. 插入模式-<strong>INSERT</strong></h2><table><thead><tr><th align="left">命令</th><th>作用</th></tr></thead><tbody><tr><td align="left">a</td><td>在光标后插入</td></tr><tr><td align="left">A</td><td>在光标行末尾插入</td></tr><tr><td align="left">i</td><td>在光标前插入</td></tr><tr><td align="left">I</td><td>在光标行首插入</td></tr><tr><td align="left">o</td><td>在光标下插入新行</td></tr><tr><td align="left">O</td><td>在光标上插入新行</td></tr></tbody></table><p>Esc 退出插入编辑模式</p><h2 id="3-命令行模式"><a href="#3-命令行模式" class="headerlink" title="3. 命令行模式"></a>3. 命令行模式</h2><p>命令输入完成后按确定键（Enter）</p><h3 id="3-1-单文件操作"><a href="#3-1-单文件操作" class="headerlink" title="3.1 单文件操作"></a>3.1 单文件操作</h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>:w</td><td>保存</td></tr><tr><td>:w!</td><td>强制保存</td></tr><tr><td>:q</td><td>不保存退出</td></tr><tr><td>:q! ZQ</td><td>强制不保存退出</td></tr><tr><td>:wq ZZ</td><td>保存退出</td></tr><tr><td>:wq!</td><td>强制保存退出，只有root用户或文件所有者可用</td></tr><tr><td>:w [文件名]</td><td>另存为新文件</td></tr><tr><td>:e [文件名]</td><td>切换到另一个文件</td></tr><tr><td>:!date</td><td>在vim中临时执行date命令</td></tr></tbody></table><h3 id="3-2-多文件操作"><a href="#3-2-多文件操作" class="headerlink" title="3.2 多文件操作"></a>3.2 多文件操作</h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>vim -o ab cd</td><td>上下分屏打卡哦ab和cd两个文件</td></tr><tr><td>vim -O ab cd (大O)</td><td>左右分屏打卡哦ab和cd两个文件</td></tr></tbody></table><h4 id="同一个窗口-buffer-切换"><a href="#同一个窗口-buffer-切换" class="headerlink" title="同一个窗口 buffer 切换"></a>同一个窗口 buffer 切换</h4><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>:ls</td><td>列举当前缓冲区</td></tr><tr><td>:b n</td><td>（:b buffer_name）跳转到缓冲区</td></tr><tr><td>:e 文件名</td><td>打开的文件切换，不需要退出vim</td></tr></tbody></table><h4 id="多窗口切换-Windows"><a href="#多窗口切换-Windows" class="headerlink" title="多窗口切换 Windows"></a>多窗口切换 Windows</h4><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>&lt; ctrl + w &gt;  s</td><td>水平分割窗口</td></tr><tr><td>&lt; ctrl + w &gt; v</td><td>垂直分割窗口</td></tr><tr><td>:vs</td><td>水平分割窗口</td></tr><tr><td>:sp</td><td>垂直分割窗口</td></tr><tr><td>&lt; ctrl + w &gt;  w h j k l</td><td>切换分割的窗口</td></tr></tbody></table><h2 id="4-Vim偏好设置"><a href="#4-Vim偏好设置" class="headerlink" title="4. Vim偏好设置"></a>4. Vim偏好设置</h2><h3 id="使用指令临时设置"><a href="#使用指令临时设置" class="headerlink" title="使用指令临时设置"></a>使用指令临时设置</h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>:set nu</td><td>显示行号</td></tr><tr><td>:set nonu</td><td>取消显示行号</td></tr><tr><td>:syntax on</td><td>语法高亮</td></tr><tr><td>:colorscheme</td><td>显示当前主题配色</td></tr><tr><td>:colorscheme &lt; ctrl + d &gt;</td><td>显示所有配色</td></tr><tr><td>:colorscheme 配色名</td><td>修改配色名称,可以table补全</td></tr></tbody></table><h3 id="使用配置文件永久设置"><a href="#使用配置文件永久设置" class="headerlink" title="使用配置文件永久设置"></a>使用配置文件永久设置</h3><p>新建 <code>vi ~/.vimrc</code> 文件，写入下面内容设置</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-comment">&quot; 设置行号</span><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">number</span><br><br><span class="hljs-comment">&quot; 语法高亮</span><br><span class="hljs-keyword">syntax</span> <span class="hljs-keyword">on</span><br><br><span class="hljs-comment">&quot; 设置配色方案</span><br><span class="hljs-keyword">colorscheme</span> zellner<br><br><span class="hljs-comment">&quot; 高亮搜索</span><br><span class="hljs-keyword">set</span> hlsearch<br><br><span class="hljs-comment">&quot; 设置是否显示隐藏</span><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">list</span><br><span class="hljs-keyword">set</span> nolist<br><br># 设置快捷键 :<span class="hljs-keyword">map</span> 快捷键 指令<br># 按快捷键“ctrl+<span class="hljs-keyword">p</span>”时，在行首加入注释<br># 按快捷键“ctrl+<span class="hljs-keyword">b</span>”时，删除行首的第一个字母<br>:<span class="hljs-keyword">map</span> ^<span class="hljs-keyword">P</span> I#<span class="hljs-symbol">&lt;ESC&gt;</span><br>:<span class="hljs-keyword">map</span> ^B ^<span class="hljs-keyword">x</span><br></code></pre></td></tr></table></figure><h3 id="使用插件补充Vim的功能"><a href="#使用插件补充Vim的功能" class="headerlink" title="使用插件补充Vim的功能"></a>使用插件补充Vim的功能</h3><h4 id="插件管理器-vim-Plug-，用来统一管理vim插件的插件"><a href="#插件管理器-vim-Plug-，用来统一管理vim插件的插件" class="headerlink" title="插件管理器 vim-Plug ，用来统一管理vim插件的插件"></a>插件管理器 vim-Plug ，用来统一管理vim插件的插件</h4><p>安装 vim-Plug</p><p>- 方法1</p><p>手动 <a href="https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim">下载plug.vim</a> 并将其放在“~&#x2F;.vim&#x2F;autoload&#x2F;plug.vim”目录中，目录不存在就创建</p><p>- 方法2</p><p>参考<a href="https://github.com/junegunn/vim-plug">官方文档</a> 使用命令安装 </p><h4 id="在配置文件配置插件设置"><a href="#在配置文件配置插件设置" class="headerlink" title="在配置文件配置插件设置"></a>在配置文件配置插件设置</h4><p>配置“~&#x2F;.vimrc”文件内容如下，将要使用的插件使用<code>Plug &#39;mhinz/vim-startify&#39;</code> 格式写入vim配置文件</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-comment">&quot; 设置行号</span><br><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">number</span><br><br><span class="hljs-comment">&quot; 语法高亮</span><br><br><span class="hljs-keyword">syntax</span> <span class="hljs-keyword">on</span><br><br><span class="hljs-comment">&quot; 设置配色方案</span><br><br><span class="hljs-keyword">colorscheme</span> zellner<br><br><span class="hljs-comment">&quot; 高亮搜索</span><br><br><span class="hljs-keyword">set</span> hlsearch<br><br><br><span class="hljs-comment">&quot; vim-plug vim插件管理工具设置</span><br><br><span class="hljs-keyword">call</span> plug#begin()<br><br><span class="hljs-comment">&quot; The default plugin directory will be as follows:</span><br><br><span class="hljs-comment">&quot;  - Vim (Linux/macOS): &#x27;~/.vim/plugged&#x27;</span><br><br><span class="hljs-comment">&quot;  - Vim (Windows): &#x27;~/vimfiles/plugged&#x27;</span><br><br><span class="hljs-comment">&quot;  - Neovim (Linux/macOS/Windows): stdpath(&#x27;data&#x27;) . &#x27;/plugged&#x27;</span><br><br><span class="hljs-comment">&quot; You can specify a custom plugin directory by passing it as the argument</span><br><br><span class="hljs-comment">&quot;  - e.g. `call plug#begin(&#x27;~/.vim/plugged&#x27;)`</span><br><br><span class="hljs-comment">&quot;  - Avoid using standard Vim directory names like &#x27;plugin&#x27;</span><br><br><span class="hljs-comment">&quot; Vim的花哨的开始屏幕</span><br><br>Plug <span class="hljs-string">&#x27;mhinz/vim-startify&#x27;</span><br><br><span class="hljs-comment">&quot; Initialize plugin system</span><br><br><span class="hljs-keyword">call</span> plug#end()<br></code></pre></td></tr></table></figure><h4 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h4><p>重新加载<code> .vimrc</code> ，在打开的vimrc文件中输入下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:<span class="hljs-built_in">source</span> ~/.vimrc<br></code></pre></td></tr></table></figure><p>安装配置好的插件，在打开的<code>vimrc</code>文件中输入下面命令</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:PlugInstall</span><br></code></pre></td></tr></table></figure><p>插件安装完成，插件的设置选项也是在<code>vimrc</code> 文件中配置，不配置的话有关插件的内容就结束了。</p><h4 id="命令键位图"><a href="#命令键位图" class="headerlink" title="命令键位图"></a>命令键位图</h4><p>供参考，关键是要多使用vim，操作形成肌肉记忆就可以了，如同学会了骑自行车，然后就可以飞起了。</p><p><img src="https://www.runoob.com/wp-content/uploads/2015/10/vi-vim-cheat-sheet-sch1.gif" alt="vim键盘布局"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>菜鸟文字教程 <a href="https://www.runoob.com/linux/linux-vim.html">https://www.runoob.com/linux/linux-vim.html</a></p><p>慕课视频教程 <a href="https://www.imooc.com/learn/1129">https://www.imooc.com/learn/1129</a></p><p>w3c教程 <a href="https://www.w3cschool.cn/vim/">https://www.w3cschool.cn/vim/</a></p><p>vim 官方文档 <a href="https://vimhelp.org/">https://vimhelp.org/</a> 这个才是最权威的</p><p>vim 官方文档中文版 <a href="https://yianwillis.github.io/vimcdoc/doc/help.html">https://yianwillis.github.io/vimcdoc/doc/help.html</a></p><p>vim 插件推荐 <a href="https://vimawesome.com/">https://vimawesome.com/</a></p><p>vimrc 配置文件参考 <a href="https://github.com/search?q=vimrc">https://github.com/search?q=vimrc</a></p>]]></content>
    
    
    <categories>
      
      <category>软件工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker实战-基于Docker的Apache-Django-Mysql应用容器化</title>
    <link href="/2019/09/15/tools/docker/Docker%E5%AE%9E%E6%88%98-Apache-Django-Mysql%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    <url>/2019/09/15/tools/docker/Docker%E5%AE%9E%E6%88%98-Apache-Django-Mysql%E5%AE%B9%E5%99%A8%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="基于Docker的Apache-Django-Mysql应用容器化"><a href="#基于Docker的Apache-Django-Mysql应用容器化" class="headerlink" title="基于Docker的Apache-Django-Mysql应用容器化"></a>基于Docker的Apache-Django-Mysql应用容器化</h2><p>使用Dockerfile+compose的方式实战部署Django项目</p><span id="more"></span><h3 id="安装docker与compose，准备需要用到的-image"><a href="#安装docker与compose，准备需要用到的-image" class="headerlink" title="安装docker与compose，准备需要用到的 image"></a>安装docker与compose，准备需要用到的 image</h3><p>这里在centos7上安装，详细过程看前面文章,这里只记录版本号<br>docker版本信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@centos-7</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># docker version</span><br><span class="hljs-attr">Client:</span> <span class="hljs-string">Docker</span> <span class="hljs-string">Engine</span> <span class="hljs-bullet">-</span> <span class="hljs-string">Community</span><br> <span class="hljs-attr">Version:</span>           <span class="hljs-number">19.03</span><span class="hljs-number">.2</span><br> <span class="hljs-attr">API version:</span>       <span class="hljs-number">1.40</span><br> <span class="hljs-attr">Go version:</span>        <span class="hljs-string">go1.12.8</span><br> <span class="hljs-attr">Git commit:</span>        <span class="hljs-string">6a30dfc</span><br> <span class="hljs-attr">Built:</span>             <span class="hljs-string">Thu</span> <span class="hljs-string">Aug</span> <span class="hljs-number">29</span> <span class="hljs-number">05</span><span class="hljs-string">:28:55</span> <span class="hljs-number">2019</span><br> <span class="hljs-attr">OS/Arch:</span>           <span class="hljs-string">linux/amd64</span><br> <span class="hljs-attr">Experimental:</span>      <span class="hljs-literal">false</span><br><br><span class="hljs-attr">Server:</span> <span class="hljs-string">Docker</span> <span class="hljs-string">Engine</span> <span class="hljs-bullet">-</span> <span class="hljs-string">Community</span><br> <span class="hljs-attr">Engine:</span><br>  <span class="hljs-attr">Version:</span>          <span class="hljs-number">19.03</span><span class="hljs-number">.2</span><br>  <span class="hljs-attr">API version:</span>      <span class="hljs-number">1.40</span> <span class="hljs-string">(minimum</span> <span class="hljs-string">version</span> <span class="hljs-number">1.12</span><span class="hljs-string">)</span><br>  <span class="hljs-attr">Go version:</span>       <span class="hljs-string">go1.12.8</span><br>  <span class="hljs-attr">Git commit:</span>       <span class="hljs-string">6a30dfc</span><br>  <span class="hljs-attr">Built:</span>            <span class="hljs-string">Thu</span> <span class="hljs-string">Aug</span> <span class="hljs-number">29</span> <span class="hljs-number">05</span><span class="hljs-string">:27:34</span> <span class="hljs-number">2019</span><br>  <span class="hljs-attr">OS/Arch:</span>          <span class="hljs-string">linux/amd64</span><br>  <span class="hljs-attr">Experimental:</span>     <span class="hljs-literal">false</span><br> <span class="hljs-attr">containerd:</span><br>  <span class="hljs-attr">Version:</span>          <span class="hljs-number">1.2</span><span class="hljs-number">.6</span><br>  <span class="hljs-attr">GitCommit:</span>        <span class="hljs-string">894b81a4b802e4eb2a91d1ce216b8817763c29fb</span><br> <span class="hljs-attr">runc:</span><br>  <span class="hljs-attr">Version:</span>          <span class="hljs-number">1.0</span><span class="hljs-number">.0</span><span class="hljs-string">-rc8</span><br>  <span class="hljs-attr">GitCommit:</span>        <span class="hljs-string">425e105d5a03fabd737a126ad93d62a9eeede87f</span><br> <span class="hljs-attr">docker-init:</span><br>  <span class="hljs-attr">Version:</span>          <span class="hljs-number">0.18</span><span class="hljs-number">.0</span><br>  <span class="hljs-attr">GitCommit:</span>        <span class="hljs-string">fec3683</span><br></code></pre></td></tr></table></figure><p>compose 版本信息</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs d">[root<span class="hljs-keyword">@centos</span>-<span class="hljs-number">7</span> ~]# docker-compose <span class="hljs-keyword">version</span><br>docker-compose <span class="hljs-keyword">version</span> <span class="hljs-number">1.24</span><span class="hljs-number">.1</span>, build <span class="hljs-number">4667896</span>b<br>docker-py <span class="hljs-keyword">version</span>: <span class="hljs-number">3.7</span><span class="hljs-number">.3</span><br>CPython <span class="hljs-keyword">version</span>: <span class="hljs-number">3.6</span><span class="hljs-number">.8</span><br>OpenSSL <span class="hljs-keyword">version</span>: OpenSSL <span class="hljs-number">1.1</span><span class="hljs-number">.0</span>j  <span class="hljs-number">20</span> Nov <span class="hljs-number">2018</span><br></code></pre></td></tr></table></figure><p>查找Docker Hub上的mysql镜像</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">docker <span class="hljs-built_in">search</span> mysql<br>docker <span class="hljs-built_in">search</span> centos<br></code></pre></td></tr></table></figure><p>拉取官方的镜像</p><p>国内访问 hub.docker.com 网速不好,建议配置阿里云加速或网易云加速</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull mysql:<span class="hljs-number">5</span>.<span class="hljs-number">7</span><br><br><span class="hljs-attribute">docker</span> pull centos:<span class="hljs-number">6</span>.<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><h3 id="准备文件结构docker文件夹目录结构"><a href="#准备文件结构docker文件夹目录结构" class="headerlink" title="准备文件结构docker文件夹目录结构"></a>准备文件结构<strong>docker文件夹目录结构</strong></h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">└── docker<br>    │ <br>    ├── docker-compose.yml          <span class="hljs-comment"># docker-compose 配置文件</span><br>    ├── Dockerfile                  <span class="hljs-comment"># 构建httpd+django容器的Dockerfile</span><br>    │   <br>    └── work<br>        └── html                    <span class="hljs-comment"># 项目代码源文件本地持久化</span><br>        │   └── <span class="hljs-keyword">dist </span>               <span class="hljs-comment"># Angular前端</span><br>        │   └── PmsService          <span class="hljs-comment"># Django后端</span><br>        │ <br>        └── httpd<br>        │   ├── PmsService.conf     <span class="hljs-comment"># httpd配置文件</span><br>        │   └── mod_wsgi.conf       <span class="hljs-comment"># wsgi配置文件</span><br>        │ <br>        └── mysql                   <span class="hljs-comment"># 数据库持久化主机挂载目录</span><br>       <br></code></pre></td></tr></table></figure><h3 id="构建httpd-django容器的Dockerfile"><a href="#构建httpd-django容器的Dockerfile" class="headerlink" title="构建httpd+django容器的Dockerfile"></a><strong>构建httpd+django容器的Dockerfile</strong></h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs awk">FROM centos:<span class="hljs-number">6.8</span><br><br>LABEL version=<span class="hljs-string">&quot;1.0&quot;</span><br>LABEL author=keker<br>LABEL description=<span class="hljs-string">&quot;httpd+wsgi+django&quot;</span><br><br><span class="hljs-comment"># centos：7和centos：latest基本容器中都包含Systemd，但是默认情况下它不处于活动状态。</span><br><span class="hljs-comment"># 为了使用systemd，您将删除了许多可能导致问题的文件</span><br><br>RUN (cd <span class="hljs-regexp">/lib/</span>systemd<span class="hljs-regexp">/system/</span>sysinit.target.wants/; <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> *; <span class="hljs-keyword">do</span> [ <span class="hljs-variable">$i</span> == \<br>systemd-tmpfiles-setup.service ] || rm -f <span class="hljs-variable">$i</span>; done); \<br>rm -f <span class="hljs-regexp">/lib/</span>systemd<span class="hljs-regexp">/system/mu</span>lti-user.target.wants/*;\<br>rm -f <span class="hljs-regexp">/etc/</span>systemd<span class="hljs-regexp">/system/</span>*.wants/*;\<br>rm -f <span class="hljs-regexp">/lib/</span>systemd<span class="hljs-regexp">/system/</span>local-fs.target.wants/*; \<br>rm -f <span class="hljs-regexp">/lib/</span>systemd<span class="hljs-regexp">/system/</span>sockets.target.wants/*udev*; \<br>rm -f <span class="hljs-regexp">/lib/</span>systemd<span class="hljs-regexp">/system/</span>sockets.target.wants/*initctl*; \<br>rm -f <span class="hljs-regexp">/lib/</span>systemd<span class="hljs-regexp">/system/</span>basic.target.wants/*;\<br>rm -f <span class="hljs-regexp">/lib/</span>systemd<span class="hljs-regexp">/system/</span>anaconda.target.wants/*;<br><br><br><span class="hljs-comment"># yum 更新/安装pip源/安装环境软件</span><br>RUN yum -y update &amp;&amp; yum clean all &amp;&amp; yum -y install epel-release \<br>    &amp;&amp; yum --enablerepo=epel install -y python-pip \<br>    &amp;&amp; yum install -y gcc libffi-devel python-devel openssl-devel \<br>    &amp;&amp; yum install -y mysql-devel python-devel python-setuptools \<br>    &amp;&amp; yum -y install httpd* \<br>    &amp;&amp; pip install -i https:<span class="hljs-regexp">//</span>pypi.tuna.tsinghua.edu.cn/simple django==<span class="hljs-number">1.6</span>.<span class="hljs-number">2</span> \<br>    &amp;&amp; pip install -i https:<span class="hljs-regexp">//</span>pypi.tuna.tsinghua.edu.cn/simple djangorestframework==<span class="hljs-number">2.3</span>.<span class="hljs-number">14</span> \<br>    &amp;&amp; pip install MySQL-python &amp;&amp; pip install mod_wsgi &amp;&amp; mod_wsgi-express install-module \<br>    &amp;&amp; chkconfig --level <span class="hljs-number">2345</span> httpd on<br><br><br><span class="hljs-comment"># 暴露端口</span><br>EXPOSE <span class="hljs-number">80</span><br>EXPOSE <span class="hljs-number">8007</span><br><br><span class="hljs-comment"># 开机启动 apache 服务</span><br>CMD [<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;service httpd start;bash&quot;</span>]<br><br></code></pre></td></tr></table></figure><h3 id="编辑wsgi配置文件-mod-wsgi-conf"><a href="#编辑wsgi配置文件-mod-wsgi-conf" class="headerlink" title="编辑wsgi配置文件 mod_wsgi.conf"></a>编辑wsgi配置文件 mod_wsgi.conf</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">LoadModule</span> wsgi_module <span class="hljs-string">&quot;/usr/lib64/httpd/modules/mod_wsgi-py26.so&quot;</span><br><span class="hljs-attribute">WSGIPythonHome</span> <span class="hljs-string">&quot;/usr&quot;</span><br></code></pre></td></tr></table></figure><h3 id="编辑httpd配置文件-PmsService-conf"><a href="#编辑httpd配置文件-PmsService-conf" class="headerlink" title="编辑httpd配置文件 PmsService.conf"></a>编辑httpd配置文件 PmsService.conf</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 主配置文件已经默认监听80端口，此处重复监听会报错</span><br><br><span class="hljs-comment"># 后端服务</span><br><span class="hljs-attribute">Listen</span> <span class="hljs-number">8007</span><br><span class="hljs-section">&lt;VirtualHost *<span class="hljs-number">:8007</span>&gt;</span><br>        <span class="hljs-attribute">WSGIScriptAlias</span> / <span class="hljs-string">&quot;var/www/html/PmsService/PmsService/wsgi.py&quot;</span><br>        <span class="hljs-attribute">ServerName</span> www.pmsservice.com<br>        <span class="hljs-attribute">Alias</span> /static /var/www/html/PmsService/static<br>        <span class="hljs-section">&lt;Directory <span class="hljs-string">&quot;/var/www/html/PmsService&quot;</span>&gt;</span><br>                <span class="hljs-attribute">Order</span> <span class="hljs-literal">Allow</span>,<span class="hljs-literal">Deny</span><br>                <span class="hljs-attribute">Allow</span> from <span class="hljs-literal">all</span><br>        <span class="hljs-section">&lt;/Directory&gt;</span><br><span class="hljs-section">&lt;/VirtualHost&gt;</span><br><br><span class="hljs-comment"># 前端服务</span><br><span class="hljs-section">&lt;VirtualHost *<span class="hljs-number">:80</span>&gt;</span><br>       <span class="hljs-attribute">DocumentRoot</span> /var/www/html/dist<br>       <span class="hljs-section">&lt;Directory  /var/www/html/dist&gt;</span><br>            <span class="hljs-attribute">Order</span> <span class="hljs-literal">Allow</span>,<span class="hljs-literal">Deny</span><br>            <span class="hljs-attribute">Allow</span> from <span class="hljs-literal">All</span><br>           <span class="hljs-section">&lt;/Directory&gt;</span><br><span class="hljs-section">&lt;/VirtualHost&gt;</span><br></code></pre></td></tr></table></figure><p>注意，Django项目的setting.py中连接数据库处要写成数据库容器名“db”</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><br>DATABASES = &#123;<br>    &#x27;default&#x27;: &#123;<br>        &#x27;ENGINE&#x27;: &#x27;django.db.backends.mysql&#x27;,<br>        &#x27;NAME&#x27;: &#x27;haerbinxi_users&#x27;,<br>        &#x27;USER&#x27;: &#x27;root&#x27;,<br>        &#x27;PASSWORD&#x27;: &#x27;keker@<span class="hljs-number">168168</span>&#x27;,<br>        &#x27;HOST&#x27;: &#x27;db&#x27;,   <span class="hljs-meta"># 此处与docker-compose.yml处一致，不可写成ip地址</span><br>        &#x27;PORT&#x27;: &#x27;<span class="hljs-number">3306</span>&#x27;,<br>    &#125;,<br></code></pre></td></tr></table></figure><h3 id="编写docker-compose-yml配置文件"><a href="#编写docker-compose-yml配置文件" class="headerlink" title="编写docker-compose.yml配置文件"></a>编写<strong>docker-compose.yml配置文件</strong></h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># docker-compose版本</span><br><span class="hljs-symbol">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-meta"># 服务</span><br><span class="hljs-symbol">services:</span><br><span class="hljs-symbol">  web:</span><br>    <span class="hljs-meta"># 构建镜像</span><br><span class="hljs-symbol">    build:</span> .<br>    <span class="hljs-meta"># 运行容器的名称</span><br><span class="hljs-symbol">    container_name:</span> webservice<br>    <span class="hljs-meta"># 允许后台运行</span><br><span class="hljs-symbol">    tty:</span> true<br>    <span class="hljs-meta"># 端口映射</span><br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-string">&quot;80:80&quot;</span><br>      - <span class="hljs-string">&quot;8007:8007&quot;</span><br>    <br>    <span class="hljs-meta"># 挂载卷 </span><br>    <span class="hljs-meta"># 项目文件和apache配置文件本地持久化挂载卷</span><br><span class="hljs-symbol">    volumes:</span><br>      - ~<span class="hljs-keyword">/docker/</span>work/html:<span class="hljs-keyword">/var/</span>www/html<br>      - ~<span class="hljs-keyword">/docker/</span>work/httpd:<span class="hljs-keyword">/etc/</span>httpd/conf.d<br><br>    <span class="hljs-meta"># 依赖db服务，先启动db再启动web</span><br><span class="hljs-symbol">    depends_on:</span><br>      - db<br>    <span class="hljs-meta"># 宕机即重启</span><br><span class="hljs-symbol">    restart:</span> always<br><br>    <span class="hljs-meta"># 连接数据库</span><br><span class="hljs-symbol">    links:</span><br>      - db<br><span class="hljs-symbol">  db:</span><br>    <span class="hljs-meta"># 拉取镜像</span><br><span class="hljs-symbol">    image:</span> mysql:<span class="hljs-number">5.7</span><br>    <span class="hljs-meta"># 运行容器的名称</span><br><span class="hljs-symbol">    container_name:</span> mysql<br><br>    <span class="hljs-meta"># 环境变量 数据库密码需要复杂密码，简单密码导致无法连接数据库（1045错误）</span><br><span class="hljs-symbol">    environment:</span><br>      - MYSQL_ROOT_PASSWORD=keker@<span class="hljs-number">168168</span><br>    <span class="hljs-meta"># 端口映射</span><br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-string">&quot;3306:3306&quot;</span><br>    <span class="hljs-meta"># 宕机即重启</span><br><span class="hljs-symbol">    restart:</span> always<br><br>    <span class="hljs-meta"># 挂载卷</span><br><span class="hljs-symbol">    volumes:</span><br>      <span class="hljs-meta"># 数据库本地持久化挂载卷</span><br>      - ~<span class="hljs-keyword">/docker/</span>work/mysql:<span class="hljs-keyword">/var/</span>lib/mysql<br>    <br></code></pre></td></tr></table></figure><h3 id="在docker-compose所在目录docker-x2F-构建、启动项目"><a href="#在docker-compose所在目录docker-x2F-构建、启动项目" class="headerlink" title="在docker-compose所在目录docker&#x2F; 构建、启动项目"></a>在docker-compose所在目录docker&#x2F; 构建、启动项目</h3><h4 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose build</span><br><br></code></pre></td></tr></table></figure><h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose up -d</span><br><br></code></pre></td></tr></table></figure><h4 id="使用Navicat-导入项目数据库后就可以在浏览器访问web网页了"><a href="#使用Navicat-导入项目数据库后就可以在浏览器访问web网页了" class="headerlink" title="使用Navicat 导入项目数据库后就可以在浏览器访问web网页了"></a>使用Navicat 导入项目数据库后就可以在浏览器访问web网页了</h4><h4 id="关闭项目"><a href="#关闭项目" class="headerlink" title="关闭项目"></a>关闭项目</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose down</span><br><br></code></pre></td></tr></table></figure><h3 id="项目打包迁移部署"><a href="#项目打包迁移部署" class="headerlink" title="项目打包迁移部署"></a>项目打包迁移部署</h3><h4 id="保存镜像到tar文件"><a href="#保存镜像到tar文件" class="headerlink" title="保存镜像到tar文件"></a>保存镜像到tar文件</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> save docker_web &gt; docker_web.tar<br><span class="hljs-attribute">docker</span> save mysql:<span class="hljs-number">5</span>.<span class="hljs-number">7</span> &gt; mysql:<span class="hljs-number">5</span>.<span class="hljs-number">7</span>.tar<br><br></code></pre></td></tr></table></figure><p>在目标目标主机安装好docker以及compose<br>把打包好的镜像拷贝到目标主机用户目录下，减压本地镜像包</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> load &lt; docker_web.tar<br><span class="hljs-attribute">docker</span> load &lt; mysql:<span class="hljs-number">5</span>.<span class="hljs-number">7</span>.tar<br><br></code></pre></td></tr></table></figure><h4 id="目标主机启动项目"><a href="#目标主机启动项目" class="headerlink" title="目标主机启动项目"></a>目标主机启动项目</h4><p>将打包好的docker文件夹拷贝到目标主机的用户目录下<br>windows下需要修改docker-compose挂载卷的本地目录<br>在docker文件夹下使用下面命令启动项目</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose up -d</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自动化运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker实战-构建Apache+wsgi+Django镜像</title>
    <link href="/2019/09/15/tools/docker/Docker%E5%AE%9E%E6%88%98-Apache-wsgi-Django%E9%95%9C%E5%83%8F/"/>
    <url>/2019/09/15/tools/docker/Docker%E5%AE%9E%E6%88%98-Apache-wsgi-Django%E9%95%9C%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="使用commit构建Apache-wsgi-Django镜像"><a href="#使用commit构建Apache-wsgi-Django镜像" class="headerlink" title="使用commit构建Apache+wsgi+Django镜像"></a>使用commit构建Apache+wsgi+Django镜像</h2><p>**docker commit :**从容器创建一个新的镜像</p><span id="more"></span><h3 id="运行一个基础镜像"><a href="#运行一个基础镜像" class="headerlink" title="运行一个基础镜像"></a>运行一个基础镜像</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -dit centos:<span class="hljs-number">6</span>.<span class="hljs-number">8</span> bash<br></code></pre></td></tr></table></figure><ul><li><strong>-d:</strong> 后台运行容器，并返回容器ID；</li><li><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</li><li><strong>-P:</strong> 随机端口映射，容器内部端口<strong>随机</strong>映射到主机的高端口</li><li><strong>-p:</strong> 指定端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></li><li><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li><li><strong>docker exec ：</strong>在运行的容器中执行命令</li></ul><p>通过 <strong>docker ps -a</strong> 命令查看已经在运行的容器，然后使用容器 ID在容器中开启一个交互模式的终端</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker exec -it <span class="hljs-number">7</span>ef9388bbf2b <span class="hljs-regexp">/bin/</span>bash<br></code></pre></td></tr></table></figure><p><strong>交互模式进入容器：</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker <span class="hljs-built_in">run</span> -<span class="hljs-keyword">it</span> 镜像名 bash<br>docker exec -<span class="hljs-keyword">it</span> 容器<span class="hljs-built_in">id</span> bash<br></code></pre></td></tr></table></figure><hr><h3 id="安装需要的软件包以及模块"><a href="#安装需要的软件包以及模块" class="headerlink" title="安装需要的软件包以及模块"></a>安装需要的软件包以及模块</h3><h4 id="安装pip源"><a href="#安装pip源" class="headerlink" title="安装pip源"></a><strong>安装pip源</strong></h4><p>yum updata</p><p>yum -y install epel-release</p><p>编辑文件的每一个[epel]的第三行去掉注释，第四行注释掉，完成效果如下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/yum</span>.repos.d/epel.repo <br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[epel]</span><br><span class="hljs-attr">name</span>=Extra Packages for Enterprise Linux <span class="hljs-number">6</span> - <span class="hljs-variable">$basearch</span><br><span class="hljs-attr">baseurl</span>=http://download.fedoraproject.org/pub/epel/<span class="hljs-number">6</span>/<span class="hljs-variable">$basearch</span><br><span class="hljs-comment">#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-6&amp;arch=$basearch</span><br><span class="hljs-attr">failovermethod</span>=priority<br><span class="hljs-attr">enabled</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">gpgkey</span>=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><hr><h4 id="安装环境软件"><a href="#安装环境软件" class="headerlink" title="安装环境软件"></a><strong>安装环境软件</strong></h4><p>yum –enablerepo&#x3D;epel install -y python-pip</p><p>pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a> django&#x3D;&#x3D;1.6.2</p><p>pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a> djangorestframework&#x3D;&#x3D;2.3.14</p><p>yum install -y gcc libffi-devel python-devel openssl-devel</p><p>yum install -y mysql-devel python-devel python-setuptools </p><p>pip install MySQL-python</p><hr><h4 id="安装apache"><a href="#安装apache" class="headerlink" title="安装apache"></a><strong>安装apache</strong></h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">yum -y install httpd*  <span class="hljs-comment">--安装apache</span><br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">rpm -<span class="hljs-keyword">qa</span> | <span class="hljs-keyword">grep</span> httpd     --查看安装的http包<br></code></pre></td></tr></table></figure><p>查看apache是否启动</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-number">1</span>.查看端口<br><br>首先要知道apache的端口，比如说<span class="hljs-number">80</span>端口；<br>查看端口是否被开启和监听<br>netstat -<span class="hljs-keyword">an</span> | <span class="hljs-keyword">grep</span> :<span class="hljs-number">80</span><br><br><span class="hljs-number">2</span>.查看进程<br><span class="hljs-keyword">ps</span> -ef |<span class="hljs-keyword">grep</span> httpd<br><span class="hljs-keyword">ps</span> -aux | <span class="hljs-keyword">grep</span> httpd<br>如果看到许多（一般是<span class="hljs-number">4</span>到<span class="hljs-number">5</span>个）输出就说明对了。<br></code></pre></td></tr></table></figure><p>启动Apache网站检查</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">service httpd <span class="hljs-built_in">start</span>            <span class="hljs-comment">--启动Apache网站  </span><br>service httpd <span class="hljs-built_in">stop</span>             <span class="hljs-comment">--停止Apache网站  </span><br>service httpd restart          <span class="hljs-comment">--重启Apache网站</span><br></code></pre></td></tr></table></figure><hr><h4 id="安装python2-7的mod-wsgi"><a href="#安装python2-7的mod-wsgi" class="headerlink" title="安装python2.7的mod_wsgi"></a><strong>安装python2.7的mod_wsgi</strong></h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> mod_wsgi<br></code></pre></td></tr></table></figure><p>配置apache加载wsgi模块</p><p>使用<em>mod_wsgi-express install-module</em>查询mod_wsgi.so的路径，输出如下:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@95d28530ae06</span> conf.d]<span class="hljs-meta"># mod_wsgi-express install-module</span><br>LoadModule wsgi_module <span class="hljs-string">&quot;/usr/lib64/httpd/modules/mod_wsgi-py26.so&quot;</span><br>WSGIPythonHome <span class="hljs-string">&quot;/usr&quot;</span><br></code></pre></td></tr></table></figure><p>在Apache模块配置目录&#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;创建一个mod_wsgi.conf配置文件，加入上面的内容</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vi</span> mod_wsgi.<span class="hljs-keyword">conf</span><br><br>LoadModule wsgi_module <span class="hljs-string">&quot;/usr/lib64/httpd/modules/mod_wsgi-py26.so&quot;</span><br>WSGIPythonHome <span class="hljs-string">&quot;/usr&quot;</span><br></code></pre></td></tr></table></figure><p>重启Apache服务</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service httpd restart</span> <br></code></pre></td></tr></table></figure><hr><h4 id="设置开机启动Apache"><a href="#设置开机启动Apache" class="headerlink" title="设置开机启动Apache"></a><strong>设置开机启动Apache</strong></h4><p>先用查询apache和mysql服务是否存在，不存在则需要手动添加</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">chkconfig <span class="hljs-comment">--list</span><br></code></pre></td></tr></table></figure><p>设置httpd 在运行级别为2、3、4、5情况都为开启状态</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chkconfig</span> --level <span class="hljs-number">2345</span> httpd <span class="hljs-literal">on</span><br></code></pre></td></tr></table></figure><p>重启Apache服务</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service httpd restart</span> <br></code></pre></td></tr></table></figure><hr><h3 id="生成新镜像"><a href="#生成新镜像" class="headerlink" title="生成新镜像"></a>生成新镜像</h3><p>本地需要的程序都准备完成后使用commit生成新的镜像</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> commit -m <span class="hljs-string">&quot;Apache/2.2.15-mod_wsgi-py26-Django1.6.2&quot;</span> -a li <span class="hljs-number">95</span>d28530ae06 centos/apache-wsgi-django:<span class="hljs-number">1</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>**docker commit :**从容器创建一个新的镜像。</p><p>语法 docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</p><p>OPTIONS说明：</p><ul><li>**-a :**提交的镜像作者；</li><li>**-c :**使用Dockerfile指令来创建镜像；</li><li>**-m :**提交时的说明文字；</li><li>**-p :**在commit时，将容器暂停。</li></ul><hr><h3 id="docker-save-将指定镜像保存成-tar-归档文件。"><a href="#docker-save-将指定镜像保存成-tar-归档文件。" class="headerlink" title="docker save : 将指定镜像保存成 tar 归档文件。"></a><strong>docker save : 将指定镜像保存成 tar 归档文件。</strong></h3><p>将镜像 centos&#x2F;apache-wsgi-django:1.0 生成 centos&#x2F;apache-wsgi-django.tar 文档</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> save -o centos/apache-wsgi-django.tar centos/apache-wsgi-django:<span class="hljs-number">1</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>语法：docker save [OPTIONS] IMAGE [IMAGE…]</p><p>OPTIONS 说明：</p><ul><li>**-o :**输出到的文件。</li></ul><hr><h3 id="将项目文件导入容器并赋予执行权限（可选部分）"><a href="#将项目文件导入容器并赋予执行权限（可选部分）" class="headerlink" title="将项目文件导入容器并赋予执行权限（可选部分）"></a><strong>将项目文件导入容器并赋予执行权限</strong>（可选部分）</h3><p>为方便批量部署可以把项目文件导入容器，然后再构建镜像。优点：方便批量部署。缺点：项目环境不可重复使用</p><p>将主机的项目文件目录拷贝到容器目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker cp .<span class="hljs-regexp">/ 95d28530ae06:/</span>var<span class="hljs-regexp">/www/</span>html<br>docker cp .<span class="hljs-regexp">/testprj.conf 95d28530ae06:/</span>etc<span class="hljs-regexp">/httpd/</span>conf.d<br></code></pre></td></tr></table></figure><p>赋予权限：执行某个容器的某条命令，但又不想进入容器内，编写脚本文件</p><p>vi start.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>DOCKER_ID=95d28530ae06<br>sudo docker <span class="hljs-built_in">exec</span> -it <span class="hljs-variable">$DOCKER_ID</span> /bin/bash -c <span class="hljs-string">&#x27;chcon -R -t httpd_user_content_t /var/www/html &amp;&amp; chmod -R 777 /var/www/html &amp;&amp; service httpd restart&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自动化运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker实战-安装卸载</title>
    <link href="/2019/09/15/tools/docker/Docker%E5%AE%9E%E6%88%98-%E5%AE%89%E8%A3%85%E5%8D%B8%E8%BD%BD/"/>
    <url>/2019/09/15/tools/docker/Docker%E5%AE%9E%E6%88%98-%E5%AE%89%E8%A3%85%E5%8D%B8%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="获取Docker引擎-CentOS社区"><a href="#获取Docker引擎-CentOS社区" class="headerlink" title="获取Docker引擎 - CentOS社区"></a>获取Docker引擎 - CentOS社区</h1><p>要开始使用CentOS上的Docker Engine - 社区，请确保 <a href="https://docs.docker.com/install/linux/docker-ce/centos/#prerequisites">满足先决条件</a>，然后 <a href="https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce">安装Docker</a>。</p><p>Docker Engine - 发行版的社区二进制文件可从<a href="https://download.docker.com/">download.docker.com</a>获得</p><span id="more"></span><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><h3 id="OS要求"><a href="#OS要求" class="headerlink" title="OS要求"></a>OS要求</h3><p>要安装Docker Engine - Community，您需要CentOS 7的维护版本。不支持或测试存档版本。</p><p>该<code>centos-extras</code>库必须启用。默认情况下，此存储库已启用，但如果已将其禁用，则需要 <a href="https://wiki.centos.org/AdditionalResources/Repositories">重新启用它</a>。</p><p><code>overlay2</code>建议使用存储驱动程序。</p><h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><p>较旧版本的Docker被称为<code>docker</code>或<code>docker-engine</code>。如果已安装这些，请卸载它们以及相关的依赖项。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">$ sudo yum remove docker <span class="hljs-string">\</span><br>                  docker-client <span class="hljs-string">\</span><br>                  docker-client-latest <span class="hljs-string">\</span><br>                  docker-common <span class="hljs-string">\</span><br>                  docker-latest <span class="hljs-string">\</span><br>                  docker-latest-logrotate <span class="hljs-string">\</span><br>                  docker-logrotate <span class="hljs-string">\</span><br>                  docker-engine<br></code></pre></td></tr></table></figure><p>如果<code>yum</code>报告没有安装这些软件包，则可以。</p><p><code>/var/lib/docker/</code>保留包括图像，容器，卷和网络在内的内容。Docker Engine - 社区包现在被调用<code>docker-ce</code>。</p><h2 id="安装Docker-Engine-社区"><a href="#安装Docker-Engine-社区" class="headerlink" title="安装Docker Engine - 社区"></a>安装Docker Engine - 社区</h2><p>您可以根据需要以不同方式安装Docker Engine - 社区：</p><ul><li>大多数用户 <a href="https://docs.docker.com/install/linux/docker-ce/centos/#install-using-the-repository">设置Docker的存储库</a>并从中进行安装，以便于安装和升级任务。这是推荐的方法。</li><li>有些用户下载RPM软件包并 <a href="https://docs.docker.com/install/linux/docker-ce/centos/#install-from-a-package">手动安装</a>并完全手动管理升级。这在诸如在没有访问互联网的气隙系统上安装Docker的情况下非常有用。</li><li>在测试和开发环境中，一些用户选择使用自动 <a href="https://docs.docker.com/install/linux/docker-ce/centos/#install-using-the-convenience-script">便捷脚本</a>来安装Docker。</li></ul><h3 id="使用存储库安装"><a href="#使用存储库安装" class="headerlink" title="使用存储库安装"></a>使用存储库安装</h3><p>在新主机上首次安装Docker Engine - Community之前，需要设置Docker存储库。之后，您可以从存储库安装和更新Docker。</p><h4 id="设置存储库"><a href="#设置存储库" class="headerlink" title="设置存储库"></a>设置存储库</h4><ol><li><p>安装所需的包。<code>yum-utils</code>提供了<code>yum-config-manager</code> 效用，并<code>device-mapper-persistent-data</code>和<code>lvm2</code>由需要 <code>devicemapper</code>存储驱动程序。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haskell">$ sudo yum install -y yum-utils \<br>  device-mapper-persistent-<span class="hljs-class"><span class="hljs-keyword">data</span> \</span><br>  lvm2<br></code></pre></td></tr></table></figure></li><li><p>使用以下命令设置<strong>稳定</strong>存储库。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ sudo yum-config-manager \<br>    --add-repo \<br>    https:<span class="hljs-regexp">//</span>download.docker.com<span class="hljs-regexp">/linux/</span>centos/docker-ce.repo<br></code></pre></td></tr></table></figure></li></ol><h4 id="安装DOCKER-ENGINE-社区"><a href="#安装DOCKER-ENGINE-社区" class="headerlink" title="安装DOCKER ENGINE - 社区"></a>安装DOCKER ENGINE - 社区</h4><ol><li><p>安装<em>最新版本</em>的Docker Engine - 社区和容器，或者转到下一步安装特定版本：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ sudo yum install docker-<span class="hljs-keyword">ce</span> docker-<span class="hljs-keyword">ce</span>-cli containerd.io<br></code></pre></td></tr></table></figure><p>如果提示接受GPG密钥，请验证指纹是否匹配<code>060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35</code>，如果匹配，则接受该指纹 。</p><blockquote><p>有多个Docker存储库？</p><p>如果您启用了多个Docker存储库，则在未指定<code>yum install</code>或 <code>yum update</code>命令中的版本的情况下安装或更新始终会安装尽可能高的版本，这可能不适合您的稳定性需求。</p></blockquote><p>Docker已安装但尚未启动。该<code>docker</code>组已创建，但没有用户添加到该组。</p></li><li><p>要安装<em>特定版本</em>的Docker Engine - Community，请列出repo中的可用版本，然后选择并安装：</p><p>一个。列出并对您的仓库中可用的版本进行排序。此示例按版本号对结果进行排序，从最高到最低，并被截断：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ yum <span class="hljs-keyword">list</span> docker-<span class="hljs-keyword">ce</span> --showduplicates | <span class="hljs-keyword">sort</span> -r<br><br>docker-<span class="hljs-keyword">ce</span>.x86_64  <span class="hljs-number">3</span>:<span class="hljs-number">18.09</span>.<span class="hljs-number">1</span>-<span class="hljs-number">3</span>.el7                     docker-<span class="hljs-keyword">ce</span>-stable<br>docker-<span class="hljs-keyword">ce</span>.x86_64  <span class="hljs-number">3</span>:<span class="hljs-number">18.09</span>.<span class="hljs-number">0</span>-<span class="hljs-number">3</span>.el7                     docker-<span class="hljs-keyword">ce</span>-stable<br>docker-<span class="hljs-keyword">ce</span>.x86_64  <span class="hljs-number">18.06</span>.<span class="hljs-number">1</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">3</span>.el7                    docker-<span class="hljs-keyword">ce</span>-stable<br>docker-<span class="hljs-keyword">ce</span>.x86_64  <span class="hljs-number">18.06</span>.<span class="hljs-number">0</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">3</span>.el7                    docker-<span class="hljs-keyword">ce</span>-stable<br></code></pre></td></tr></table></figure><p>返回的列表取决于启用的存储库，并且特定于您的CentOS版本（<code>.el7</code>在此示例中以后缀表示）。</p><p>湾 通过其完全限定的包名称安装特定版本，包名称（<code>docker-ce</code>）加上从第一个冒号（<code>:</code>）开始的版本字符串（第2列），直到第一个连字符，用连字符（<code>-</code>）分隔。例如，<code>docker-ce-18.09.1</code>。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ sudo yum install docker-<span class="hljs-keyword">ce</span>-<span class="hljs-symbol">&lt;VERSION_STRING&gt;</span> docker-<span class="hljs-keyword">ce</span>-cli-<span class="hljs-symbol">&lt;VERSION_STRING&gt;</span> containerd.io<br></code></pre></td></tr></table></figure><p>Docker已安装但尚未启动。该<code>docker</code>组已创建，但没有用户添加到该组。</p></li><li><p>启动Docker。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> sudo systemctl <span class="hljs-built_in">start</span> docker<br></code></pre></td></tr></table></figure></li><li><p>通过运行<code>hello-world</code> 映像验证是否正确安装了Docker Engine - 社区。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo docker <span class="hljs-built_in">run</span> hello-world<br></code></pre></td></tr></table></figure><p>此命令下载测试映像并在容器中运行它。当容器运行时，它会打印一条信息性消息并退出。</p></li></ol><h2 id="以非root用户身份管理Docker"><a href="#以非root用户身份管理Docker" class="headerlink" title="以非root用户身份管理Docker"></a>以非root用户身份管理Docker</h2><p>Docker守护程序绑定到Unix套接字而不是TCP端口。默认情况下，Unix套接字由用户拥有<code>root</code>，其他用户只能使用它<code>sudo</code>。Docker守护程序始终以<code>root</code>用户身份运行。</p><p>如果您不想在<code>docker</code>命令前加上<code>sudo</code>，请创建一个名为的Unix组<code>docker</code>并向其添加用户。当Docker守护程序启动时，它会创建一个可由该<code>docker</code>组成员访问的Unix套接字。</p><blockquote><p>警告</p><p>该<code>docker</code>组授予与<code>root</code> 用户等效的权限。有关如何影响系统安全性的详细信息，请参阅 <a href="https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface"><em>Docker Daemon Attack Surface</em></a>。</p></blockquote><p>要创建<code>docker</code>组并添加您的用户：</p><ol><li><p>创建<code>docker</code>组。</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>sudo groupadd docker<br></code></pre></td></tr></table></figure></li><li><p>将您的用户添加到该<code>docker</code>组。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>sudo usermod -aG docker <span class="hljs-variable">$USER</span><br></code></pre></td></tr></table></figure></li><li><p>注销并重新登录，以便重新评估您的组成员身份。</p><p>如果在虚拟机上进行测试，则可能需要重新启动虚拟机才能使更改生效。</p><p>在桌面Linux环境（如X Windows）上，完全注销会话，然后重新登录。</p><p>在Linux上，您还可以运行以下命令来激活对组的更改：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">$ <span class="hljs-keyword">new</span><span class="hljs-type">grp</span> docker <br></code></pre></td></tr></table></figure></li><li><p>验证您是否可以运行<code>docker</code>命令<code>sudo</code>。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ docker <span class="hljs-built_in">run</span> hello-world<br></code></pre></td></tr></table></figure><p>此命令下载测试映像并在容器中运行它。当容器运行时，它会打印一条信息性消息并退出。</p><p>如果<code>sudo</code>在将用户添加到<code>docker</code>组之前最初使用Docker CLI命令，则可能会看到以下错误，表明您的<code>~/.docker/</code>目录由于<code>sudo</code>命令而创建的权限不正确。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs none">WARNING: Error loading config file: /home/user/.docker/config.json -<br>stat /home/user/.docker/config.json: permission denied<br></code></pre></td></tr></table></figure><p>要解决此问题，请删除<code>~/.docker/</code>目录（它会自动重新创建，但任何自定义设置都会丢失），或使用以下命令更改其所有权和权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">chown</span> <span class="hljs-string">&quot;<span class="hljs-variable">$USER</span>&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$USER</span>&quot;</span> /home/<span class="hljs-string">&quot;<span class="hljs-variable">$USER</span>&quot;</span>/.docker -R</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">chmod</span> g+rwx <span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/.docker&quot;</span> -R</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="配置Docker以在启动时启动"><a href="#配置Docker以在启动时启动" class="headerlink" title="配置Docker以在启动时启动"></a>配置Docker以在启动时启动</h2><p>大多数当前的Linux发行版（RHEL，CentOS，Fedora，Ubuntu 16.04及更高版本）用于<a href="https://docs.docker.com/install/linux/linux-postinstall/#systemd"><code>systemd</code></a>管理系统启动时启动的服务。Ubuntu 14.10及以下使用<a href="https://docs.docker.com/install/linux/linux-postinstall/#upstart"><code>upstart</code></a>。</p><h3 id="systemd"><a href="#systemd" class="headerlink" title="systemd"></a><code>systemd</code></h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure><p>要禁用此行为，请<code>disable</code>改用。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo systemctl <span class="hljs-built_in">disable</span> docker<br></code></pre></td></tr></table></figure><h3 id="在Linux系统上安装Compose"><a href="#在Linux系统上安装Compose" class="headerlink" title="在Linux系统上安装Compose"></a>在Linux系统上安装Compose</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot;</span> -o <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br>sudo chmod +x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br></code></pre></td></tr></table></figure><h3 id="配置阿里镜像源"><a href="#配置阿里镜像源" class="headerlink" title="配置阿里镜像源"></a>配置阿里镜像源</h3><p>由于国内访问hub.docker.com速度慢，建议到阿里云申请镜像加速地址。</p><h2 id="卸载Docker-Engine-社区"><a href="#卸载Docker-Engine-社区" class="headerlink" title="卸载Docker Engine - 社区"></a>卸载Docker Engine - 社区</h2><ol><li><p>卸载Docker包：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo yum <span class="hljs-built_in">remove</span> docker-ce<br></code></pre></td></tr></table></figure></li><li><p>主机上的图像，容器，卷或自定义配置文件不会自动删除。要删除所有图像，容器和卷：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">rm</span> -rf /var/lib/docker</span><br></code></pre></td></tr></table></figure></li></ol><p>您必须手动删除任何已编辑的配置文件。</p>]]></content>
    
    
    <categories>
      
      <category>自动化运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker基础学习笔记3</title>
    <link href="/2019/09/13/tools/docker/Docker%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/"/>
    <url>/2019/09/13/tools/docker/Docker%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</url>
    
    <content type="html"><![CDATA[<h2 id="关于服务"><a href="#关于服务" class="headerlink" title="关于服务"></a>关于服务</h2><p>在分布式应用程序中，应用程序的不同部分称为“服务”。例如，如果您想象一个视频共享站点，它可能包括一个用于在数据库中存储应用程序数据的服务，一个用户在上传内容后在后台进行视频转码的服务，一个用于前端的服务，等等。</p><p>服务实际上只是“生产中的容器”。服务只运行一个映像，但它编码图像的运行方式 - 它应该使用哪些端口，应该运行多少个容器副本，以便服务具有所需的容量，以及等等。扩展服务会更改运行该软件的容器实例的数量，从而为流程中的服务分配更多计算资源。</p><p>幸运的是，使用Docker平台定义，运行和扩展服务非常容易 - 只需编写一个<code>docker-compose.yml</code>文件即可。</p><span id="more"></span><h2 id="你的第一个docker-compose-yml档案"><a href="#你的第一个docker-compose-yml档案" class="headerlink" title="你的第一个docker-compose.yml档案"></a>你的第一个<code>docker-compose.yml</code>档案</h2><p>一个<code>docker-compose.yml</code>文件是一个YAML文件，它定义了如何Docker容器在生产中应表现。</p><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a><code>docker-compose.yml</code></h3><p>将此文件保存为<code>docker-compose.yml</code>您想要的任何位置。确保已将 <a href="https://docs.docker.com/get-started/part2/">第2部分中</a>创建<a href="https://docs.docker.com/get-started/part2/#share-your-image">的图像推</a>送到注册表，并通过替换 图像详细信息进行更新。<code>.yml``username/repo:tag</code></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-symbol">services:</span><br><span class="hljs-symbol">  web:</span><br>    <span class="hljs-meta"># replace username/repo:tag with your name and image details</span><br><span class="hljs-symbol">    image:</span> username/repo:tag<br><span class="hljs-symbol">    deploy:</span><br><span class="hljs-symbol">      replicas:</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">      resources:</span><br><span class="hljs-symbol">        limits:</span><br><span class="hljs-symbol">          cpus:</span> <span class="hljs-string">&quot;0.1&quot;</span><br><span class="hljs-symbol">          memory:</span> <span class="hljs-number">50</span>M<br><span class="hljs-symbol">      restart_policy:</span><br><span class="hljs-symbol">        condition:</span> on-failure<br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-string">&quot;4000:80&quot;</span><br><span class="hljs-symbol">    networks:</span><br>      - webnet<br><span class="hljs-symbol">networks:</span><br><span class="hljs-symbol">  webnet:</span><br></code></pre></td></tr></table></figure><p>该<code>docker-compose.yml</code>文件告诉Docker执行以下操作：</p><ul><li>拉<a href="https://docs.docker.com/get-started/part2/">我们在步骤2中上传的图像</a>从注册表。</li><li>将该映像的5个实例作为一个被调用的服务运行<code>web</code>，限制每个实例使用，最多只占单个CPU核心时间的10％（这也可以是例如“1.5”表示每个核心的1和半核心），以及50MB RAM。</li><li>如果一个失败，立即重启容器。</li><li>将主机上的端口4000映射到<code>web</code>端口80。</li><li>指示<code>web</code>容器通过称为负载平衡的网络共享端口80 <code>webnet</code>。（在内部，容器本身<code>web</code>在短暂的端口发布到 80端口。）</li><li><code>webnet</code>使用默认设置（负载平衡的覆盖网络）定义网络。</li></ul><h2 id="运行新的负载均衡应用"><a href="#运行新的负载均衡应用" class="headerlink" title="运行新的负载均衡应用"></a>运行新的负载均衡应用</h2><p>在我们<code>docker stack deploy</code>首先运行命令之前：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">docker swarm <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：我们在<a href="https://docs.docker.com/get-started/part4/">第4部分中介绍</a>了该命令的含义。如果您没有运行，<code>docker swarm init</code>则会收到“此节点不是群集管理器”的错误。</p></blockquote><p>现在让我们来运行吧。您需要为您的应用程序命名。在这里，它被设置为 <code>getstartedlab</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">docker stack deploy -c docker-compose.yml getstartedlab<br></code></pre></td></tr></table></figure><p>我们的单个服务堆栈在一台主机上运行已部署映像的5个容器实例。我们来调查吧。</p><p>在我们的应用程序中获取一项服务的服务ID：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker service <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p>查找服务的输出，并<code>web</code>以您的应用名称为前缀。如果您将其命名为与此示例中显示的相同，则名称为 <code>getstartedlab_web</code>。还列出了服务ID，以及副本数，映像名称和公开端口。</p><p>或者，您可以运行<code>docker stack services</code>，然后运行堆栈的名称。以下示例命令允许您查看与<code>getstartedlab</code>堆栈关联的所有服务 ：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> stack services getstartedlab<br><span class="hljs-attribute">ID</span>                  NAME                MODE                REPLICAS            IMAGE               PORTS<br><span class="hljs-attribute">bqpve1djnk0x</span>        getstartedlab_web   replicated          <span class="hljs-number">5</span>/<span class="hljs-number">5</span>                 username/repo:tag   *:<span class="hljs-number">4000</span>-&gt;<span class="hljs-number">80</span>/tcp<br></code></pre></td></tr></table></figure><p>在服务中运行的单个容器称为<strong>任务</strong>。任务被赋予以数字递增的唯一ID，最多为<code>replicas</code>您定义 的数量<code>docker-compose.yml</code>。列出您的服务任务：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker service ps getstartedlab_web</span><br></code></pre></td></tr></table></figure><p>如果您只列出系统上的所有容器，则任务也会显示，但不会被服务过滤：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">docker <span class="hljs-keyword">container</span> <span class="hljs-keyword">ls</span> -q<br></code></pre></td></tr></table></figure><p>您可以<code>curl -4 http://localhost:4000</code>连续多次运行，或者在浏览器中转到该URL并点击刷新几次。</p><p><img src="https://docs.docker.com/get-started/images/app80-in-browser.png" alt="浏览器中的Hello World"></p><p>无论哪种方式，容器ID都会发生变化，从而证明负载均衡; 对于每个请求，以循环方式选择5个任务中的一个来响应。容器ID与上一个命令（<code>docker container ls -q</code>）的输出匹配。</p><p>要查看堆栈的所有任务，您可以运行<code>docker stack ps</code>您的应用程序名称，如以下示例所示：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker stack ps getstartedlab<br>ID                  NAME                  IMAGE               <span class="hljs-keyword">NODE</span>                <span class="hljs-title">DESIRED</span> STATE       CURRENT STATE           ERROR               PORTS<br>uwiaw67sc0eh        getstartedlab_web.<span class="hljs-number">1</span>   username/repo:<span class="hljs-keyword">tag</span>   <span class="hljs-title">docker-desktop</span>      Running             Running <span class="hljs-number">9</span> minutes ago                       <br>sk50xbhmcae7        getstartedlab_web.<span class="hljs-number">2</span>   username/repo:<span class="hljs-keyword">tag</span>   <span class="hljs-title">docker-desktop</span>      Running             Running <span class="hljs-number">9</span> minutes ago                       <br>c4uuw5i6h02j        getstartedlab_web.<span class="hljs-number">3</span>   username/repo:<span class="hljs-keyword">tag</span>   <span class="hljs-title">docker-desktop</span>      Running             Running <span class="hljs-number">9</span> minutes ago                       <br><span class="hljs-number">0</span>dyb70ixu25s        getstartedlab_web.<span class="hljs-number">4</span>   username/repo:<span class="hljs-keyword">tag</span>   <span class="hljs-title">docker-desktop</span>      Running             Running <span class="hljs-number">9</span> minutes ago                       <br>aocrb88ap8b0        getstartedlab_web.<span class="hljs-number">5</span>   username/repo:<span class="hljs-keyword">tag</span>   <span class="hljs-title">docker-desktop</span>      Running             Running <span class="hljs-number">9</span> minutes ago<br></code></pre></td></tr></table></figure><blockquote><p>运行Windows 10？</p><p>Windows 10 PowerShell应该已经<code>curl</code>可用，但如果没有，你可以获得像<a href="https://git-for-windows.github.io/">Git BASH</a>这样的Linux终端模拟器 ，或者下载 <a href="http://gnuwin32.sourceforge.net/packages/wget.htm">与Windows</a> 非常相似的<a href="http://gnuwin32.sourceforge.net/packages/wget.htm">wget</a>。</p></blockquote><blockquote><p>响应时间慢？</p><p>根据您环境的网络配置，容器最多可能需要30秒才能响应HTTP请求。这并不表示Docker或swarm性能，而是我们在本教程后面讨论的未满足的Redis依赖性。目前，访客柜台因同样的原因不起作用; 我们还没有添加服务来保存数据。</p></blockquote><h2 id="扩展应用程序"><a href="#扩展应用程序" class="headerlink" title="扩展应用程序"></a>扩展应用程序</h2><p>您可以通过更改<code>replicas</code>值<code>docker-compose.yml</code>，保存更改并重新运行<code>docker stack deploy</code>命令来扩展应用程序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">docker stack deploy -c docker-compose.yml getstartedlab<br></code></pre></td></tr></table></figure><p>Docker执行就地更新，无需首先拆除堆栈或杀死任何容器。</p><p>现在，重新运行<code>docker container ls -q</code>以查看已重新配置的已部署实例。如果放大副本，则会启动更多任务，从而启动更多容器。</p><h3 id="取下应用程序和群"><a href="#取下应用程序和群" class="headerlink" title="取下应用程序和群"></a>取下应用程序和群</h3><ul><li><p>将应用程序关闭<code>docker stack rm</code>：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">docker <span class="hljs-keyword">stack</span> <span class="hljs-keyword">rm</span> getstartedlab<br></code></pre></td></tr></table></figure></li><li><p>取下群。</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">docker swarm <span class="hljs-literal">leave</span> --<span class="hljs-literal">force</span><br></code></pre></td></tr></table></figure></li></ul><p>使用Docker站起来扩展您的应用程序就像这一样简单。您已经朝着学习如何在生产中运行容器迈出了一大步。接下来，您将学习如何在Docker机器群集上运行此应用程序作为真正的群体。</p><blockquote><p><strong>注意</strong>：像这样的撰写文件用于使用Docker定义应用程序，可以使用<a href="https://docs.docker.com/docker-cloud/">Docker Cloud</a>或使用<a href="https://www.docker.com/enterprise-edition">Docker Enterprise Edition</a>选择的任何硬件或云提供程序 上载到云提供程序</p></blockquote><p>回顾一下，虽然键入<code>docker run</code>很简单，但生产中容器的真正实现是将其作为服务运行。服务在Compose文件中编码容器的行为，此文件可用于扩展，限制和重新部署我们的应用程序。服务的更改可以在运行时使用启动服务的相同命令来应用： <code>docker stack deploy</code>。</p><p>在此阶段要探索的一些命令：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment"># 列出堆栈或应用程序</span><br>docker stack ls                                            <span class="hljs-comment"># List stacks or apps</span><br><br><span class="hljs-comment"># 运行指定的Compose文件</span><br>docker stack deploy -c <span class="hljs-variable">&lt;composefile&gt;</span> <span class="hljs-variable">&lt;appname&gt;</span>  <span class="hljs-comment"># Run the specified Compose file</span><br><br><span class="hljs-comment"># 列出与应用程序关联的运行服务</span><br>docker service ls                 <span class="hljs-comment"># List running services associated with an app</span><br><br><span class="hljs-comment"># 列出与应用关联的任务</span><br>docker service ps <span class="hljs-variable">&lt;service&gt;</span>                  <span class="hljs-comment"># List tasks associated with an app</span><br><br><span class="hljs-comment"># 检查任务或容器</span><br>docker inspect <span class="hljs-variable">&lt;task or container&gt;</span>                   <span class="hljs-comment"># Inspect task or container</span><br><br><span class="hljs-comment"># 列出容器ID</span><br>docker container ls -q                                      <span class="hljs-comment"># List container IDs</span><br><br><span class="hljs-comment"># 撕下一个应用程序</span><br>docker stack rm <span class="hljs-variable">&lt;appname&gt;</span>                             <span class="hljs-comment"># Tear down an application</span><br><br><span class="hljs-comment"># 从管理器中删除单个节点群</span><br>docker swarm leave --force      <span class="hljs-comment"># Take down a single node swarm from the manager</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自动化运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker基础学习笔记2</title>
    <link href="/2019/09/13/tools/docker/Docker%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
    <url>/2019/09/13/tools/docker/Docker%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
    
    <content type="html"><![CDATA[<h2 id="使用-Dockerfile定义容器"><a href="#使用-Dockerfile定义容器" class="headerlink" title="使用 Dockerfile定义容器"></a>使用 <code>Dockerfile</code>定义容器</h2><p><code>Dockerfile</code>定义容器内环境中发生的事情。对网络接口和磁盘驱动器等资源的访问在此环境中进行虚拟化，该环境与系统的其他部分隔离，因此您需要将端口映射到外部世界，并具体说明要“复制”到哪些文件那个环境。但是，在执行此操作之后，您可以预期<code>Dockerfile</code>在此处定义的应用程序的构建 在其运行的任何位置都完全相同。</p><span id="more"></span><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a><code>Dockerfile</code></h3><p>在本地计算机上创建一个空目录。<code>cd</code>目录，创建一个名为<code>Dockerfile</code>的文件，将以下内容复制并粘贴到该文件中，然后保存。记下解释新Dockerfile中每个语句的注释。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># Use an official Python runtime as a parent image</span><br><span class="hljs-keyword">FROM</span> python:<span class="hljs-number">2.7</span>-slim<br><br><span class="hljs-comment"># Set the working directory to /app</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><br><span class="hljs-comment"># Copy the current directory contents into the container at /app</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . /app</span><br><br><span class="hljs-comment"># Install any needed packages specified in requirements.txt</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> pip install --trusted-host pypi.python.org -r requirements.txt</span><br><br><span class="hljs-comment"># Make port 80 available to the world outside this container</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br><br><span class="hljs-comment"># Define environment variable</span><br><span class="hljs-keyword">ENV</span> NAME World<br><br><span class="hljs-comment"># Run app.py when the container launches</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;python&quot;</span>, <span class="hljs-string">&quot;app.py&quot;</span>]</span><br></code></pre></td></tr></table></figure><p><img src="/images/Docker%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/dockerfile%E5%85%B3%E9%94%AE%E5%AD%97.jpg" alt="dockerfile关键字"></p><h2 id="应用程序本身"><a href="#应用程序本身" class="headerlink" title="应用程序本身"></a>应用程序本身</h2><p>再创建两个文件，<code>requirements.txt</code>然后<code>app.py</code>将它们放在同一个文件夹中<code>Dockerfile</code>。这完成了我们的应用程序，您可以看到它非常简单。当上述<code>Dockerfile</code>被内置到的图像，<code>app.py</code>并且 <code>requirements.txt</code>是因为存在<code>Dockerfile</code>的<code>COPY</code>命令，并从输出<code>app.py</code>是通过HTTP得益于访问<code>EXPOSE</code> 命令。</p><h3 id="requirements-txt-存放依赖性软包"><a href="#requirements-txt-存放依赖性软包" class="headerlink" title="requirements.txt 存放依赖性软包"></a><code>requirements.txt</code> 存放依赖性软包</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Flask</span><br><span class="hljs-attribute">Redis</span><br></code></pre></td></tr></table></figure><h2 id="构建应用程序"><a href="#构建应用程序" class="headerlink" title="构建应用程序"></a>构建应用程序</h2><p>我们准备构建应用程序。确保您仍处于新目录的顶层。这是<code>ls</code>应该显示的内容：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">ls</span><br>Dockerfileapp.pyrequirements.txt<br></code></pre></td></tr></table></figure><p>现在运行build命令。这将创建一个Docker镜像，我们将使用该<code>--tag</code>选项命名。使用<code>-t</code>，如果你想用较短的选项。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker build --tag</span>=friendlyhello .<br></code></pre></td></tr></table></figure><p>你的建筑镜像在哪里？它位于您机器的本地Docker镜像注册表中：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ docker image ls<br><br>REPOSITORY            <span class="hljs-keyword">TAG</span>                 <span class="hljs-title">IMAGE</span> ID<br>friendlyhello         latest              <span class="hljs-number">326387</span>cea398<br></code></pre></td></tr></table></figure><p>注意标签是如何默认的<code>latest</code>。标签选项的完整语法类似于<code>--tag=friendlyhello:v0.0.1</code>。</p><blockquote><p>Linux用户的故障排除</p><p><em>代理服务器设置</em></p><p>代理服务器可以在Web应用程序启动并运行后阻止其连接。如果您位于代理服务器后面，请<code>RUN pip</code>在Dockerfile中添加以下行，使用该<code>ENV</code>命令指定代理服务器的主机和端口：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># Set proxy server, replace host:port with values for your servers</span><br><span class="hljs-keyword">ENV</span> http_proxy host:port<br><span class="hljs-keyword">ENV</span> https_proxy host:port<br></code></pre></td></tr></table></figure><p><em>DNS设置</em></p><p>DNS配置错误可能会产生问题<code>pip</code>。您需要设置自己的DNS服务器地址才能<code>pip</code>正常工作。您可能想要更改Docker守护程序的DNS设置。您可以<code>/etc/docker/daemon.json</code>使用<code>dns</code>密钥编辑（或创建）配置文件，如下所示：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>  <span class="hljs-string">&quot;dns&quot;</span>: [<span class="hljs-string">&quot;your_dns_address&quot;</span>, <span class="hljs-string">&quot;8.8.8.8&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，列表的第一个元素是DNS服务器的地址。第二项是Google的DNS，可在第一项无法使用时使用。</p><p>在继续之前，请保存<code>daemon.json</code>并重新启动docker服务。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo service docker restart</span><br></code></pre></td></tr></table></figure><p>修复后，重试运行该<code>build</code>命令。</p><p><em>MTU设置</em></p><p>如果默认网桥上的MTU（默认值为1500）大于主机外部网络的MTU，则<code>pip</code>失败。通过<code>/etc/docker/daemon.json</code>使用<code>mtu</code>密钥编辑（或创建）配置文件来设置docker bridge网络的MTU以匹配主机的MTU ，如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml">&#123;<br>  <span class="hljs-attr">&quot;mtu&quot;:</span> <span class="hljs-number">1450</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在继续之前，请保存<code>daemon.json</code>并重新启动docker服务。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo systemctl restart docker</span><br></code></pre></td></tr></table></figure><p>重新运行该<code>build</code>命令。</p></blockquote><h2 id="运行应用程序"><a href="#运行应用程序" class="headerlink" title="运行应用程序"></a>运行应用程序</h2><p>运行应用程序，使用以下方法将计算机的端口4000映射到容器的已发布端口80 <code>-p</code>：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -p <span class="hljs-number">4000</span>:<span class="hljs-number">80</span> friendlyhello<br></code></pre></td></tr></table></figure><p>您应该看到Python正在为您的应用提供服务的消息<code>http://0.0.0.0:80</code>。但是该消息来自容器内部，它不知道您将该容器的端口80映射到4000，从而生成正确的URL <code>http://localhost:4000</code>。</p><blockquote><p><strong>注意</strong>：如果您在Windows 7上使用Docker Toolbox，请使用Docker Machine IP而不是<code>localhost</code>。例如，http：&#x2F;&#x2F;192.168.99.100：4000 &#x2F;。要查找IP地址，请使用该命令<code>docker-machine ip</code>。</p></blockquote><p>您还可以<code>curl</code>在shell中使用该命令来查看相同的内容。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">$ curl http://localhost:4000<br><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>Hostname:<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span> 8fc990912a14<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>Visits:<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>cannot connect to Redis, counter disabled<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br></code></pre></td></tr></table></figure><p>现在让我们在后台以分离模式运行应用程序：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -d -p <span class="hljs-number">4000</span>:<span class="hljs-number">80</span> friendlyhello<br></code></pre></td></tr></table></figure><p>您获得应用程序的长容器ID，然后被踢回终端。您的容器正在后台运行。您还可以看到缩写的容器ID <code>docker container ls</code>（并且在运行命令时两者都可以互换）：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mel">$ docker <span class="hljs-keyword">container</span> <span class="hljs-keyword">ls</span><br>CONTAINER ID        IMAGE               COMMAND             CREATED<br><span class="hljs-number">1</span>fa4ab2cf395        friendlyhello       <span class="hljs-string">&quot;python app.py&quot;</span>     <span class="hljs-number">28</span> seconds ago<br></code></pre></td></tr></table></figure><p>请注意<code>CONTAINER ID</code>匹配的内容<code>http://localhost:4000</code>。</p><p>现在<code>docker container stop</code>用来结束这个过程，使用<code>CONTAINER ID</code>如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> container stop <span class="hljs-number">1</span>fa4ab2cf395<br></code></pre></td></tr></table></figure><h2 id="分享你的镜像"><a href="#分享你的镜像" class="headerlink" title="分享你的镜像"></a>分享你的镜像</h2><p>为了演示我们刚刚创建的内容的可移植性，让我们上传我们构建的图像并在其他地方运行它。毕竟，当您想要将容器部署到生产环境时，您需要知道如何推送到注册表。</p><p>注册表是存储库的集合，存储库是图像的集合 - 类似于GitHub存储库，除了代码已经构建。注册表上的帐户可以创建许多存储库。该<code>docker</code>CLI使用泊坞窗的公共注册表默认情况下。</p><h2 id="回顾和备忘单（可选）"><a href="#回顾和备忘单（可选）" class="headerlink" title="回顾和备忘单（可选）"></a>回顾和备忘单（可选）</h2><p>以下是此页面中基本Docker命令的列表，以及一些相关的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Create image using this directory&#x27;s Dockerfile</span><br><span class="hljs-comment"># 使用此目录的Dockerfile创建映像</span><br>docker build -t friendlyhello .  <br><br><span class="hljs-comment"># Run &quot;friendlyhello&quot; mapping port 4000 to 80</span><br><span class="hljs-comment"># 运行“friendlyhello”映射端口4000到80</span><br>docker run -p 4000:80 friendlyhello  <br><br><span class="hljs-comment"># Same thing, but in detached mode</span><br><span class="hljs-comment"># 运行，但处于分离模式</span><br>docker run -d -p 4000:80 friendlyhello <br><br><span class="hljs-comment"># List all running containers</span><br><span class="hljs-comment"># 列出所有正在运行的容器</span><br>docker container <span class="hljs-built_in">ls</span><br><br><span class="hljs-comment"># List all containers, even those not running</span><br><span class="hljs-comment"># 列出所有容器，甚至是那些未运行的容器</span><br>docker container <span class="hljs-built_in">ls</span> -a <br><br><span class="hljs-comment"># Gracefully stop the specified container</span><br><span class="hljs-comment"># 优雅地停止指定的容器</span><br>docker container stop &lt;<span class="hljs-built_in">hash</span>&gt;  <br><br><span class="hljs-comment"># Force shutdown of the specified container</span><br><span class="hljs-comment"># 强制关闭指定的容器</span><br>docker container <span class="hljs-built_in">kill</span> &lt;<span class="hljs-built_in">hash</span>&gt; <br><br><span class="hljs-comment"># Remove specified container from this machine</span><br><span class="hljs-comment"># 从此计算机中删除指定的容器</span><br>docker container <span class="hljs-built_in">rm</span> &lt;<span class="hljs-built_in">hash</span>&gt; <br><br><span class="hljs-comment"># Remove all containers</span><br><span class="hljs-comment"># 删除所有容器</span><br>docker container <span class="hljs-built_in">rm</span> $(docker container <span class="hljs-built_in">ls</span> -a -q) <br><br><span class="hljs-comment"># List all images on this machine</span><br><span class="hljs-comment"># 列出本机上的所有镜像</span><br>docker image <span class="hljs-built_in">ls</span> -a <br><br><span class="hljs-comment"># Remove specified image from this machine</span><br><span class="hljs-comment"># 从本机删除指定的图像</span><br>docker image <span class="hljs-built_in">rm</span> &lt;image <span class="hljs-built_in">id</span>&gt;  <br><br><span class="hljs-comment"># Remove all images from this machine</span><br><span class="hljs-comment"># 从本机删除所有图像</span><br>docker image <span class="hljs-built_in">rm</span> $(docker image <span class="hljs-built_in">ls</span> -a -q)  <br><br><span class="hljs-comment"># Log in this CLI session using your Docker credentials</span><br><span class="hljs-comment"># 使用Docker凭据登录此CLI会话</span><br>docker login   <br><br><span class="hljs-comment"># Tag &lt;image&gt; for upload to registry</span><br><span class="hljs-comment"># 标记&lt;image&gt;以上传到注册表</span><br>docker tag &lt;image&gt; username/repository:tag  <br><br><span class="hljs-comment"># Upload tagged image to registry</span><br><span class="hljs-comment"># 将标记图像上载到注册表</span><br>docker push username/repository:tag <br><br><span class="hljs-comment"># Run image from a registry</span><br><span class="hljs-comment"># 从注册表运行镜像</span><br>docker run username/repository:tag                   <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自动化运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker基础学习笔记1</title>
    <link href="/2019/09/13/tools/docker/Docker%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <url>/2019/09/13/tools/docker/Docker%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    
    <content type="html"><![CDATA[<h2 id="使用Docker能干什么？"><a href="#使用Docker能干什么？" class="headerlink" title="使用Docker能干什么？"></a>使用Docker能干什么？</h2><p>一句话总结: <code>一次封装，到处运行</code></p><span id="more"></span><p>docker特点</p><ul><li><p>灵活：即使是最复杂的应用也可以集装箱化。</p></li><li><p>轻量级：容器利用并共享主机内核。</p></li><li><p>可互换：您可以即时部署更新和升级。</p></li><li><p>便携式：您可以在本地构建，部署到云，并在任何地方运行。</p></li><li><p>可扩展：您可以增加并自动分发容器副本。</p></li><li><p>可堆叠：您可以垂直和即时堆叠服务</p></li><li><p>快速，一致地交付您的应用程序</p><p>  Docker允许开发人员使用提供应用程序和服务的本地容器在标准化环境中工作，从而简化了开发生命周期。容器非常适合持续集成和持续交付（CI &#x2F; CD）工作流程。</p><p>  请考虑以下示例场景：<br>  您的开发人员在本地编写代码并使用Docker容器与同事共享他们的工作。<br>  他们使用Docker将他们的应用程序推入测试环境并执行自动和手动测试。<br>  当开发人员发现错误时，他们可以在开发环境中修复它们，并将它们重新部署到测试环境中以进行测试和验证。<br>  测试完成后，获取客户的修复就像将更新的图像推送到生产环境一样简单。</p></li><li><p>响应式部署和扩展</p><p>  Docker基于容器的平台允许高度可移植的工作负载。Docker容器可以在开发人员的本地笔记本电脑，数据中心的物理或虚拟机，云提供商或混合环境中运行。</p><p>  Docker的可移植性和轻量级特性还使得可以轻松地动态管理工作负载，按照业务需求即时扩展或拆除应用程序和服务。</p></li><li><p>在同一硬件上运行更多工作负载</p><p>  Docker轻巧而快速。它为基于管理程序的虚拟机提供了一种可行且经济高效的替代方案，因此您可以使用更多的计算容量来实现业务目标。Docker非常适合高密度环境以及需要用更少资源完成更多工作的中小型部署</p></li></ul><p><img src="/images/Docker%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/docker%E8%83%BD%E5%B9%B2%E4%BB%80%E4%B9%88.jpg" alt="docker能干什么"></p><p><img src="/images/Docker%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/whydocker.jpg" alt="whydocker"></p><h2 id="学习思路"><a href="#学习思路" class="headerlink" title="学习思路"></a>学习思路</h2><p>最好的学习教程：官方文档 <a href="https://docs.docker.com/get-started/">https://docs.docker.com/get-started/</a></p><p>加深理解基本概念，二手知识：<a href="https://www.bilibili.com/video/av27122140/?p=1">https://www.bilibili.com/video/av27122140/?p=1</a></p><p><code>学习思路：理解基本概念---熟悉基本操作——实战应用----掌握基本概念----熟练基本操作</code></p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>镜像 、容器、仓库、Dockerfile、容器卷</p><h2 id="安装docke"><a href="#安装docke" class="headerlink" title="安装docke"></a>安装docke</h2><h2 id="常用操作命令"><a href="#常用操作命令" class="headerlink" title="常用操作命令"></a>常用操作命令</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment">## List Docker CLI commands </span><br><span class="hljs-comment"># 列出Docker CLI命令</span><br>docker<br>docker container <span class="hljs-params">--help</span><br><br><span class="hljs-comment">## Display Docker version and info </span><br><span class="hljs-comment"># 显示Docker版本和信息</span><br>docker <span class="hljs-params">--version</span><br>docker <span class="hljs-keyword">version</span><br>docker info<br><br><span class="hljs-comment">## Execute Docker image </span><br><span class="hljs-comment"># 执行Docker镜像</span><br>docker run hello-world<br><br><span class="hljs-comment">## List Docker images </span><br><span class="hljs-comment"># 列出Docker镜像</span><br>docker image <span class="hljs-keyword">ls</span><br><br><span class="hljs-comment">## List Docker containers (running, all, all in quiet mode) </span><br><span class="hljs-comment"># 列出Docker容器（运行，全部，全部处于安静模式）</span><br>docker container <span class="hljs-keyword">ls</span><br>docker container <span class="hljs-keyword">ls</span> <span class="hljs-params">--all</span><br>docker container <span class="hljs-keyword">ls</span> -aq<br></code></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>容器化使<a href="https://www.docker.com/solutions/cicd">CI &#x2F; CD</a>无缝。例如：</p><ul><li>应用程序没有系统依赖性</li><li>可以将更新推送到分布式应用程序的任何部分</li><li>资源密度可以优化。</li></ul><p>使用Docker，扩展应用程序是一个新的可执行文件，而不是运行繁重的VM主机。</p>]]></content>
    
    
    <categories>
      
      <category>自动化运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitBook ,你人生的第一本书</title>
    <link href="/2019/08/27/tools/gitbook/"/>
    <url>/2019/08/27/tools/gitbook/</url>
    
    <content type="html"><![CDATA[<p>GitBook ,你人生的第一本书</p><p>做笔记写文档非常凌乱，不好管理，于是寻找各种文档工具</p><!---more---><p> <code>docsify</code>   (<a href="https://docsify.js.org/#/zh-cn/">https://docsify.js.org/#/zh-cn/</a>)</p><ul><li><p>docsify不是静态生成html，而通过动态请求markdown编译生成html**。</p></li><li><p>docsify还具有轻应用、全文搜索功能、支持多个主题、兼容IE10+、支持SSR等特性</p></li></ul><p><code>Gitbook</code></p><ul><li><strong>简洁</strong>（采用<a href="https://www.zhihu.com/question/20409634/answer/90728572">Markdown语法</a>，没有其他渲染，符合记录学习笔记的定位）</li><li>可在线浏览、可转成电子书（PDF、ePub、Mobi）</li><li>形成工具使用体系（Git、GitHub、GitHub Pages、GitBook）</li><li><strong>不怕编写失误</strong>（每次提交记录都可追溯）</li></ul><p><code>Phenomic</code></p><p><code>hexo</code></p><ul><li><a href="https://hexo.io/">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。有高扩展性、静态的特性。</li></ul><p>下面介绍gitbook</p><p>最好的教程是官方文档 <a href="https://docs.gitbook.com/">https://docs.gitbook.com/</a><br>以下只是个人笔记，如有疏漏，请多包涵。更新中……</p><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h3><p>安装 Node.js<br>GitBook 是一个基于 Node.js 的命令行工具，下载安装 Node.js （<a href="https://nodejs.org/en">https://nodejs.org/en</a>)<br>安装完成之后，有如下提示。</p><blockquote><p>This package has installed:<br>    •Node.js v10.16.3 to &#x2F;usr&#x2F;local&#x2F;bin&#x2F;node<br>    •npm v6.9.0 to &#x2F;usr&#x2F;local&#x2F;bin&#x2F;npm<br>Make sure that &#x2F;usr&#x2F;local&#x2F;bin is in your $PATH.</p></blockquote><p>你可以使用下面的命令来检验是否安装成功。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ <span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br>v10.<span class="hljs-number">16.3</span><br><br>npm -v<br><span class="hljs-number">6.9</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="2-安装Gitbook命令"><a href="#2-安装Gitbook命令" class="headerlink" title="2.安装Gitbook命令"></a>2.安装Gitbook命令</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">sudo npm install -g gitbook-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>检查是否安装成功</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gitbook</span> -V<br><br><span class="hljs-attribute">CLI</span> version: <span class="hljs-number">2</span>.<span class="hljs-number">3</span>.<span class="hljs-number">2</span><br><span class="hljs-attribute">GitBook</span> version: <span class="hljs-number">3</span>.<span class="hljs-number">2</span>.<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="3-GitBook-初体验"><a href="#3-GitBook-初体验" class="headerlink" title="3.GitBook 初体验"></a>3.GitBook 初体验</h3><p>新建一本书的目录gitbook(此名称随便起)，进入gitbook目录，创造一本书。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ mkdir gitbook<br>$ cd mybook<br>$ gitbook init<br><br>warn: <span class="hljs-keyword">no</span> <span class="hljs-keyword">summary</span> file <span class="hljs-keyword">in</span> this book<br><span class="hljs-keyword">info</span>: <span class="hljs-keyword">create</span> README.md<br><span class="hljs-keyword">info</span>: <span class="hljs-keyword">create</span> <span class="hljs-keyword">SUMMARY</span>.md<br><span class="hljs-keyword">info</span>: initialization <span class="hljs-keyword">is</span> finished<br></code></pre></td></tr></table></figure><p>可以看到他会创建 README.md 和 SUMMARY.md 这两个文件，README.md 应该不陌生，就是说明文档，而 SUMMARY.md 其实就是书的章节目录。</p><p>接下来，我们输入 命令，然后在浏览器地址栏中输入 <a href="http://localhost:4000/">http://localhost:4000</a> 便可预览书籍。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs lasso">$ gitbook serve<br><br>Live reload server started <span class="hljs-keyword">on</span> port: <span class="hljs-number">35729</span><br>Press CTRL+C <span class="hljs-keyword">to</span> quit <span class="hljs-params">...</span><br><br>info: <span class="hljs-number">7</span> plugins are installed <br>info: loading plugin <span class="hljs-string">&quot;livereload&quot;</span><span class="hljs-params">...</span> OK <br>info: loading plugin <span class="hljs-string">&quot;highlight&quot;</span><span class="hljs-params">...</span> OK <br>info: loading plugin <span class="hljs-string">&quot;search&quot;</span><span class="hljs-params">...</span> OK <br>info: loading plugin <span class="hljs-string">&quot;lunr&quot;</span><span class="hljs-params">...</span> <br>OK <br>info: loading plugin <span class="hljs-string">&quot;sharing&quot;</span><span class="hljs-params">...</span> OK <br>info: loading plugin <span class="hljs-string">&quot;fontsettings&quot;</span><span class="hljs-params">...</span> OK <br>info: loading plugin <span class="hljs-string">&quot;theme-default&quot;</span><span class="hljs-params">...</span> OK <br>info: found <span class="hljs-number">1</span> pages <br>info: found <span class="hljs-number">0</span> asset files <br>info: &gt;&gt; generation finished <span class="hljs-keyword">with</span> success <span class="hljs-keyword">in</span> <span class="hljs-number">0.3</span>s ! <br><br>Starting server <span class="hljs-params">...</span><br>Serving book <span class="hljs-keyword">on</span> http:<span class="hljs-comment">//localhost:4000</span><br></code></pre></td></tr></table></figure><p>CTRL+Z 强制退出后再启动，遇到的问题</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs gradle">gitbook serve<br><br>... Uhoh. Got error listen EADDRINUSE: address already in use :::<span class="hljs-number">35729</span> ...<br>Error: listen EADDRINUSE: address already in use :::<span class="hljs-number">35729</span><br>    at Server.setupListenHandle [as _listen2] (net.js:<span class="hljs-number">1270</span>:<span class="hljs-number">14</span>)<br>    at listenInCluster (net.js:<span class="hljs-number">1318</span>:<span class="hljs-number">12</span>)<br>    at Server.listen (net.js:<span class="hljs-number">1405</span>:<span class="hljs-number">7</span>)<br>    at Server.listen (<span class="hljs-regexp">/private/</span>var<span class="hljs-regexp">/root/</span>.gitbook<span class="hljs-regexp">/versions/</span><span class="hljs-number">3.2</span>.<span class="hljs-number">3</span><span class="hljs-regexp">/node_modules/</span>tiny-lr<span class="hljs-regexp">/lib/</span>server.js:<span class="hljs-number">164</span>:<span class="hljs-number">15</span>)<br>    at Promise.apply (<span class="hljs-regexp">/private/</span>var<span class="hljs-regexp">/root/</span>.gitbook<span class="hljs-regexp">/versions/</span><span class="hljs-number">3.2</span>.<span class="hljs-number">3</span><span class="hljs-regexp">/node_modules/</span>q/q.js:<span class="hljs-number">1165</span>:<span class="hljs-number">26</span>)<br>    at Promise.promise.promiseDispatch (<span class="hljs-regexp">/private/</span>var<span class="hljs-regexp">/root/</span>.gitbook<span class="hljs-regexp">/versions/</span><span class="hljs-number">3.2</span>.<span class="hljs-number">3</span><span class="hljs-regexp">/node_modules/</span>q/q.js:<span class="hljs-number">788</span>:<span class="hljs-number">41</span>)<br>    at <span class="hljs-regexp">/private/</span>var<span class="hljs-regexp">/root/</span>.gitbook<span class="hljs-regexp">/versions/</span><span class="hljs-number">3.2</span>.<span class="hljs-number">3</span><span class="hljs-regexp">/node_modules/</span>q/q.js:<span class="hljs-number">1391</span>:<span class="hljs-number">14</span><br>    at runSingle (<span class="hljs-regexp">/private/</span>var<span class="hljs-regexp">/root/</span>.gitbook<span class="hljs-regexp">/versions/</span><span class="hljs-number">3.2</span>.<span class="hljs-number">3</span><span class="hljs-regexp">/node_modules/</span>q/q.js:<span class="hljs-number">137</span>:<span class="hljs-number">13</span>)<br>    at flush (<span class="hljs-regexp">/private/</span>var<span class="hljs-regexp">/root/</span>.gitbook<span class="hljs-regexp">/versions/</span><span class="hljs-number">3.2</span>.<span class="hljs-number">3</span><span class="hljs-regexp">/node_modules/</span>q/q.js:<span class="hljs-number">125</span>:<span class="hljs-number">13</span>)<br>    at process._tickCallback (internal<span class="hljs-regexp">/process/</span>next_tick.js:<span class="hljs-number">61</span>:<span class="hljs-number">11</span>)<br><br>You already have a server listening on <span class="hljs-number">35729</span><br>You should stop it and <span class="hljs-keyword">try</span> again.<br></code></pre></td></tr></table></figure><p>解决办法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">kill -<span class="hljs-number">9</span> <span class="hljs-constructor">$(<span class="hljs-params">lsof</span> -<span class="hljs-params">t</span> -<span class="hljs-params">i</span>:35729)</span><br></code></pre></td></tr></table></figure><h3 id="4-详细介绍下-GitBook-目录结构及相关文件。"><a href="#4-详细介绍下-GitBook-目录结构及相关文件。" class="headerlink" title="4.详细介绍下 GitBook 目录结构及相关文件。"></a>4.详细介绍下 GitBook 目录结构及相关文件。</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">sh</span>-3.2# tree<br>.<br>├── README.md<br>├── SUMMARY.md<br>└── _book<br>    ├── gitbook<br>    │   ├── fonts<br>    │   │   └── fontawesome<br>    │   │       ├── FontAwesome.otf<br>    │   │       ├── fontawesome-webfont.eot<br>    │   │       ├── fontawesome-webfont.svg<br>    │   │       ├── fontawesome-webfont.ttf<br>    │   │       ├── fontawesome-webfont.woff<br>    │   │       └── fontawesome-webfont.woff2<br>    │   ├── gitbook-<span class="hljs-keyword">plugin</span>-fontsettings<br>    │   │   ├── fontsettings.js<br>    │   │   └── website.css<br>    │   ├── gitbook-<span class="hljs-keyword">plugin</span>-highlight<br>    │   │   ├── ebook.css<br>    │   │   └── website.css<br>    │   ├── gitbook-<span class="hljs-keyword">plugin</span>-livereload<br>    │   │   └── <span class="hljs-keyword">plugin</span>.js<br>    │   ├── gitbook-<span class="hljs-keyword">plugin</span>-lunr<br>    │   │   ├── lunr.min.js<br>    │   │   └── <span class="hljs-keyword">search</span>-lunr.js<br>    │   ├── gitbook-<span class="hljs-keyword">plugin</span>-<span class="hljs-keyword">search</span><br>    │   │   ├── lunr.min.js<br>    │   │   ├── <span class="hljs-keyword">search</span>-engine.js<br>    │   │   ├── <span class="hljs-keyword">search</span>.css<br>    │   │   └── <span class="hljs-keyword">search</span>.js<br>    │   ├── gitbook-<span class="hljs-keyword">plugin</span>-sharing<br>    │   │   └── buttons.js<br>    │   ├── gitbook.js<br>    │   ├── images<br>    │   │   ├── apple-touch-icon-precomposed-152.png<br>    │   │   └── favicon.ico<br>    │   ├── style.css<br>    │   └── theme.js<br>    ├── index.html<br>    └── search_index.json<br></code></pre></td></tr></table></figure><p>README.md<br>书本简介内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">序言</span><br><span class="hljs-meta prompt_"> &gt;</span><span class="language-bash">人生的第一本电纸书</span><br></code></pre></td></tr></table></figure><p>SUMMARY.md<br>这个文件主要决定 GitBook 的章节目录，它通过 Markdown 中的列表语法来表示文件的父子关系</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scss"># <span class="hljs-selector-tag">Summary</span><br>  <br>* <span class="hljs-selector-attr">[序言]</span>(README.md)<br><br>* <span class="hljs-selector-attr">[第一章]</span>(chapter1/README.md)<br>    * <span class="hljs-selector-attr">[第一节]</span>(chapter1/seciont1.md)<br>    * <span class="hljs-selector-attr">[第二节]</span>(chapter1/section2.md)<br>* <span class="hljs-selector-attr">[第二章]</span>(chapter2/README.md)<br>    * <span class="hljs-selector-attr">[第一节]</span>(chapter2/seciont1.md)<br>    * <span class="hljs-selector-attr">[第二节]</span>(chapter2/section2.md)<br>* <span class="hljs-selector-attr">[结束]</span>(end/README.md)<br></code></pre></td></tr></table></figure><p>fonts字体文件夹<br>images图片文件夹</p><p>插件文件夹<br>gitbook-plugin-fontsettings<br>gitbook-plugin-highlight<br>gitbook-plugin-livereload<br>gitbook-plugin-lunr<br>gitbook-plugin-search<br>gitbook-plugin-sharing</p><p>GitBook 有插件官网，默认带有 5 个插件，highlight、search、sharing、font-settings、livereload。</p><h3 id="5-帮助文档"><a href="#5-帮助文档" class="headerlink" title="5.帮助文档"></a>5.帮助文档</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">sh<span class="hljs-number">-3.2</span><span class="hljs-comment"># gitbook</span><br><br>  Usage: gitbook [options] [<span class="hljs-keyword">command</span>]<br><br><br>  Options:<br><br>    -v, <span class="hljs-comment">--gitbook [version]  specify GitBook version to use</span><br>    -d, <span class="hljs-comment">--debug              enable verbose error</span><br>    -V, <span class="hljs-comment">--version            Display running versions of gitbook and gitbook-cli</span><br>    -h, <span class="hljs-comment">--help               output usage information</span><br><br><br>  Commands:<br><br>    ls                        List versions installed locally<br>    current                   Display currently activated <span class="hljs-built_in">version</span><br>    ls-remote                 List remote versions available <span class="hljs-keyword">for</span> install<br>    fetch [<span class="hljs-built_in">version</span>]           Download <span class="hljs-keyword">and</span> install <span class="hljs-keyword">a</span> &lt;<span class="hljs-built_in">version</span>&gt;<br>    <span class="hljs-built_in">alias</span> [<span class="hljs-built_in">folder</span>] [<span class="hljs-built_in">version</span>]  Set <span class="hljs-keyword">an</span> <span class="hljs-built_in">alias</span> named &lt;<span class="hljs-built_in">version</span>&gt; pointing <span class="hljs-built_in">to</span> &lt;<span class="hljs-built_in">folder</span>&gt;<br>    uninstall [<span class="hljs-built_in">version</span>]       Uninstall <span class="hljs-keyword">a</span> <span class="hljs-built_in">version</span><br>    update [tag]              Update <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> latest <span class="hljs-built_in">version</span> <span class="hljs-keyword">of</span> GitBook<br>    help                      List commands <span class="hljs-keyword">for</span> GitBook<br>    *                         run <span class="hljs-keyword">a</span> <span class="hljs-keyword">command</span> <span class="hljs-title">with</span> <span class="hljs-title">a</span> <span class="hljs-title">specific</span> <span class="hljs-title">gitbook</span>  <span class="hljs-title">version</span><br><br></code></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs scss">sh-<span class="hljs-number">3.2</span># gitbook help<br>    build <span class="hljs-selector-attr">[book]</span> <span class="hljs-selector-attr">[output]</span>       build <span class="hljs-selector-tag">a</span> book<br>        <span class="hljs-attr">--log</span>                   Minimum log level to <span class="hljs-attribute">display</span> (Default is info; Values are debug, info, warn, error, disabled)<br>        <span class="hljs-attr">--format</span>                Format to build to (Default is website; Values are website, json, ebook)<br>        --<span class="hljs-selector-attr">[no-]</span>timing           Print timing debug information (Default is false)<br><br>    serve <span class="hljs-selector-attr">[book]</span> <span class="hljs-selector-attr">[output]</span>       serve the book as <span class="hljs-selector-tag">a</span> website for testing<br>        <span class="hljs-attr">--port</span>                  Port for server to listen on (Default is <span class="hljs-number">4000</span>)<br>        <span class="hljs-attr">--lrport</span>                Port for livereload server to listen on (Default is <span class="hljs-number">35729</span>)<br>        --<span class="hljs-selector-attr">[no-]</span>watch            Enable file watcher and live reloading (Default is true)<br>        --<span class="hljs-selector-attr">[no-]</span>live             Enable live reloading (Default is true)<br>        --<span class="hljs-selector-attr">[no-]</span>open             Enable opening book in browser (Default is false)<br>        <span class="hljs-attr">--browser</span>               Specify browser for opening book (Default is )<br>        <span class="hljs-attr">--log</span>                   Minimum log level to <span class="hljs-attribute">display</span> (Default is info; Values are debug, info, warn, error, disabled)<br>        <span class="hljs-attr">--format</span>                Format to build to (Default is website; Values are website, json, ebook)<br><br>    install <span class="hljs-selector-attr">[book]</span>              install <span class="hljs-attribute">all</span> plugins dependencies<br>        <span class="hljs-attr">--log</span>                   Minimum log level to <span class="hljs-attribute">display</span> (Default is info; Values are debug, info, warn, error, disabled)<br><br>    parse <span class="hljs-selector-attr">[book]</span>                parse and print debug information about <span class="hljs-selector-tag">a</span> book<br>        <span class="hljs-attr">--log</span>                   Minimum log level to <span class="hljs-attribute">display</span> (Default is info; Values are debug, info, warn, error, disabled)<br><br>    init <span class="hljs-selector-attr">[book]</span>                 setup and create files for chapters<br>        <span class="hljs-attr">--log</span>                   Minimum log level to <span class="hljs-attribute">display</span> (Default is info; Values are debug, info, warn, error, disabled)<br><br>    pdf <span class="hljs-selector-attr">[book]</span> <span class="hljs-selector-attr">[output]</span>         build <span class="hljs-selector-tag">a</span> book into an ebook file<br>        <span class="hljs-attr">--log</span>                   Minimum log level to <span class="hljs-attribute">display</span> (Default is info; Values are debug, info, warn, error, disabled)<br><br>    epub <span class="hljs-selector-attr">[book]</span> <span class="hljs-selector-attr">[output]</span>        build <span class="hljs-selector-tag">a</span> book into an ebook file<br>        <span class="hljs-attr">--log</span>                   Minimum log level to <span class="hljs-attribute">display</span> (Default is info; Values are debug, info, warn, error, disabled)<br><br>    mobi <span class="hljs-selector-attr">[book]</span> <span class="hljs-selector-attr">[output]</span>        build <span class="hljs-selector-tag">a</span> book into an ebook file<br>        <span class="hljs-attr">--log</span>                   Minimum log level to <span class="hljs-attribute">display</span> (Default is info; Values are debug, info, warn, error, disabled)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gitbook</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows7_32 Apache2.2发布Django+Angular项目</title>
    <link href="/2019/08/09/Linux/Windows7-32-Apache2-2%E5%8F%91%E5%B8%83Django-Angular%E9%A1%B9%E7%9B%AE/"/>
    <url>/2019/08/09/Linux/Windows7-32-Apache2-2%E5%8F%91%E5%B8%83Django-Angular%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p>遇坑记录</p><p>1.缺少MySQL-python-1.2.3.win32-py2.7.exe模块</p><p>2.mod_wsgi.so模块不可用</p><p>3.Aapache2.2配置文件格式</p><span id="more"></span> <h3 id="一．安装依赖环境"><a href="#一．安装依赖环境" class="headerlink" title="一．安装依赖环境"></a>一．安装依赖环境</h3><p>1）pypa-setuptools-d9bb58331007 python setup.py install</p><p>2）pip-1.4.1 python setup.py install</p><p>3）django-1.6.2 python setup.py install</p><p>4）django-rest-framework-2.3.14 python setup.py install</p><p>5）MySQL-python-1.2.3.win32-py2.7.exe</p><p>6）httpd-2.2.25-win32-x86-openssl-0.9.8y.msi</p><h3 id="二、修改配置文件Apache（Apache2-2-conf-httpd-conf）"><a href="#二、修改配置文件Apache（Apache2-2-conf-httpd-conf）" class="headerlink" title="二、修改配置文件Apache（Apache2.2\conf\httpd.conf）"></a>二、修改配置文件Apache（Apache2.2\conf\httpd.conf）</h3><p>1.安装mod_wsgi.so模块。方法：拷贝mod_wsgi.so到Apache安装目录下的modules    文件夹中，（如：D:\Apache2.2\modules下）</p><p>2.添加LoadModule wsgi_module modules&#x2F;mod_wsgi.so</p><p>3.启用 Include conf&#x2F;extra&#x2F;httpd-vhosts.conf</p><p>4.关闭默认端口监听 # Listen 80</p><p>5.配置conf&#x2F;extra&#x2F;httpd-vhosts.conf文件</p><p>​      后端配置信息</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Listen</span> <span class="hljs-number">8007</span><br><br><span class="hljs-section">&lt;VirtualHost *<span class="hljs-number">:8007</span>&gt;</span><br><br>    <span class="hljs-attribute">WSGIScriptAlias</span> / D:/PmsService/PmsService/wsgi.py<br><br>    <span class="hljs-attribute">DocumentRoot</span> <span class="hljs-string">&quot;D:/PmsService&quot;</span><br><br>    <span class="hljs-attribute">ServerName</span> www.PmsService.com <br><br>    <span class="hljs-attribute">Alias</span> /static D:/PmsService/static<br><br>    <span class="hljs-section">&lt;Directory <span class="hljs-string">&quot;D:/PmsService/PmsService&quot;</span>&gt;</span> <br><br>        <span class="hljs-attribute">Order</span> <span class="hljs-literal">allow</span>,<span class="hljs-literal">deny</span>  <br><br>        <span class="hljs-attribute">Allow</span> from <span class="hljs-literal">all</span><br><br>    <span class="hljs-section">&lt;/Directory&gt;</span>  <br><br><span class="hljs-section">&lt;/VirtualHost&gt;</span><br></code></pre></td></tr></table></figure><p>  前端配置信息</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Listen</span> <span class="hljs-number">80</span><br><br><span class="hljs-section">&lt;VirtualHost *<span class="hljs-number">:80</span>&gt;</span><br><br>    <span class="hljs-attribute">DocumentRoot</span> <span class="hljs-string">&quot;D:/iegfms&quot;</span><br><br>    <span class="hljs-section">&lt;Directory  <span class="hljs-string">&quot;D:/iegfms&quot;</span>&gt;</span><br><br>        <span class="hljs-attribute">Order</span> <span class="hljs-literal">allow</span>,<span class="hljs-literal">deny</span>  <br><br>        <span class="hljs-attribute">Allow</span> from <span class="hljs-literal">all</span>   <br><br>    <span class="hljs-section">&lt;/Directory&gt;</span><br><br><span class="hljs-section">&lt;/VirtualHost&gt;</span><br></code></pre></td></tr></table></figure><h3 id="三、修改Django后端项目的配置信息"><a href="#三、修改Django后端项目的配置信息" class="headerlink" title="三、修改Django后端项目的配置信息"></a>三、修改Django后端项目的配置信息</h3><p>1.Wsgi.py文件</p><p>Windows系统sys.path.append(“D:&#x2F;PmsService&#x2F;“),</p><p>linu系统 sys.path.append(“&#x2F;var&#x2F;www&#x2F;html&#x2F;PmsService”)</p><p>2.settings.py文件</p><p>​        配置数据库信息DATABASES &#x3D; {}</p><h3 id="四、导入对应的数据库"><a href="#四、导入对应的数据库" class="headerlink" title="四、导入对应的数据库"></a>四、导入对应的数据库</h3>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境部署</tag>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android自动化测试概况</title>
    <link href="/2019/07/28/test/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A6%82%E5%86%B5/"/>
    <url>/2019/07/28/test/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A6%82%E5%86%B5/</url>
    
    <content type="html"><![CDATA[<p><strong>Android<strong><strong>几种常用</strong></strong>自动化测试框架****对比</strong></p><p>1、Monkey是Android SDK自带的测试工具，在测试过程中会向系统发送伪随机的用户事件流，如按键输入、触摸屏输入、手势输入等)，实现对正在开发的应用程序进行压力测试，也有日志输出。该工具只能做一些压力测试，由于测试事件和数据都是随机的，不能自定义，所以有很大的局限性。</p><p>2、MonkeyRunner也是android SDK提供的测试工具。严格意义上来说MonkeyRunner其实是一个Api工具包，比Monkey强大，可以编写测试脚本来自定义数据、事件。缺点是脚本用Python来写，对测试人员来说要求较高，有比较大的学习成本。</p><p>3、Robotium也是基于Instrumentation的测试框架，主要针对某一个APK进行自动化测试，APK可以有源码，也可以没有源码，功能强大；缺点是对测试人员来说要有一定的Java基础，了解Android基本组件，不能跨App。</p><p>4、Instrumentation是早期Google提供的Android自动化测试工具类，虽然在那时候JUnit也可以对Android进行测试，但是Instrumentation允许你对应用程序做更为复杂的测试，甚至是框架层面的，是很多其它测试框架的基础，可以在同进程中加载被测组件。它有很多丰富的高层封装，使用者可以使用基于instrumentation的其他框架，避免过多二次开发量。但Instrumentation不支持跨应用，导致基于instrumentation的框架都继承了这个缺点。</p><p>5、UIAutomator是由谷歌提供的测试框架，它提供了原生Android app和游戏的高级UI测试。基本上支持所有的Android事件操作，与Instrumentation对比，它不需要测试人员了解代码实现细节（可以用UiAutomatorviewer抓去App页面上的控件属性而不看源码）基于Java，测试代码结构简单、编写容易、学习成本，一次编译，所有设备或模拟器都能运行测试，能跨App（比如：很多App有选择相册、打开相机拍照，这就是跨App测试）。缺点是只支持SDK 16（Android 4.1）及以上，不支持Hybird App、WebApp。</p><p>6、Appium是一个开源的、跨平台的自动化测试工具，这个框架应该是功能最强大的。</p><span id="more"></span><h3 id="自动化工具发展介绍"><a href="#自动化工具发展介绍" class="headerlink" title="自动化工具发展介绍"></a>自动化工具发展介绍</h3><p><img src="/images/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A6%82%E5%86%B5/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95002.jpg" alt="图片名称"><br><img src="/images/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A6%82%E5%86%B5/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95004.jpg" alt="图片名称"><br><img src="/images/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A6%82%E5%86%B5/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95005.jpg" alt="图片名称"><br><img src="/images/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A6%82%E5%86%B5/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95006.jpg" alt="图片名称"></p><h3 id="adb简单使用"><a href="#adb简单使用" class="headerlink" title="adb简单使用"></a>adb简单使用</h3><p><img src="/images/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A6%82%E5%86%B5/adb001.jpg" alt="图片名称"><br><img src="/images/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A6%82%E5%86%B5/adb002.jpg" alt="图片名称"></p><h3 id="Monkey简单使用"><a href="#Monkey简单使用" class="headerlink" title="Monkey简单使用"></a>Monkey简单使用</h3><p><img src="/images/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A6%82%E5%86%B5/monkey001.jpg" alt="图片名称"><br><img src="/images/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A6%82%E5%86%B5/monkey002.jpg" alt="图片名称"><br><img src="/images/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A6%82%E5%86%B5/monkey003.jpg" alt="图片名称"></p>]]></content>
    
    
    <categories>
      
      <category>软件测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>像婴儿一样去学英语（To learn English like a baby）</title>
    <link href="/2019/07/07/home/%E5%83%8F%E5%A9%B4%E5%84%BF%E4%B8%80%E6%A0%B7%E5%8E%BB%E5%AD%A6%E8%8B%B1%E8%AF%AD/"/>
    <url>/2019/07/07/home/%E5%83%8F%E5%A9%B4%E5%84%BF%E4%B8%80%E6%A0%B7%E5%8E%BB%E5%AD%A6%E8%8B%B1%E8%AF%AD/</url>
    
    <content type="html"><![CDATA[<p>　</p><p>​     这个话题乍一听起来有点匪夷所思，怎么叫像婴儿一样去学英语呢？其实道理并不复杂。如今全中国有四亿英语学习者，花了几百亿人民币学英语，结果学的一塌糊涂。我们整天高呼讲一口流利的英语，那么有几个人能够真正做到讲一口“流利”的英语？就像我在前面一篇文章里说的，能否用英语思维是衡量英语水平的一个重要标准！换句话说，要想真正做到流利，做到“不假思索”的说英语，具备美语思维能力是非常重要的！</p><span id="more"></span><p>　　大家可能不相信，中国的这么多英语学习者大部分人英语说的都还没有美国的七八岁孩子说的好、说的流利！不是夸张，是事实！我每次去商场都能看见美国四、五岁的小孩操着流利的英语和他们的父母聊天。记得我刚到美国的时候有一天去沃尔玛买东西，无意间看到一个只有差不多五岁左右的小女孩拉着他爸爸的手说：“Daddy, I want spaghetti”，我当时一下子都没听懂，过了一会才想起来在《老友记》里面曾经听过spaghetti这个单词，表示“意大利面”的意思！这个单词写出来都不一定有很多人认识，但后来却了解到这其实是一个对美国人来说很普通的单词！我刚来的时候连Pizza这个单词都读错了（你们知道这个单词怎么读吗？），售货员都听不懂！不是我一个人读错了，而是我身边的很多中国学生都读错了！这些其实都是由于语言背后的环境和文化造成的，所以我们必须要改变我们学习英语的方法和态度！</p><p>　　那么为什么美国那么小的小孩都能轻松的讲出那么好的英语呢？同样的道理，我们为什么那么小就能讲出那么好的中国话？这也就引出了我要说的像婴儿一样学英语的几大要点：</p><p>　　1、忘记自己在学外语！<br>　　我们大部分人在学习英语的时候都是把它当成外语来学的，所以也就只有“外语”的水平。要想达到“母语”的水平就一定要觉得这就是我的母语！就像一个婴儿一样，接触的第一个语言就是他的母语，没有任何抵制，全方面的吸收。我们学习英语的时候也要学习这种精神，要忘记自己学习的是“外语”，甚至是“忘记”自己在学习英语，把学习英语当成一种习惯，把模仿当成一种潜意识，这将是你英语成功的开端！</p><p>　　2、忘记自己的英语水平！</p><p>　　我的很多朋友学英语的时候都会向我抱怨，说我都过了六级了可还是听不懂BBC，看不懂CNN，不看字幕就看不懂《老友记》，于是觉得很沮丧。其实这有什么呢？有哪个人一生下来就能听懂和说出英语的？有哪个人刚出生就掌握几万词汇的？不都是后天不断的努力吗？我们学学婴儿吧，婴儿听不懂的时候是不会哭的，因为他根本就不知道语言是怎么回事，小孩子长大后会讲英语了也不会鸣放鞭炮庆祝，因为这是很正常的事情，每个人都是这么过来的！所以不管你是初中生，还是过了六级的大学生，都请忘掉自己的英语水平，忘掉已经考过的证书，老老实实的像个婴儿一样一步步的去学，只有这样你才有可能走上英语成功之路。</p><p>　　3、忘记自己的脸面！<br>　　害怕丢脸，害怕犯错误是所有英语学习者的通病，而且往往越是年龄大的人越是如此！想一想我们在一两岁学说话的时候花了多长时间才说出“爸爸、妈妈”这样简单的词汇？我们有脸红吗？我们有感到羞愧吗？当然没有！因为我们根本就不知道什么叫丢脸，什么叫惭愧！而这恰恰就是语言学习的诀窍！所以从今天开始，不管我们的英语讲的有多么的烂，不管能不能听的懂，我们都不要害羞和气馁。我们要做的就是第一：接受现实，承认自己的不足；第二：忘掉脸面，老老实实的学习，把别人的嘲笑和打击当成空气，走自己的路，让别人羡慕去吧！</p><p>　　4、尽可能多的去接触英语！<br>　　婴儿从来不需要去买磁带练习听力，也不需要去找英语角练习口语；不是因为他不去练习听力，也不是因为他不去练口语，而是因为他一出生就有很多人在他耳边说英语，所以他把吸收的语言信号慢慢通过嘴巴反射出去，无形中每天都在练习口语！我们当然不可能去指望我们的父母和我们说英语，也不能指望我们的身边的朋友也和我们说英语，但我们需要自己自觉一点，要充分利用现有的资源，比如电视、广播、网络，来营造一个声音和文字的环境，同时抓住一切机会去用英语表达自己的思想，表达自己的感情！还是那句话，忘了自己在学英语，就当你在做一件极其普通的事情，不要把学英语搞的那么隆重，那么花哨。脚踏实地，终有一天会获得丰厚的回报！</p><p>　　5、尽可能的去学会用英语思维！<br>　　所谓的英语思维，更重要的是Think in American way！学习英语表达，学习由于文化差异带来的语言变化。有很多人会问，我现在已经养成了用汉语思维的习惯了，怎么还能用另一种语言思维呢？其实这就好像是电视机的频道一样，语言之间的切换就像频道之间的切换，是完全可以的。我在这里接触过很多中国小孩，他们遇到外国人就说着流利的英语，碰见中国人的时候又改成汉语，问他们，他们说都能用两种语言思维，只是不认得也不会写汉字。所以我们每天只要有可能，就让自己的思维切换到英语这个频道，用英语去思考问题，开始可能会比较痛苦，但一旦你真正的坚持下来（这是成功的唯一途径），你就会发现你的英语已经了不得了。</p><p>　　我提倡像婴儿一样学英语并不是真的把自己变成像婴儿那样弱智，而是因为婴儿学习语言的过程其实很值得我们大家学习和模仿！我最希望大家记住的一个概念就是忘记自己在学英语，就当这是你的母语！新东方少儿英语课的名称叫Pop英语，有一个含义就是让孩子“泡”在英语的学习的环境里面。我们也要尽可能的去接触英语，接触的越多越好！我们如果真的能具备婴儿学习语言时的那么多优秀品质，我想我们花在英语上的那么多精力和金钱就不会那么冤枉了。</p><p>本文转载至&lt;<a href="http://bbs.tianya.cn/post-english-211779-1.shtml">http://bbs.tianya.cn/post-english-211779-1.shtml</a></p>]]></content>
    
    
    <categories>
      
      <category>精神家园</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Englist</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>敏捷开发</title>
    <link href="/2019/07/07/test/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
    <url>/2019/07/07/test/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<p>敏捷开发初步了解</p><span id="more"></span><p>学习笔记记录</p><p><img src="/images/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91.jpg" alt="敏捷开发"></p>]]></content>
    
    
    <categories>
      
      <category>软件测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试计划</title>
    <link href="/2019/06/10/test/%E6%B5%8B%E8%AF%95%E8%AE%A1%E5%88%92/"/>
    <url>/2019/06/10/test/%E6%B5%8B%E8%AF%95%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<p>测试计划Testing plan，描述了要进行的测试活动的范围、方法、资源和进度的文档；是对整个信息系统应用软件组装测试和确认测试。它确定测试项、被测特性、测试任务、谁执行任务、各种可能的风险。测试计划可以有效预防计划的风险，保障计划的顺利实施。</p><span id="more"></span><h3 id="测试计划的目的"><a href="#测试计划的目的" class="headerlink" title="测试计划的目的"></a>测试计划的目的</h3><p>制定测试计划，要达到的目标如下：<br>（1）为测试各项活动制定一个现实可行的、综合的计划，包括每项测试活动的对象、范围、方法、进度和预期结果。<br>（2）为项目实施建立一个组织模型，并定义测试项目中每个角色的责任和工作内容。<br>（3）开发有效的测试模型，能正确地验证正在开发的软件系统。<br>（4）确定测试所需要的时间和资源，以保证其可获得性、有效性。<br>（5）确立每个测试阶段测试完成以及测试成功的标准、要实现的目标。<br>（6）识别出测试活动中各种风险，并消除可能存在的风险，降低由不可能消除的风险所带来的损失。</p><h3 id="测试计划的作用"><a href="#测试计划的作用" class="headerlink" title="测试计划的作用"></a>测试计划的作用</h3><p>测试计划通常分内部作用和外部作用，内部作用有以下3种：<br>（1）作为测试计划的结果，让相关人员和开发人员来评审。<br>（2）存储计划执行的细节，让测试人员进行同行评审。<br>（3）存储计划进度表、测试环境等更多的信息。<br>    测试计划的外部作用是为顾客提供一种信心，通常向顾客交代有关测试过程、人员的技能、资源、使用的工具等信息</p><h3 id="测试计划的思路"><a href="#测试计划的思路" class="headerlink" title="测试计划的思路"></a>测试计划的思路</h3><p><img src="/images/%E6%B5%8B%E8%AF%95%E8%AE%A1%E5%88%92/%E6%B5%8B%E8%AF%95%E8%AE%A1%E5%88%92.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>软件测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>写hexo博客不需要管理员权限</title>
    <link href="/2019/05/30/theme/%E5%86%99hexo%E5%8D%9A%E5%AE%A2%E4%B8%8D%E9%9C%80%E8%A6%81%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90/"/>
    <url>/2019/05/30/theme/%E5%86%99hexo%E5%8D%9A%E5%AE%A2%E4%B8%8D%E9%9C%80%E8%A6%81%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90/</url>
    
    <content type="html"><![CDATA[<p>每次写博客都需要管理员权限，虽然安全，但是不是很烦？今天找到一个方法解决这个问题。<br>博客文件夹source默认只有管理员权限才可以读写，<br>解决思路是把博客文件夹增加用户，并把权限修改为你需要的读写权限。</p><span id="more"></span><h4 id="解锁文件夹"><a href="#解锁文件夹" class="headerlink" title="解锁文件夹"></a>解锁文件夹</h4><p><img src="/images/%E5%86%99hexo%E5%8D%9A%E5%AE%A2%E4%B8%8D%E9%9C%80%E8%A6%81%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90/%E6%9D%83%E9%99%901.jpg" alt="图片"></p><h4 id="增加用户"><a href="#增加用户" class="headerlink" title="增加用户"></a>增加用户</h4><p><img src="/images/%E5%86%99hexo%E5%8D%9A%E5%AE%A2%E4%B8%8D%E9%9C%80%E8%A6%81%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90/%E6%9D%83%E9%99%902.jpg" alt="图片"></p><h4 id="修改账户权限"><a href="#修改账户权限" class="headerlink" title="修改账户权限"></a>修改账户权限</h4><p><img src="/images/%E5%86%99hexo%E5%8D%9A%E5%AE%A2%E4%B8%8D%E9%9C%80%E8%A6%81%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90/%E6%9D%83%E9%99%903.jpg" alt="图片"></p><h4 id="把权限应用到包含的项目"><a href="#把权限应用到包含的项目" class="headerlink" title="把权限应用到包含的项目"></a>把权限应用到包含的项目</h4><p><img src="/images/%E5%86%99hexo%E5%8D%9A%E5%AE%A2%E4%B8%8D%E9%9C%80%E8%A6%81%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90/%E6%9D%83%E9%99%904.jpg" alt="图片"></p><h4 id="确定"><a href="#确定" class="headerlink" title="确定"></a>确定</h4><p><img src="/images/%E5%86%99hexo%E5%8D%9A%E5%AE%A2%E4%B8%8D%E9%9C%80%E8%A6%81%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90/%E6%9D%83%E9%99%905.jpg" alt="图片"></p>]]></content>
    
    
    <categories>
      
      <category>建设博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何做好测试需求分析</title>
    <link href="/2019/05/26/test/%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E6%B5%8B%E8%AF%95%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/"/>
    <url>/2019/05/26/test/%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E6%B5%8B%E8%AF%95%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>怎么做需求分析?测试需求分析就是分析我们测试什么、如何测试的过程。通过完备的测试需求分析可以输出高质量的软件测试计划、软件测试方案、软件测试用例。</p><span id="more"></span><hr><h3 id="软件测试需求分析的一般步骤"><a href="#软件测试需求分析的一般步骤" class="headerlink" title="软件测试需求分析的一般步骤"></a><strong>软件测试需求分析的一般步骤</strong></h3><h4 id="1-测试需求收集"><a href="#1-测试需求收集" class="headerlink" title="1.测试需求收集"></a><strong>1.测试需求收集</strong></h4><p>通过需求文档了解需求的实现背景，按照业务场景制作流程图、思维导图。列出需求文档中的具有可测性的原始需求。最后生成一个以测试的观点出发的checklist（检查表），用来作为测试该软件的主要工作内容。检查表的检查要点包括需求的正确性、必要性、优先级、明确性、可测性、完整性、一致性、可修改性。</p><h4 id="2-分析需求合理性"><a href="#2-分析需求合理性" class="headerlink" title="2.分析需求合理性"></a><strong>2.分析需求合理性</strong></h4><p>通过业务知识来分析需求的合理性，需要我们有深厚的业务功底，然后在通过结合系统现有的实现来分析需求的合理性。</p><h4 id="3-确定测试的范围和优先级"><a href="#3-确定测试的范围和优先级" class="headerlink" title="3.确定测试的范围和优先级"></a><strong>3.确定测试的范围和优先级</strong></h4><p>确定需求所涉及的全部测试点，然后通过分析，测试范围的优先级。</p><h4 id="4-细化测试点并确定测试方法"><a href="#4-细化测试点并确定测试方法" class="headerlink" title="4.细化测试点并确定测试方法"></a><strong>4.细化测试点并确定测试方法</strong></h4><p>对每一条需求进行细化分解，形成可测试的分层描述的测试点，可以用MindManager列出个模块下的测试点，各模块或大的测试点需要写出对应的测试方法，或测试策略。删除测试需求中存在的重复的、冗余的含有关系的测试项。如果有类似的测试项，最终生成测试需求树。</p><p>是否需要性能测试、白盒测试，是否需要提前准备数据，或会遇到什么样的测试难点，采取怎样的应对措施。</p><h4 id="5-确定哪些工作测试人员可以提前介入"><a href="#5-确定哪些工作测试人员可以提前介入" class="headerlink" title="5.确定哪些工作测试人员可以提前介入"></a><strong>5.确定哪些工作测试人员可以提前介入</strong></h4><p>测试提前介入测试，规避了后面的测试的进度风险和质量风险。</p><h4 id="6-查缺补漏"><a href="#6-查缺补漏" class="headerlink" title="6.查缺补漏"></a><strong>6.查缺补漏</strong></h4><p>主要关注有没有场景需求没有考虑全面， 涉及的修改范围被遗漏了，以及一些特殊的关联配置没有考虑到的，另外如果需求做了一些变动也要及时补充需求分析，主要是分析变动可能带来的风险，以及准备哪些应对之策。</p><h3 id="需求分析的输出结果"><a href="#需求分析的输出结果" class="headerlink" title="需求分析的输出结果"></a>需求分析的输出结果</h3><p>需求来源分析的输出为《测试需求来源表》；</p><p>原始测试需求提取的输出为《原始测试需求表》；</p><p>原始测试需求分析的输出为《初始测试项表》；</p><p>测试特性分析的输出为《测试特性表》和《特性测试项表》</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><hr><p><a href="https://www.cnblogs.com/hanxiaomin/p/6132828.html">https://www.cnblogs.com/hanxiaomin/p/6132828.html</a></p><p><a href="https://blog.csdn.net/zhusongziye/article/details/79703982">https://blog.csdn.net/zhusongziye/article/details/79703982</a></p><p><a href="https://blog.csdn.net/fyx_testers/article/details/80871591">https://blog.csdn.net/fyx_testers/article/details/80871591</a></p><p><a href="http://blog.chinaunix.net/uid-26983585-id-5768907.html">http://blog.chinaunix.net/uid-26983585-id-5768907.html</a></p><p><strong>测试需求分析的常用的工程方法</strong> <a href="http://www.51testing.com/html/94/n-3718394.html&gt;">http://www.51testing.com/html/94/n-3718394.html&gt;</a></p>]]></content>
    
    
    <categories>
      
      <category>软件测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试用例那点事</title>
    <link href="/2019/05/23/test/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E9%82%A3%E7%82%B9%E4%BA%8B/"/>
    <url>/2019/05/23/test/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E9%82%A3%E7%82%B9%E4%BA%8B/</url>
    
    <content type="html"><![CDATA[<h4 id="用例设计"><a href="#用例设计" class="headerlink" title="用例设计"></a>用例设计</h4><p>前提，尽可能多的站在不同的角度分析问题。比如在运营维护、用户等角度来看待软件，分别针对性的设计测试用例，同时使用一些设计方法。</p><span id="more"></span><p>编写测试用例的两个途径  </p><blockquote><p>1 先有用例设计，从整个产品&#x2F;项目出发，先确定测试范围、测试目标，再细化范围到具体对象-&gt;具体功能，确定设计用例技术和测试方法，再来编写用例。<br>2 测试执行后-通过Bug反推 修改补充用例。两者相结合才会产出一份漂亮且有效的测试用例.</p></blockquote><h4 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h4><ul><li><p>完整覆盖需求</p></li><li><p>有清晰的输入输出</p></li><li><p>描述清晰简洁</p></li><li><p>编写有顺序</p></li><li><p>要突出重点</p></li><li><p>用例需要不断完善</p></li><li><p>每条用例都有通过的标准</p></li></ul><h4 id="用例具体内容"><a href="#用例具体内容" class="headerlink" title="用例具体内容"></a>用例具体内容</h4><p>1 用例编号<br>全局唯一，我们可以通过代号快速找到测试用例。<br>格式是：项目名模块名001，可以通过编号快速知道一个项目有多少用例，一个模块有多少用例。</p><p>2 用例标题</p><blockquote><p>目的:概述测试用例意图<br>书写方式：一句完整的话（不超过30个汉字）；功能简报形<br>例：电影详情页-返回<br>例：栏目-发布<br>例：电影-添加</p></blockquote><p>3 预置条件<br>书写要求：一个简洁的结果。</p><blockquote><p>用户已成功登陆<br>自动审核的开关已关</p></blockquote><p>4 测试步骤<br>书写要求：有顺序的可执行的操作</p><p>5 预期结果<br>书写要求：和测试步骤中点一一对应,可检查</p><p>6 测试数据<br>测试数据：测试时使用到的数据</p><h4 id="编写测试用例常见问题"><a href="#编写测试用例常见问题" class="headerlink" title="编写测试用例常见问题"></a>编写测试用例常见问题</h4><ul><li>用例标题意图不明确</li><li>用例中引用其他用例</li><li>用例中包含过多的细节</li><li>用例中出现笼统的词( 反复、多次 - 确定反复的具体次数&#x2F;范围； 长时间 - 确定长时间的具体时间&#x2F;范围； 大量 - 确定具体的数据量&#x2F;范围。)</li><li>用例中步骤不可执行</li><li>用例中期望结果不可验证</li></ul>]]></content>
    
    
    <categories>
      
      <category>软件测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件测试流程框架</title>
    <link href="/2019/05/22/test/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/"/>
    <url>/2019/05/22/test/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="武能动手敲代码，文能提笔写文档。"><a href="#武能动手敲代码，文能提笔写文档。" class="headerlink" title="武能动手敲代码，文能提笔写文档。"></a>武能动手敲代码，文能提笔写文档。</h3><p>一分钟了解软件测试这档事。</p><p>目录</p><span id="more"></span><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E7%9B%AE%E5%BD%95.jpg" alt="目录"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E7%9B%AE%E7%9A%84.jpg" alt="软件测试的目的"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E6%B5%8B%E8%AF%95%E5%88%86%E7%B1%BB.jpg" alt="测试分类"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E9%AA%8C%E6%94%B6%E6%B5%8B%E8%AF%95.jpg" alt="验收测试"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E5%8E%9F%E5%88%99.jpg" alt="软件测试的原则"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E5%BC%80%E5%8F%91%E7%80%91%E5%B8%83%E6%A8%A1%E5%9E%8B.jpg" alt="开发瀑布模型"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E7%80%91%E5%B8%83%E6%A8%A1%E5%9E%8B%E4%BC%98%E7%BC%BA%E7%82%B9.jpg" alt="瀑布模型优缺点"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95v%E6%A8%A1%E5%9E%8B.jpg" alt="软件测试v模型"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/v%E6%A8%A1%E5%9E%8B%E4%BC%98%E7%BC%BA%E7%82%B9.jpg" alt="v模型优缺点"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%BC%96%E5%86%99%E6%B5%81%E7%A8%8B.jpg" alt="测试用例编写流程"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90.jpg" alt="需求分析"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%902.jpg" alt="需求分析2"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E6%8F%90%E5%8F%96%E6%B5%8B%E8%AF%95%E7%82%B9.jpg" alt="提取测试点"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E5%8C%85%E5%90%AB%E5%93%AA%E4%BA%9B%E5%86%85%E5%AE%B9.jpg" alt="测试用例包含哪些内容"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%BC%96%E5%86%99%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.jpg" alt="测试用例编写注意事项"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%BC%96%E5%86%99%E6%96%B9%E6%B3%95.jpg" alt="测试用例编写方法"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E8%BE%B9%E7%95%8C%E5%80%BC%E5%88%86%E6%9E%90%E6%B3%95.jpg" alt="边界值分析法"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E7%94%A8%E4%BE%8B%E7%BC%96%E5%86%99%E6%96%B9%E6%B3%95%E5%9C%BA%E6%99%AF%E6%B3%95.jpg" alt="用例编写方法场景法"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E5%AE%9E%E4%BE%8B.jpg" alt="测试用例实例"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E8%AF%84%E5%AE%A1.jpg" alt="测试用例评审"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E8%AF%84%E5%AE%A12.jpg" alt="测试用例评审2"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%9A%84%E7%AE%A1%E7%90%86.jpg" alt="测试用例的管理"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%9A%84%E7%AE%A1%E7%90%862.jpg" alt="测试用例的管理2"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%9A%84%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.jpg" alt="测试用例的管理工具"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E8%BF%AD%E4%BB%A3%E6%B5%8B%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.jpg" alt="迭代测试常见问题"></p><p>测试计划<img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E6%B5%8B%E8%AF%95%E8%AE%A1%E5%88%92.jpg" alt="测试计划"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B8%B8%E7%94%A8%E6%AD%A5%E9%AA%A4.jpg" alt="功能测试常用步骤"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E7%9B%B8%E5%85%B3%E7%9A%84%E6%B5%8B%E8%AF%95%E7%B1%BB%E5%9E%8B.jpg" alt="相关的测试类型"></p>]]></content>
    
    
    <categories>
      
      <category>软件测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="/2019/05/21/home/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2019/05/21/home/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>第一篇博客开始了。。。</p><p>没有标题</p><hr><span id="more"></span><h1 id="为什么要写博客"><a href="#为什么要写博客" class="headerlink" title="为什么要写博客"></a>为什么要写博客</h1><p>​上周末花了我一天时间搭建个人博客，接下来花了一周多时间diy博客样式（业余时间），现在基本满意了，接下来就是最重要的事情了。</p><p>​不知道从什么时候开始的，我特别喜欢一个地方，特别喜欢。不管有事没事，就是喜欢在这里呆上一段时间，我把这种感觉称作”我的图书馆一小时”，在这里呆一会，一天工作的疲惫都烟消云散，一切烦恼都找不到了，就是那么惬意。都说环境会影响人，我以前不相信，现在又特别认同。有人说‘当你能同时接受两种不同的观点，就能理解这个复杂的世界了’，环境会影响人，在地铁上吵杂的环境里，我不能忍受。在图书馆这样的环境里，我时常会想，这里都有什么类型的人？也许他们和我一样，仅仅是需要这样的环境?在这里我不是每次都看书的，有时只是在这里坐一会，休息休息。我的很多决定都是在这里定下的。一小时随意的思考，能让我静下心来，能够自我反省，三省吾身。当然大多数时候，一小时是不够用的，但每次来最少一小时。</p><p>​越来越觉得时间不够用，能来这里待一会都很难得。以前喜欢自己写写画画，涂鸦生活琐事，从来没有想过公开。现在越来越觉的写博客的重要性，把作品展示出来的重要性，只有这样才能让我遇到和我一样的人，分享、交流，生命才更有意义。其实我也没想好具体些什么？我想，写什么都不重要，重要的是直接开始吧，今天作为一个开始，写给几十年后的自己看，我想那时的我会为现在的自己感到自豪的。</p>]]></content>
    
    
    <categories>
      
      <category>精神家园</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Yilia 主题接入valine评论系统</title>
    <link href="/2019/05/18/theme/yilia%E6%8E%A5%E5%85%A5valine%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <url>/2019/05/18/theme/yilia%E6%8E%A5%E5%85%A5valine%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>搭建博客的时候 想要接入一个评论功能,查了很多资料，终于找到一个方案，做个记录方便自己方便他人。<br>1.多说（现在已经不能用）<br>2.网易云跟帖（现在已经不能用）<br>3.畅言（需要提供备案号）<br>4.来必力（LiveRe）<br>5.Disqus<br>6.Hypercomments<br>7.Valine<br>最后选用valine这个插件，就因为它简洁</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>1.去valine注册一个账号<a href="https://leancloud.cn/dashboard/login.html#/signup%EF%BC%8C%E6%B3%A8%E5%86%8C%E6%88%90%E5%8A%9F%E4%B9%8B%E5%90%8E%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%85%8D%E8%B4%B9%E7%9A%84%E5%BA%94%E7%94%A8">https://leancloud.cn/dashboard/login.html#/signup，注册成功之后创建一个免费的应用</a><br>2.创建好之后进入创建的应用，选择左下角的设置&gt;应用Key，然后就能看到你的appid和appkey<br>3.在应用里面的安全中心加入自己的域名。</p><h3 id="加入代码"><a href="#加入代码" class="headerlink" title="加入代码"></a>加入代码</h3><p>1.在hexo加入valine的评论配置</p><p>加入代码的文件在hexo的 themes&#x2F;yilia&#x2F;_config.yml 加到文件的最后即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">valine:</span> <br>  <span class="hljs-attr">appid:</span> <span class="hljs-string">5Luh2LTjNL7BdW3tUc6gN2Yb-gzGzoHsz</span> <span class="hljs-comment">#Leancloud应用的appId</span><br>  <span class="hljs-attr">appkey:</span> <span class="hljs-string">ySLSX2eHHgjme7X8QzLU6YYL</span> <span class="hljs-comment">#Leancloud应用的appKey</span><br>  <span class="hljs-attr">verify:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#验证码</span><br>  <span class="hljs-attr">notify:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#评论回复提醒</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">mm</span> <span class="hljs-comment">#评论列表头像样式：&#x27;&#x27;/mm/identicon/monsterid/wavatar/retro/hide</span><br>  <span class="hljs-attr">placeholder:</span> <span class="hljs-string">ヾﾉ≧∀≦)o来啊，快活啊!</span> <span class="hljs-comment">#评论框占位符</span><br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>2.然后在hexo的 themes&#x2F;yilia&#x2F;layout&#x2F;_partial&#x2F;article.ejs加入代码</p><blockquote><p>注意这段代码需要放置到&lt;% if (!index &amp;&amp; post.comments){ %&gt;中, 这样首页就不会出现评论栏. </p></blockquote><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="language-xml">&lt;%</span><span class="language-ruby"> <span class="hljs-keyword">if</span> (theme.valine &amp;&amp; theme.valine.appid &amp;&amp; theme.valine.appkey)&#123; </span><span class="language-xml">%&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;comments&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;comments&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-selector-class">.comments</span>&#123;<span class="hljs-attribute">margin</span>:<span class="hljs-number">30px</span>;<span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span>;<span class="hljs-attribute">background</span>:<span class="hljs-number">#fff</span>&#125;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>:<span class="hljs-number">800px</span>)&#123;<span class="hljs-selector-class">.comments</span>&#123;<span class="hljs-attribute">margin</span>:auto;<span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span>;<span class="hljs-attribute">background</span>:<span class="hljs-number">#fff</span>&#125;&#125;</span></span><br><span class="language-css"><span class="language-xml">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml">      &lt;%-</span><span class="language-ruby"> partial(<span class="hljs-string">&#x27;post/valine&#x27;</span>, &#123;</span><br><span class="language-ruby">        <span class="hljs-symbol">key:</span> post.slug,</span><br><span class="language-ruby">        <span class="hljs-symbol">title:</span> post.title,</span><br><span class="language-ruby">        <span class="hljs-symbol">url:</span> config.url+url_for(post.path)</span><br><span class="language-ruby">        &#125;) </span><span class="language-xml">%&gt;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">&lt;%</span><span class="language-ruby"> &#125; </span><span class="language-xml">%&gt;</span><br></code></pre></td></tr></table></figure><p>或者直接把下面这段放到文件的最后</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="language-xml">&lt;%</span><span class="language-perl"> <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">index</span>)&#123; </span><span class="language-xml">%&gt;</span><br><span class="language-xml">&lt;%</span><span class="language-perl"> <span class="hljs-keyword">if</span> (theme.valine &amp;&amp; theme.valine.appid &amp;&amp; theme.valine.appkey)&#123; </span><span class="language-xml">%&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;comments&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;comments&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-selector-class">.comments</span>&#123;<span class="hljs-attribute">margin</span>:<span class="hljs-number">30px</span>;<span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span>;<span class="hljs-attribute">background</span>:<span class="hljs-number">#fff</span>&#125;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>:<span class="hljs-number">800px</span>)&#123;<span class="hljs-selector-class">.comments</span>&#123;<span class="hljs-attribute">margin</span>:auto;<span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span>;<span class="hljs-attribute">background</span>:<span class="hljs-number">#fff</span>&#125;&#125;</span></span><br><span class="language-css"><span class="language-xml">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml">      &lt;%</span><span class="language-perl">- partial(<span class="hljs-string">&#x27;post/valine&#x27;</span>, &#123;</span><br><span class="language-perl">        key: post.slug,</span><br><span class="language-perl">        title: post.title,</span><br><span class="language-perl">        url: config.url+url_for(post.path)</span><br><span class="language-perl">        &#125;) </span><span class="language-xml">%&gt;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">&lt;%</span><span class="language-perl"> &#125; </span><span class="language-xml">%&gt;</span><br><span class="language-xml">&lt;%</span><span class="language-perl"> &#125; </span><span class="language-xml">%&gt;</span><br></code></pre></td></tr></table></figure><p>3.在hexo的 themes&#x2F;yilia&#x2F;layout&#x2F;_partial&#x2F;post中创建valine.ejs文件并加入代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vcomment&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;comment&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;//unpkg.com/valine/dist/Valine.min.js&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdnjs.loli.net/ajax/libs/jquery/3.2.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> notify = <span class="hljs-string">&#x27;&lt;%= theme.valine.notify %&gt;&#x27;</span> == <span class="hljs-literal">true</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> verify = <span class="hljs-string">&#x27;&lt;%= theme.valine.verify %&gt;&#x27;</span> == <span class="hljs-literal">true</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Valine</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">av</span>: <span class="hljs-variable constant_">AV</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#vcomment&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">notify</span>: notify,</span><br><span class="language-javascript">        <span class="hljs-attr">app_id</span>: <span class="hljs-string">&quot;&lt;%= theme.valine.appid %&gt;&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">app_key</span>: <span class="hljs-string">&quot;&lt;%= theme.valine.appkey %&gt;&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">placeholder</span>: <span class="hljs-string">&quot;&lt;%= theme.valine.placeholder %&gt;&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">avatar</span>:<span class="hljs-string">&quot;&lt;%= theme.valine.avatar %&gt;&quot;</span>,</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4.最后重新部署一下, 就能看到效果了</p>]]></content>
    
    
    <categories>
      
      <category>建设博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Yilia 主题自定义404页面</title>
    <link href="/2019/05/17/theme/yilia%E8%87%AA%E5%AE%9A%E4%B9%89404%E9%A1%B5%E9%9D%A2/"/>
    <url>/2019/05/17/theme/yilia%E8%87%AA%E5%AE%9A%E4%B9%89404%E9%A1%B5%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<ol><li>新建一个文件，文件名”404.html”</li><li>编辑放入下面内容保存，以腾讯404公益界面为例</li></ol><span id="more"></span><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml">---<br>title: 404 Not Found：该页无法显示<br>toc: false<br>comments: false<br>permalink: /404.html<br>---<br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>404<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>                                                                                                                                        <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot;</span> <span class="hljs-attr">homePageName</span>=<span class="hljs-string">&quot;返回首页&quot;</span> <span class="hljs-attr">homePageUrl</span>=<span class="hljs-string">&quot;你的网址&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ol start="3"><li>把此文件放到blog的source文件夹里，重新把网址部署到服务器或github</li></ol><p>展示效果<br><img src="/images/hexo-yilia%E8%87%AA%E5%AE%9A%E4%B9%89404%E9%A1%B5%E9%9D%A2/404.jpg" alt="404"></p>]]></content>
    
    
    <categories>
      
      <category>建设博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Yilia 主题添加照片-视频-音乐</title>
    <link href="/2019/05/16/theme/yilia%E6%B7%BB%E5%8A%A0%E7%85%A7%E7%89%87-%E8%A7%86%E9%A2%91-%E9%9F%B3%E4%B9%90/"/>
    <url>/2019/05/16/theme/yilia%E6%B7%BB%E5%8A%A0%E7%85%A7%E7%89%87-%E8%A7%86%E9%A2%91-%E9%9F%B3%E4%B9%90/</url>
    
    <content type="html"><![CDATA[<h2 id="一-添加照片"><a href="#一-添加照片" class="headerlink" title="一. 添加照片"></a>一. 添加照片</h2><hr><ol><li>第一种，上传本地的：在hexo创建的博客目录下的source中建立一个images文件夹专门放图片，images的路径：你的博客目录source&#x2F;images ,新建页面</li></ol><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> <span class="hljs-string">&quot;photo&quot;</span><br></code></pre></td></tr></table></figure><span id="more"></span><ol start="2"><li>第二种</li></ol><ul><li><p>设置站点配置_config.yml:将post_asset_folder: false改为post_asset_folder: true_</p></li><li><p>*安装插件:npm install <a href="https://github.com/CodeFalling/hexo-asset-image">https://github.com/CodeFalling/hexo-asset-image</a> – save</p></li><li><p>运行hexo n “XXXXXX”,生成XXXXX.md博文时就会在&#x2F;source&#x2F;_posts目录下生成XXXXXX的文件夹，将你想XXXXX博文中插入的照片放置到这个同名文件夹中即可，图片的命名随意。</p></li><li><p>添加图片:在想添加的位置写入</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[图片名称]</span>(图片文件名)<br></code></pre></td></tr></table></figure><p>例如:可爱的小猫咪</p><p><img src="/images/hexo-yilia%E6%B7%BB%E5%8A%A0%E7%85%A7%E7%89%87-%E8%A7%86%E9%A2%91-%E9%9F%B3%E4%B9%90/%E6%BC%94%E7%A4%BA%E7%85%A7%E7%89%87.jpg" alt="演示照片"></p></li></ul><h2 id="二-添加视频"><a href="#二-添加视频" class="headerlink" title="二. 添加视频"></a>二. 添加视频</h2><hr><ol><li>打开当前博客source\ 新建video文件夹，在video下的新建ins.css文件</li><li>编辑ins.css 文件，添加以下内容</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* ====== video ===== */</span><br><span class="hljs-selector-class">.video-container</span> &#123;<br><span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;<br><span class="hljs-attribute">position</span>: relative;<br><span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">56.25%</span>;<br><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>&#125;<br><span class="hljs-selector-class">.video-container</span> <span class="hljs-selector-tag">iframe</span>, <span class="hljs-selector-class">.video-container</span> <span class="hljs-selector-tag">object</span>, <span class="hljs-selector-class">.video-container</span> embed &#123;<span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;<span class="hljs-attribute">position</span>: absolute;<span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<span class="hljs-attribute">left</span>: <span class="hljs-number">7%</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">85%</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">85%</span>;<span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">20px</span> <span class="hljs-number">2px</span> <span class="hljs-number">#888888</span>;&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>在  source\video 下新建文件 index.md , 编辑添加以下内容<br>hexo new page “video”</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">视频</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-05-13 22:17:49</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-comment">## 每个人都离不开的那张网</span><br><br><span class="hljs-string">&lt;link</span> <span class="hljs-string">rel=&quot;stylesheet&quot;</span> <span class="hljs-string">href=&quot;./ins.css&quot;&gt;</span><br><span class="hljs-string">&lt;center&gt;</span><br><span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;video-container&quot;&gt;</span><br><span class="hljs-string">&lt;iframe</span>  <span class="hljs-string">src=&quot;//player.bilibili.com/player.html?aid=52117681&amp;cid=91234704&amp;page=1&quot;</span>  <span class="hljs-string">allowfullscreen=&quot;true&quot;&gt;</span><br><span class="hljs-string">&lt;/iframe&gt;</span><br><span class="hljs-string">&lt;/div&gt;</span><br><span class="hljs-string">&lt;/center&gt;</span><br></code></pre></td></tr></table></figure><h2 id="三-添加音乐"><a href="#三-添加音乐" class="headerlink" title="三. 添加音乐"></a>三. 添加音乐</h2><hr><p>添加网页音乐</p><p>1、 打开网易云音乐首页，然后搜索你要添加的背景音乐<br>2、 搜索到歌曲点击生成外链播放器，进去下一个界面</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;iframe <span class="hljs-attribute">frameborder</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attribute">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">marginwidth</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">marginheight</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">width</span>=298 <span class="hljs-attribute">height</span>=52 <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;//music.163.com/outchain/player?type=0&amp;id=2579685854&amp;auto=0&amp;height=32&quot;</span>&gt;&lt;/iframe&gt;<br></code></pre></td></tr></table></figure><p>3、 复制外链播放器的代码<br>打开yilia主题下的layout&#x2F;_partial文件夹下的left-col.ejs文件<br>vim themes&#x2F;yilia&#x2F;layout&#x2F;_partial&#x2F;left-col.ejs<br>复制文件内容到最下端</p><p>注：调节播放器大小，改变外链播放器的代码块，长度宽度即可<br>width&#x3D;260 height&#x3D;86</p>]]></content>
    
    
    <categories>
      
      <category>建设博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Yilia 主题添加字数统计和阅读时长功能</title>
    <link href="/2019/05/15/theme/yilia%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E5%92%8C%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF%E5%8A%9F%E8%83%BD/"/>
    <url>/2019/05/15/theme/yilia%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E5%92%8C%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<ol><li><p>安装 hexo-wordcount在博客目录下打开Git Bash Here 输入命令</p> <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i –save hexo-wordcount<br></code></pre></td></tr></table></figure> <span id="more"></span></li><li><p>文件配置在theme\yilia\layout_partial\post下创建word.ejs文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top:10px;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-time&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-meta-item-icon&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-keyboard-o&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-meta-item-text&quot;</span>&gt;</span>  字数统计: <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-count&quot;</span>&gt;</span>&lt;%= wordcount(post.content) %&gt;字<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-time&quot;</span>&gt;</span><br>      <span class="hljs-symbol">&amp;nbsp;</span> | <span class="hljs-symbol">&amp;nbsp;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-meta-item-icon&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-hourglass-half&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-meta-item-text&quot;</span>&gt;</span>  阅读时长: <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-count&quot;</span>&gt;</span>&lt;%= min2read(post.content) %&gt;分<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>然后在 themes&#x2F;yilia&#x2F;layout&#x2F;_partial&#x2F;article.ejs中添加</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&lt;div class=<span class="hljs-string">&quot;article-inner&quot;</span>&gt;<br>    &lt;<span class="hljs-meta">%</span> <span class="hljs-keyword">if</span> <span class="hljs-comment">(post.link || post.title)</span>&#123; <span class="hljs-meta">%</span>&gt;<br>      &lt;header class=<span class="hljs-string">&quot;article-header&quot;</span>&gt;<br>        &lt;<span class="hljs-meta">%</span>- partial<span class="hljs-comment">(&#x27;post/title&#x27;, &#123;class_name: &#x27;article-title&#x27;&#125;)</span> <span class="hljs-meta">%</span>&gt;<br>        &lt;<span class="hljs-meta">%</span> <span class="hljs-keyword">if</span> <span class="hljs-comment">(!post.noDate)</span>&#123; <span class="hljs-meta">%</span>&gt;<br>        &lt;<span class="hljs-meta">%</span>- partial<span class="hljs-comment">(&#x27;post/date&#x27;, &#123;class_name: &#x27;archive-article-date&#x27;, date_format: null&#125;)</span> <span class="hljs-meta">%</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">  <span class="hljs-comment">&lt;!-- 需要添加的位置 --&gt;</span></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 开始添加字数统计--&gt;</span></span><br><span class="language-xml">  &lt;% if(theme.word_count &amp;&amp; !post.no_word_count)</span><span class="hljs-template-variable">&#123;%&gt;</span><br><span class="hljs-template-variable">    &lt;%- partial(&#x27;post/word&#x27;) %&gt;</span><br><span class="hljs-template-variable">    &lt;% &#125;</span><span class="language-xml"> %&gt;</span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 添加完成 --&gt;</span></span><br><span class="language-xml">    </span><br><span class="language-xml">  &lt;% &#125; %&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure></li><li><p>添加阅读统计：使用不蒜子统计,修改</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="language-xml"><span class="hljs-comment">&lt;!-- 开始添加字数统计--&gt;</span></span><br><span class="language-xml">&lt;%</span><span class="language-ruby"> <span class="hljs-keyword">if</span>(theme.word_count &amp;&amp; !post.no_word_count)&#123;</span><span class="language-xml">%&gt;</span><br><span class="language-xml">  &lt;%-</span><span class="language-ruby"> partial(<span class="hljs-string">&#x27;post/word&#x27;</span>) </span><span class="language-xml">%&gt;</span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 开始添加阅读量统计--&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_container_page_pv&quot;</span>&gt;</span></span><br><span class="language-xml">    阅读统计：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_value_page_pv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>次</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 结束添加--&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  &lt;%</span><span class="language-ruby"> &#125; </span><span class="language-xml">%&gt;</span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 添加完成 --&gt;</span>   </span><br></code></pre></td></tr></table></figure></li><li><p>开启功能在站点的_config.yml中添加下面代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 是否开启字数统计</span><br><span class="hljs-comment">#不需要使用，直接设置值为false，或注释掉</span><br><span class="hljs-attr">word_count:</span> <span class="hljs-literal">True</span><br><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>建设博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Yilia 主题显示站点总访问量-单页面访问量</title>
    <link href="/2019/05/15/theme/Yilia%E6%98%BE%E7%A4%BA%E7%AB%99%E7%82%B9%E6%80%BB%E8%AE%BF%E9%97%AE%E9%87%8F-%E5%8D%95%E9%A1%B5%E9%9D%A2%E8%AE%BF%E9%97%AE%E9%87%8F/"/>
    <url>/2019/05/15/theme/Yilia%E6%98%BE%E7%A4%BA%E7%AB%99%E7%82%B9%E6%80%BB%E8%AE%BF%E9%97%AE%E9%87%8F-%E5%8D%95%E9%A1%B5%E9%9D%A2%E8%AE%BF%E9%97%AE%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>普通用户只需两步走：一行脚本+一行标签，搞定一切。追求极致的用户可以进行任意DIY。</p><p>一、安装脚本（必选）<br>要使用不蒜子必须在页面中引入busuanzi.js，目前最新版如下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><span id="more"></span><p>打开themes&#x2F;你的主题&#x2F;layout&#x2F;_partial&#x2F;footer.ejs添加上述脚本即可(放在最后即可)，当然你也可以添加到 header 中。</p><p>二、安装标签（可选）<br>只需要复制相应的html标签到你的网站要显示访问量的位置即可。您可以随意更改不蒜子标签为自己喜欢的显示效果，内容参考第三部分扩展开发。根据你要显示内容的不同，这分几种情况。</p><p>1、显示站点总访问量<br>要显示站点总访问量，复制以下代码添加到你需要显示的位置。有两种算法可选：</p><p>算法a：pv的方式，单个用户连续点击n篇文章，记录n次访问量。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span><br>    本站总访问量<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>次<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>算法b：uv的方式，单个用户连续点击n篇文章，只记录1次访客数。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_container_site_uv&quot;</span>&gt;</span><br>  本站访客数<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>人次<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>打开themes&#x2F;你的主题&#x2F;layout&#x2F;_partial&#x2F;footer.ejs添加即可。</p><p>2、显示单页面访问量<br>要显示每篇文章的访问量，复制以下代码添加到你需要显示的位置。</p><p>算法：pv的方式，单个用户点击1篇文章，本篇文章记录1次阅读量。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_container_page_pv&quot;</span>&gt;</span><br>  本文总阅读量<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_value_page_pv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>次<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>代码中文字是可以修改的，只要保留id正确即可。</p><blockquote><p>注意使用hexo s部署在本地预览效果的时候，uv数和pv数会过大，这是由于不蒜子用户使用一个存储空间，所以使用localhost:4000进行本地预览的时候会导致数字异常，这是正常现象，只需要将博客部署至云端即可恢复正常。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>建设博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有效沟通</title>
    <link href="/2019/05/13/home/%E6%9C%89%E6%95%88%E6%B2%9F%E9%80%9A/"/>
    <url>/2019/05/13/home/%E6%9C%89%E6%95%88%E6%B2%9F%E9%80%9A/</url>
    
    <content type="html"><![CDATA[<p>每天都在沟通，究竟怎样才算是有效的沟通？不管你使用英语、法语、汉语、还是手语都不重要，因为这些都只是沟通的工具罢了。达到沟通本身的目的才是有效沟通，才是沟通的意义所在。</p><span id="more"></span><p>学过计算机网络的都知道，计算机的通信永远要得到对方的一个确认信息，才算完成，而不是说发出信息就完事了。这个笨办法，虽然看似降低了一点点通信效率，但是使得计算机之间的通信非常可靠。人与人之间的通信通常不是这样的，说话的人把话说完，就以为完成了通信，并不管对方是否真的接收了我们传递的信息，或者理解了那些信息的含义。你经常会在一个单位里看到这样的情景，张三让李四去完成一件事，但是过了一段时间，发现李四根本没有开始做。并非李四不愿意做，而是他们之间的沟通出现了问题，李四根本就没在意张三说了什么，或者没有听懂张三的意思。很多时候，工作中的争吵就是由这样的小误会引起的。</p><p>解决这些问题的根本方法，就是进行有效的沟通，确认对方明白了你的意思，然后确认对方是答应你了，还是拒绝你了，不论什么结果，你总要有结论，到此，通信才算结束。这里的“确认”是信息发出人需要主动进行判断“对方”是否明白了你的意思，判断“对方”给你的反馈是否是你需要的还是你不需要的？如果这些都不能确认下来，就说明前面的沟通都是无效的沟通。沟通要以确信对方真正接收到了你传达的信息和信息的含义，才算结束。</p><p>既然沟通要以对方了解你的意思为目的，那么在表达自己的意思时，就需要在你和对方共同认知的基础上讨论那些问题，或者说，要用对方能听得懂，马上理解的语言进行讨论。顾维钧先生是一个很优秀的外交家，他在 1919 年的巴黎和会上向西方国家的代表讲述山东省对中国的重要性时(当时日本想把山东省变成它的殖民地)，用了一个很简单的例子大家就都明白了。顾先生说，孔子对中国人来说，相当于耶稣对西方人一样重要。西方人一直把耶稣的出生地耶路撒冷作为圣地，并且上千年了一直要夺回那个地方。山东是孔子的出生地，它在中国人心中的地位就相当于耶路撒冷在西方人心中的地位。他短短的几句话，就把意思说明白了。对方能听懂，不是因为对山东和孔子有多么熟悉，而是因为熟知耶路撒冷和耶稣。</p><p>既然沟通要以对方了解你的意思为目的，那么在表达自己的意思时，就要用对方能听得懂，马上理解的语言进行讨论。与人有效沟通，重点不在于证明自己正确，而在于达到沟通的目的。智能工具柜的“RFID读卡器”自身的网线接口不能使用，也就是它的网线接口在“RFID读卡器”出厂时就存在问题。我申请反馈换料时的原因描述一览这样写道：“网线接口不能使用”库管收到信息后问我：“是读卡器的技术规格不满足我门的设计要求不能使用？还是读卡器本身不合格存在问题不能使用？还是安装时损毁了不能使用？”我觉得我描述的很清楚了，但是实际情况是对方没有收到我想表达的信息。这时我不但不详细解释而且还和他争辩一番，以证明自己说的没错。争论半天即耽误时间又影响心情，事后想想很不值得。</p><p>既然沟通要以对方了解你的意思为目的，那么在表达自己的意思时，就要开门见山，简洁明了。很多人认为，自己讲的越多，对方接收的信息也越多。其实，如果废话太多，对方根本搞不清你要说什么，沟通的效果为零。更何况在通信中，多少会有点儿噪声， 话多了，难免词不达意，让人误解，这就是噪声。</p><p>总结：第一有效的沟通要以对方的确认为准，不要以为话说出去了，别人就一定接收了你传递的信息；第二要以对方听得懂的话来沟通，切忌卖弄自己的知识， 把简单的问题讲复杂了。第三，沟通要简洁，切中要害。</p>]]></content>
    
    
    <categories>
      
      <category>精神家园</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode快捷键</title>
    <link href="/2019/05/13/tools/vscode%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2019/05/13/tools/vscode%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<p>基本编辑＃<br>键命令命令ID<br>⌘X剪切线（空选）editor.action.clipboardCutAction<br>⌘C复制行（空选）editor.action.clipboardCopyAction<br>⇧⌘K删除行editor.action.deleteLines<br>⌘Enter在下面插入行editor.action.insertLineAfter<br>⇧⌘Enter在上方插入线条editor.action.insertLineBefore<br>⌥↓向下移动线editor.action.moveLinesDownAction<br>⌥↑向上移动editor.action.moveLinesUpAction<br>⇧⌥↓复制线下editor.action.copyLinesDownAction</p><span id="more"></span><p>⇧⌥↑复制排队editor.action.copyLinesUpAction<br>⌘D添加选择到下一个查找匹配editor.action.addSelectionToNextFindMatch<br>⌘K⌘D将上一个选择移到下一个查找匹配editor.action.moveSelectionToNextFindMatch<br>⌘U撤消上一个光标操作cursorUndo<br>⇧⌥I将光标插入所选每行的末尾editor.action.insertCursorAtEndOfEachLineSelected<br>⇧⌘L选择所有出现的当前选择editor.action.selectHighlights<br>⌘F2选择所有出现的当前单词editor.action.changeAll<br>⌘L选择当前行expandLineSelection<br>⌥⌘↓在下面插入光标editor.action.insertCursorBelow<br>⌥⌘↑在上方插入光标editor.action.insertCursorAbove<br>⇧⌘\跳转到匹配的括号editor.action.jumpToBracket<br>⌘]缩进线editor.action.indentLines<br>⌘[Outdent Lineeditor.action.outdentLines<br>家转到行首cursorHome<br>结束转到行尾cursorEnd<br>⌘↓转到文件结尾cursorBottom<br>⌘↑转到文件的开头cursorTop<br>^PageDown向下滚动线scrollLineDown<br>^PageUp滚动排队scrollLineUp<br>⌘PageDown向下滚动页面scrollPageDown<br>⌘PageUp向上滚动页面scrollPageUp<br>⌥⌘[折叠（折叠）区域editor.fold<br>⌥⌘]展开（uncollapse）区域editor.unfold<br>⌘K⌘[折叠（折叠）所有次区域editor.foldRecursively<br>⌘K⌘]展开（展开）所有子区域editor.unfoldRecursively<br>⌘K⌘0折叠（折叠）所有区域editor.foldAll<br>⌘K⌘J展开（展开）所有区域editor.unfoldAll<br>⌘K⌘C添加行注释editor.action.addCommentLine<br>⌘K⌘U删除行注释editor.action.removeCommentLine<br>⌘&#x2F;切换线评论editor.action.commentLine<br>⇧⌥A切换块评论editor.action.blockComment<br>⌘F找actions.find<br>⌥⌘F更换editor.action.startFindReplaceAction<br>⌘G找下一个editor.action.nextMatchFindAction<br>⇧⌘G找到上一个editor.action.previousMatchFindAction<br>⌥Enter选择查找匹配的所有出现次数editor.action.selectAllMatches<br>⌥⌘C切换查找区分大小写toggleFindCaseSensitive<br>⌥⌘R切换查找正则表达式toggleFindRegex<br>⌥⌘W切换查找整个单词toggleFindWholeWord<br>^⇧M切换使用Tab键设置焦点editor.action.toggleTabFocusMode<br>未分配切换渲染空白toggleRenderWhitespace<br>⌥Z切换Word Wrapeditor.action.toggleWordWrap<br>丰富的语言编辑<br>键命令命令ID<br>^Space触发建议editor.action.triggerSuggest<br>⇧⌘Space触发参数提示editor.action.triggerParameterHints<br>⇧⌥F格式文档editor.action.formatDocument<br>⌘K⌘F格式选择editor.action.formatSelection<br>F12转到定义editor.action.revealDefinition<br>⌘K⌘I显示悬停editor.action.showHover<br>⌥F12窥视定义editor.action.peekDefinition<br>⌘KF12打开定义到一边editor.action.revealDefinitionAside<br>⌘。快速解决editor.action.quickFix<br>⇧F12窥视参考editor.action.referenceSearch.trigger<br>F2重命名符号editor.action.rename<br>⇧⌘。替换为下一个值editor.action.inPlaceReplace.down<br>⇧⌘，替换为以前的值editor.action.inPlaceReplace.up<br>^⇧⌘→展开AST选择editor.action.smartSelect.expand<br>^⇧⌘←收缩AST选择editor.action.smartSelect.shrink<br>⌘K⌘X修剪尾随空格editor.action.trimTrailingWhitespace<br>⌘KM更改语言模式workbench.action.editor.changeLanguageMode<br>导航<br>键命令命令ID<br>⌘T显示所有符号workbench.action.showAllSymbols<br>^G去线…workbench.action.gotoLine<br>⌘P转到文件…，快速打开workbench.action.quickOpen<br>⇧⌘O转到符号…workbench.action.gotoSymbol<br>⇧⌘M显示问题workbench.actions.view.problems<br>F8转到下一个错误或警告editor.action.marker.nextInFiles<br>⇧F8转到上一个错误或警告editor.action.marker.prevInFiles<br>⇧⌘P显示所有命令workbench.action.showCommands<br>^⇧Tab导航编辑器组历史记录workbench.action.openPreviousRecentlyUsedEditorInGroup<br>^-回去workbench.action.navigateBack<br>^-返回快速输入workbench.action.quickInputBack<br>^⇧-直走workbench.action.navigateForward<br>编辑&#x2F;窗口管理<br>键命令命令ID<br>⇧⌘N新窗户workbench.action.newWindow<br>⇧⌘W关闭窗口workbench.action.closeWindow<br>⌘W关闭编辑器workbench.action.closeActiveEditor<br>⌘KF关闭文件夹workbench.action.closeFolder<br>未分配在编辑器组之间循环workbench.action.navigateEditorGroups<br>⌘\拆分编辑器workbench.action.splitEditor<br>⌘1专注于第一编辑组workbench.action.focusFirstEditorGroup<br>⌘2专注于第二编辑组workbench.action.focusSecondEditorGroup<br>⌘3专注于第三编辑组workbench.action.focusThirdEditorGroup<br>未分配专注于左派编辑组workbench.action.focusPreviousGroup<br>未分配专注于权利编辑组workbench.action.focusNextGroup<br>⌘K⇧⌘←向左移动编辑器workbench.action.moveEditorLeftInGroup<br>⌘K⇧⌘→向右移动编辑器workbench.action.moveEditorRightInGroup<br>⌘K←向左移动活动编辑器组workbench.action.moveActiveEditorGroupLeft<br>⌘K→将Active Editor Group右移workbench.action.moveActiveEditorGroupRight<br>^⌘→将编辑器移动到下一组workbench.action.moveEditorToNextGroup<br>^⌘←将编辑器移动到上一组workbench.action.moveEditorToPreviousGroup<br>文件管理<br>键命令命令ID<br>⌘N新文件workbench.action.files.newUntitledFile<br>未分配打开文件…workbench.action.files.openFile<br>⌘S保存workbench.action.files.save<br>⌥⌘S保存全部workbench.action.files.saveAll<br>⇧⌘S另存为…workbench.action.files.saveAs<br>⌘W关workbench.action.closeActiveEditor<br>⌥⌘T关闭他人workbench.action.closeOtherEditors<br>⌘KW关闭组workbench.action.closeEditorsInGroup<br>未分配关闭其他组workbench.action.closeEditorsInOtherGroups<br>未分配关闭组左侧workbench.action.closeEditorsToTheLeft<br>未分配关闭组到右workbench.action.closeEditorsToTheRight<br>⌘K⌘W关闭所有workbench.action.closeAllEditors<br>⇧⌘T重新打开封闭编辑器workbench.action.reopenClosedEditor<br>⌘K输入保持开放workbench.action.keepEditor<br>^Tab打开下一步workbench.action.openNextRecentlyUsedEditorInGroup<br>^⇧Tab打开上一个workbench.action.openPreviousRecentlyUsedEditorInGroup<br>⌘KP复制活动文件的路径workbench.action.files.copyPathOfActiveFile<br>⌘KR在Windows中显示活动文件workbench.action.files.revealActiveFileInWindows<br>⌘KO在新窗口中显示打开的文件workbench.action.files.showOpenedFileInNewWindow<br>未分配比较打开的文件workbench.files.action.compareFileWith<br>显示<br>键命令命令ID<br>^⌘F切换全屏workbench.action.toggleFullScreen<br>⌘KZ切换Zen模式workbench.action.toggleZenMode<br>逃脱逃生离开Zen Modeworkbench.action.exitZenMode<br>⌘&#x3D;放大workbench.action.zoomIn<br>⌘-缩小workbench.action.zoomOut<br>⌘Numpad0重置缩放workbench.action.zoomReset<br>⌘B切换边栏可见性workbench.action.toggleSidebarVisibility<br>⇧⌘E显示资源管理器&#x2F;切换焦点workbench.view.explorer<br>⇧⌘F显示搜索workbench.view.search<br>^⇧G显示源代码管理workbench.view.scm<br>⇧⌘D显示调试workbench.view.debug<br>⇧⌘X显示扩展程序workbench.view.extensions<br>⇧⌘U显示输出workbench.action.output.toggleOutput<br>^Q快速打开视图workbench.action.quickOpenView<br>⇧⌘C打开新命令提示符workbench.action.terminal.openNativeConsole<br>⇧⌘V切换Markdown预览markdown.showPreview<br>⌘KV打开侧面预览markdown.showPreviewToSide<br>^&#96;切换集成终端workbench.action.terminal.toggleTerminal<br>搜索<br>键命令命令ID<br>⇧⌘F显示搜索workbench.view.search<br>⇧⌘H替换文件workbench.action.replaceInFiles<br>⌥⌘C切换匹配案例toggleSearchCaseSensitive<br>⌥⌘W切换匹配整个单词toggleSearchWholeWord<br>⌥⌘R切换使用正则表达式toggleSearchRegex<br>⇧⌘J切换搜索详细信息workbench.action.search.toggleQueryDetails<br>F4关注下一个搜索结果search.action.focusNextSearchResult<br>⇧F4关注上一个搜索结果search.action.focusPreviousSearchResult<br>↓显示下一个搜索字词history.showNext<br>↑显示上一个搜索词history.showPrevious<br>喜好<br>键命令命令ID<br>⌘，打开设置workbench.action.openSettings<br>未分配打开工作区设置workbench.action.openWorkspaceSettings<br>⌘K⌘S打开键盘快捷键workbench.action.openGlobalKeybindings<br>未分配打开用户代码段workbench.action.openSnippets<br>⌘K⌘T选择颜色主题workbench.action.selectTheme<br>未分配配置显示语言workbench.action.configureLocale<br>调试<br>键命令命令ID<br>F9切换断点editor.debug.action.toggleBreakpoint<br>F5开始workbench.action.debug.start<br>F5继续workbench.action.debug.continue<br>^F5开始（没有调试）workbench.action.debug.run<br>F6暂停workbench.action.debug.pause<br>F11踏入workbench.action.debug.stepInto<br>⇧F11走出去workbench.action.debug.stepOut<br>F10跳过workbench.action.debug.stepOver<br>⇧F5停止workbench.action.debug.stop<br>⌘K⌘I显示悬停editor.debug.action.showDebugHover<br>任务<br>键命令命令ID<br>⇧⌘B运行构建任务workbench.action.tasks.build<br>未分配运行测试任务workbench.action.tasks.test<br>扩展<br>键命令命令ID<br>未分配安装扩展workbench.extensions.action.installExtension<br>未分配显示已安装的扩展程序workbench.extensions.action.showInstalledExtensions<br>未分配显示过时的扩展程序workbench.extensions.action.listOutdatedExtensions<br>未分配显示推荐的扩展程序workbench.extensions.action.showRecommendedExtensions<br>未分配显示热门扩展程序workbench.extensions.action.showPopularExtensions<br>未分配更新所有扩展程序workbench.extensions.action.updateAllExtensions</p>]]></content>
    
    
    <categories>
      
      <category>软件工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用hexo框架搭建个人博客</title>
    <link href="/2019/05/12/theme/%E4%BD%BF%E7%94%A8hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2019/05/12/theme/%E4%BD%BF%E7%94%A8hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="一-准备工作"><a href="#一-准备工作" class="headerlink" title="一. 准备工作"></a>一. 准备工作</h2><hr><p>1.下载安装nodejs,网址 <a href="https://nodejs.org/">https://nodejs.org</a>  </p><p>2.切换root账号，查看node与npm是否安装正常？  </p>   <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">sudo su<br><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br>npm -v<br></code></pre></td></tr></table></figure><span id="more"></span><p>3.安装cnpm,查看是否安装成功  </p>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm install -g cnpm --registry=https:<span class="hljs-regexp">//</span>registry.npm.taobao.org<br>cnpm -v<br></code></pre></td></tr></table></figure><p>4.安装git，配置用户信息  </p><pre><code class="hljs"><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;John Doe&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> johndoe@example.com<br></code></pre></td></tr></table></figure></code></pre><h2 id="二-安装hexo框架"><a href="#二-安装hexo框架" class="headerlink" title="二. 安装hexo框架"></a>二. 安装hexo框架</h2><hr><p>1.安装hexo，查看是否安装成功  </p><pre><code class="hljs"><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">cnpm install -g hexo-<span class="hljs-keyword">cli</span><br>hexo -v<br></code></pre></td></tr></table></figure></code></pre><p>2.新建blog文件夹  </p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span><br><span class="hljs-built_in">mkdir</span> Blog<br></code></pre></td></tr></table></figure><p>3.进入工程目录  </p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> Blog/<br><span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure><p>4.初始化项目  </p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo hexo init<br><span class="hljs-built_in">ls</span> -l<br></code></pre></td></tr></table></figure><p>5.启动blog  </p>   <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p>6.访问blog，查看效果  </p>   <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">hexo s<br>########################<br>INFO  Start processing<br>INFO  Hexo is running at http:<span class="hljs-comment">//localhost:4000 . Press Ctrl+C to stop.</span><br>########################<br></code></pre></td></tr></table></figure><p>7.新建一篇博客,修改内容  </p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo n <span class="hljs-string">&#x27;我的第一篇博客文章&#x27;</span><br><span class="hljs-built_in">pwd</span><br><span class="hljs-built_in">cd</span> <span class="hljs-built_in">source</span>/_posts<br><span class="hljs-built_in">ls</span><br>vim 我的第一篇博客文章.md<br><span class="hljs-built_in">cd</span> ../..<br><span class="hljs-built_in">pwd</span><br>hexo s<br></code></pre></td></tr></table></figure><h2 id="三-配置hexo文件，发布到个人github"><a href="#三-配置hexo文件，发布到个人github" class="headerlink" title="三. 配置hexo文件，发布到个人github"></a>三. 配置hexo文件，发布到个人github</h2><hr><p>1.安装插件  </p>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">cnpm install <span class="hljs-params">--save</span> hexo-deployer-git<br><span class="hljs-keyword">ls</span><br></code></pre></td></tr></table></figure><p>2.编辑配置文件,部署到远端  </p>   <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean">vim _config.yml<br>###############<br> type: git<br> repo: # git 仓库地址<br>  branch: master<br>###############<br></code></pre></td></tr></table></figure>   <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>3.修改主题演示<br>   主题地址： <a href="https://github.com/litten/hexo-theme-yilia.git">https://github.com/litten/hexo-theme-yilia.git</a></p><p>   下载安装配置主题  </p>   <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean">git clone https:<span class="hljs-comment">//github.com/litten/hexo-theme-yilia.git themes/yilia</span><br>ls<br>vim _config.yml <br>#################<br>theme: yilia<br>#################<br></code></pre></td></tr></table></figure><p>4.重新配置后推到远端  </p>   <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo s</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>5.域名解析</p><ul><li>在<strong>博客</strong>的<code>source</code>文件夹下建立一个<code>CNAME</code>的文件</li><li>内容写入你的域名信息。</li><li>发布到<code>github</code>即可，到注册的域名商把购买的域名使用CNAME解析到github。</li></ul><hr><p>参考资料</p><p><a href="https://www.bilibili.com/video/BV1Yb411a7ty">https://www.bilibili.com/video/BV1Yb411a7ty</a></p>]]></content>
    
    
    <categories>
      
      <category>建设博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2019/05/12/home/2019-hello-world/"/>
    <url>/2019/05/12/home/2019-hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="又是新的一年"><a href="#又是新的一年" class="headerlink" title="又是新的一年"></a>又是新的一年</h1><p>欢迎打开自己的blog</p>]]></content>
    
    
    <categories>
      
      <category>精神家园</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ranger 终端的文件管理神器</title>
    <link href="/2018/11/23/tools/ranger/"/>
    <url>/2018/11/23/tools/ranger/</url>
    
    <content type="html"><![CDATA[<h2 id="ranger-是什么"><a href="#ranger-是什么" class="headerlink" title="ranger 是什么"></a>ranger 是什么</h2><p>Ranger 是python语言开发的开源软件工具，支持 vim 按键操作逻辑，支持第三方插件，在终端使用的图形化文件管理系统，一图胜千言，看图。</p><p><img src="https://img-blog.csdnimg.cn/20210414145905883.gif" alt="ranger界面"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># debian系linux如ubuntu</span><br>sudo apt <span class="hljs-keyword">install </span>ranger<br><span class="hljs-comment"># redhut系linux如centos</span><br>sudo yun <span class="hljs-keyword">install </span>ranger<br><span class="hljs-comment"># 使用pip安装</span><br>pip <span class="hljs-keyword">install </span>ranger-fm<br><span class="hljs-comment"># mac</span><br><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>ranger<br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># 启动</span><br>ranger<br><br><span class="hljs-comment"># 退出</span><br>q<br><span class="hljs-symbol">:q</span><br><span class="hljs-symbol">:q!</span><br><span class="hljs-title class_">Esc</span><br></code></pre></td></tr></table></figure><p>启动 ranger 后，您可以使用方向键或vim按键导航，打开文件或退出。第三列显示当前文件的预览。第二个是主列，第一个显示父录。</p><h2 id="个性化配置"><a href="#个性化配置" class="headerlink" title="个性化配置"></a>个性化配置</h2><p>如果您是第一次使用游侠，请生成游侠配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ranger --copy-config=all<br></code></pre></td></tr></table></figure><p>现在，您可以编辑<code>vi ~/.config/ranger/rc.conf</code> 配置文件，简单配置ranger。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>官网 <a href="https://github.com/ranger/ranger">https://github.com/ranger/ranger</a></li><li>官网使用手册 <a href="https://github.com/ranger/ranger/wiki/Official-user-guide">https://github.com/ranger/ranger/wiki/Official-user-guide</a></li><li><a href="https://blog.csdn.net/lxyoucan/article/details/115671189">https://blog.csdn.net/lxyoucan/article/details/115671189</a></li><li>视频演示 <a href="https://www.bilibili.com/video/BV1up4y1b7iJ">https://www.bilibili.com/video/BV1up4y1b7iJ</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>软件工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>ranger</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tmux 终端复用器，终端窗口管理神器</title>
    <link href="/2018/11/22/tools/tmux/"/>
    <url>/2018/11/22/tools/tmux/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Tmux-是什么"><a href="#一、Tmux-是什么" class="headerlink" title="一、Tmux 是什么"></a>一、Tmux 是什么</h2><h3 id="1-1-会话与进程"><a href="#1-1-会话与进程" class="headerlink" title="1.1 会话与进程"></a>1.1 会话与进程</h3><p>命令行的使用方式是，打开一个终端窗口，在里面输入命令。<strong>用户与计算机的这种交互，称为一次”会话”（session）</strong> 。</p><p>会话的一个重要特点是，窗口与其中启动的进程是连在一起的。关闭窗口，会话结束，会话内部的进程也会随之终止，不管有没有运行完。一个常见的使用场景是，使用SSH远程管理服务器，打开一个远程窗口执行命令。这时，网络突然断线，再次登录的时候，是找不回上一次执行的命令的。</p><p>Tmux 就是为了解决这个问题，窗口关闭时，会话并不终止，需要的时候再让会话”绑定”链接，这就是终端复用。</p><h3 id="1-2-Tmux-的作用"><a href="#1-2-Tmux-的作用" class="headerlink" title="1.2 Tmux 的作用"></a>1.2 Tmux 的作用</h3><p><strong>Tmux 就是会话与窗口的”解绑”工具，将它们彻底分离。</strong></p><blockquote><p>（1）它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用。</p><p>（2） 它可以让新窗口”接入”已经存在的会话。</p><p>（3）它允许每个会话有多个连接窗口，因此可以多人实时共享会话。</p><p>（4）它还支持窗口任意的垂直和水平拆分。</p></blockquote><p>类似的终端复用器还有 GNU Screen。Tmux 与它功能相似，但是更易用，也更强大。</p><h2 id="二、-Tmux-的使用"><a href="#二、-Tmux-的使用" class="headerlink" title="二、 Tmux 的使用"></a>二、 Tmux 的使用</h2><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h3><p>tmux使用c语言实现的，支持linux、Macos系统。</p><p>使用包管理器安装</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># debian系linux如ubuntu</span><br>sudo apt <span class="hljs-keyword">install </span>tmux<br><span class="hljs-comment"># redhut系linux如centos</span><br>sudo yun <span class="hljs-keyword">install </span>tmux<br><span class="hljs-comment"># mac</span><br><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>tmux<br></code></pre></td></tr></table></figure><p>使用源码包编译安装</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vim"># 从github下载源码包https://github.<span class="hljs-keyword">com</span>/tmux/tmux<br>./configure &amp;&amp; <span class="hljs-keyword">make</span><br>sudo <span class="hljs-keyword">make</span> install<br><br># 使用git安装<br>git clone https://github.<span class="hljs-keyword">com</span>/tmux/tmux.git<br><span class="hljs-keyword">cd</span> tmux<br><span class="hljs-keyword">sh</span> autogen.<span class="hljs-keyword">sh</span><br>./configure &amp;&amp; <span class="hljs-keyword">make</span><br></code></pre></td></tr></table></figure><h3 id="2-2-使用"><a href="#2-2-使用" class="headerlink" title="2.2 使用"></a>2.2 使用</h3><p>tmux 基本概念</p><p>会话：类似打开一个终端窗口，也可以打开多个终端，一般使用一个就够用了</p><p>窗口：类似终端的标签页，一个回话可以打开多个标签页，也和浏览器的标签页类似</p><p>窗格：一个标签页可以分屏多个窗格，如果你的屏幕够大，也可以分很多窗格。</p><h4 id="2-1-1-会话"><a href="#2-1-1-会话" class="headerlink" title="2.1.1 会话"></a>2.1.1 会话</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment"># 启动</span><br>tmux<br>tmux <span class="hljs-built_in">new</span> -s 会话名<br><br><span class="hljs-comment"># 列出所有会话</span><br>tmux ls<br><br><span class="hljs-comment"># 恢复会话</span><br>tmux <span class="hljs-keyword">at</span><br>tmux <span class="hljs-keyword">at</span> -t 会话名<br><br><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 断开当前会话，不会退出</span><br>Ctrl+bd<br><br><span class="hljs-comment"># 退出会话</span><br><span class="hljs-keyword">exit</span><br>Ctrl+d<br><br><span class="hljs-comment"># 关闭会话</span><br>tmux kill-session -t 会话名<br></code></pre></td></tr></table></figure><p>Tmux 系统指令</p><table><thead><tr><th>前缀</th><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>Ctrl+b</td><td>?</td><td>显示快捷键帮助文档</td></tr><tr><td>Ctrl+b</td><td>d</td><td>断开当前会话</td></tr><tr><td>Ctrl+b</td><td>D</td><td>选择要断开的会话</td></tr><tr><td>Ctrl+b</td><td>Ctrl+z</td><td>挂起当前会话</td></tr><tr><td>Ctrl+b</td><td>r</td><td>强制重载当前会话</td></tr><tr><td>Ctrl+b</td><td>s</td><td>显示会话列表用于选择并切换</td></tr><tr><td>Ctrl+b</td><td>:</td><td>进入命令行模式，此时可直接输入ls等命令</td></tr><tr><td>Ctrl+b</td><td>[</td><td>进入复制模式，按q退出</td></tr><tr><td>Ctrl+b</td><td>]</td><td>粘贴复制模式中复制的文本</td></tr><tr><td>Ctrl+b</td><td>~</td><td>列出提示信息缓存</td></tr></tbody></table><h4 id="2-1-2-窗口（window）指令"><a href="#2-1-2-窗口（window）指令" class="headerlink" title="2.1.2 窗口（window）指令"></a>2.1.2 窗口（window）指令</h4><table><thead><tr><th>前缀</th><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>Ctrl+b</td><td>c</td><td>新建窗口</td></tr><tr><td>Ctrl+b</td><td>&amp;</td><td>关闭当前窗口（关闭前需输入y or n确认）</td></tr><tr><td>Ctrl+b</td><td>0~9</td><td>切换到指定窗口</td></tr><tr><td>Ctrl+b</td><td>p</td><td>切换到上一窗口</td></tr><tr><td>Ctrl+b</td><td>n</td><td>切换到下一窗口</td></tr><tr><td>Ctrl+b</td><td>w</td><td>打开窗口列表，用于且切换窗口</td></tr><tr><td>Ctrl+b</td><td>,</td><td>重命名当前窗口</td></tr><tr><td>Ctrl+b</td><td>.</td><td>修改当前窗口编号（适用于窗口重新排序）</td></tr><tr><td>Ctrl+b</td><td>f</td><td>快速定位到窗口（输入关键字匹配窗口名称）</td></tr></tbody></table><h4 id="2-1-3-窗格（pane）指令"><a href="#2-1-3-窗格（pane）指令" class="headerlink" title="2.1.3 窗格（pane）指令"></a>2.1.3 窗格（pane）指令</h4><table><thead><tr><th>前缀</th><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>Ctrl+b</td><td>“</td><td>当前面板上下一分为二，下侧新建面板</td></tr><tr><td>Ctrl+b</td><td>%</td><td>当前面板左右一分为二，右侧新建面板</td></tr><tr><td>Ctrl+b</td><td>x</td><td>关闭当前面板（关闭前需输入y or n确认）</td></tr><tr><td>Ctrl+b</td><td>z</td><td>最大化当前面板，再重复一次按键后恢复正常（v1.8版本新增）</td></tr><tr><td>Ctrl+b</td><td>!</td><td>将当前面板移动到新的窗口打开（原窗口中存在两个及以上面板有效）</td></tr><tr><td>Ctrl+b</td><td>;</td><td>切换到最后一次使用的面板</td></tr><tr><td>Ctrl+b</td><td>q</td><td>显示面板编号，在编号消失前输入对应的数字可切换到相应的面板</td></tr><tr><td>Ctrl+b</td><td>{</td><td>向前置换当前面板</td></tr><tr><td>Ctrl+b</td><td>}</td><td>向后置换当前面板</td></tr><tr><td>Ctrl+b</td><td>Ctrl+o</td><td>顺时针旋转当前窗口中的所有面板</td></tr><tr><td>Ctrl+b</td><td>方向键</td><td>移动光标切换面板</td></tr><tr><td>Ctrl+b</td><td>o</td><td>选择下一面板</td></tr><tr><td>Ctrl+b</td><td>空格键</td><td>在自带的面板布局中循环切换</td></tr><tr><td>Ctrl+b</td><td>Alt+方向键</td><td>以5个单元格为单位调整当前面板边缘</td></tr><tr><td>Ctrl+b</td><td>Ctrl+方向键</td><td>以1个单元格为单位调整当前面板边缘（Mac下被系统快捷键覆盖）</td></tr><tr><td>Ctrl+b</td><td>t</td><td>显示时钟</td></tr></tbody></table><h3 id="三、个性化设置"><a href="#三、个性化设置" class="headerlink" title="三、个性化设置"></a>三、个性化设置</h3><p>tmux的用户级配置文件为<code>~/.tmux.conf</code>（没有的话就创建一个）。</p><p>这个可以参考其他人的配置，工具是拿来用的，越简单越好，切勿折腾。</p><p><a href="https://github.com/gpakosz/.tmux">https://github.com/gpakosz/.tmux</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p>官网 <a href="https://github.com/tmux/tmux">https://github.com/tmux/tmux</a></p></li><li><p><a href="https://www.ruanyifeng.com/blog/2019/10/tmux.html">https://www.ruanyifeng.com/blog/2019/10/tmux.html</a></p></li><li><p><a href="https://josephtseng-echo.github.io/wiki/linux/tmux.html#orgd90ca0d">https://josephtseng-echo.github.io/wiki/linux/tmux.html#orgd90ca0d</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>软件工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>tmux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>版本管理工具git</title>
    <link href="/2018/11/18/tools/git/"/>
    <url>/2018/11/18/tools/git/</url>
    
    <content type="html"><![CDATA[<h2 id="git-的使用场景"><a href="#git-的使用场景" class="headerlink" title="git 的使用场景"></a>git 的使用场景</h2><p>不是只有程序员才能用的工具。如果你写了一个工作报告，交给老板看后不满意，你把原工作报告复制了一份稍加修改交给老板看，老板又不满意，当你改到第10个版本后，老板说还是第一个版本好。你为什么不直接在一个版本上修改而要复制一份保留原版本呢？这里就涉及到了版本管理。如果简单的复制无法满足你的版本管理，git就是一个帮你管理不同版本的工具软件。</p><p>git诞生于代码的版本管理需求，有一定的使用门槛，就想你要远方的朋友家，当然你可以走过去，但是如果你学会了开直升机，并且刚好家里有一架，你就可以开直升机飞过去。git就是这样强大的工具。只要你涉及到版本管理，都可以使用git，git本质上就是在管理你的文件变化，比如新增文件，修改文件内容，只要你的文件里的一个标点符号发生变化，git都可以记住这个变化。这就方便你随时返回到某个时间点，git就是一台时光机。</p><h2 id="git-工作流程"><a href="#git-工作流程" class="headerlink" title="git 工作流程"></a>git 工作流程</h2><p><img src="https://www.runoob.com/wp-content/uploads/2015/02/git-process.png" alt="工作流程"></p><h2 id="图形化管理界面"><a href="#图形化管理界面" class="headerlink" title="图形化管理界面"></a>图形化管理界面</h2><p>git最初是在命令行使用的，后来官方也开发了图形化界面，但比较简陋。</p><p>推荐第三方图形化管理工具<a href="https://www.sourcetreeapp.com/">sourcetree</a>界面，支持Mac，Windows。</p><p>更多图形化界面工具请参考 <a href="https://git-scm.com/downloads/guis/">https://git-scm.com/downloads/guis/</a></p><p><img src="https://wac-cdn.atlassian.com/dam/jcr:580c367b-c240-453d-aa18-c7ced44324f9/hero-mac-screenshot.png?cdnVersion=436" alt="图形化界面"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>git 简明指南 <a href="https://www.runoob.com/manual/git-guide/">https://www.runoob.com/manual/git-guide/</a></p><p>git 官方使用手册 <a href="https://git-scm.com/doc">https://git-scm.com/doc</a></p>]]></content>
    
    
    <categories>
      
      <category>软件工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用Bash命令整理之其他常用命令</title>
    <link href="/2018/10/13/Linux/%E5%B8%B8%E7%94%A8Bash%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86%E4%B9%8B%E5%85%B6%E4%BB%96%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2018/10/13/Linux/%E5%B8%B8%E7%94%A8Bash%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86%E4%B9%8B%E5%85%B6%E4%BB%96%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="1-hostname-查看主机名"><a href="#1-hostname-查看主机名" class="headerlink" title="1. hostname - 查看主机名"></a>1. hostname - 查看主机名</h2><p><code>hostname</code>命令用于查看系统的主机名，或是修改系统的主机名。</p><p><code>hostname</code>的常用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 显示系统的当前主机名</span><br>hostname<br><br><span class="hljs-comment"># 修改你系统的主机名</span><br>hostname blinkfox-system<br><br><span class="hljs-comment"># 使用 -F 选项，从指定的文件中读取主机名</span><br>hostname -F /root/hostname.txt<br></code></pre></td></tr></table></figure><h2 id="2-uptime-查看系统运行时间"><a href="#2-uptime-查看系统运行时间" class="headerlink" title="2. uptime - 查看系统运行时间"></a>2. uptime - 查看系统运行时间</h2><p><code>uptime</code>命令用于打印系统的运行时间等信息。使用如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uptime</span><br></code></pre></td></tr></table></figure><h2 id="3-w、who-列出登录的用户"><a href="#3-w、who-列出登录的用户" class="headerlink" title="3. w、who - 列出登录的用户"></a>3. w、who - 列出登录的用户</h2><p><code>w</code>命令用于显示登录用户及他们当前运行的进程。输入的内容格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">w<br><br><span class="hljs-comment"># 打印如下</span><br>22:42  up 18 days, 1 hr, 2 <span class="hljs-built_in">users</span>, load averages: 1.23 1.79 1.75<br>USER     TTY      FROM              LOGIN@  IDLE WHAT<br>blinkfox console  -                日19   6days -<br>blinkfox s000     -                五23       - w<br></code></pre></td></tr></table></figure><p><code>who</code>命令有与<code>w</code>命令类似的用途，但它的功能比<code>w</code>命令更强大一些。语法格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">who</span> [OPTION]... [FILE | ARG1 ARG2]<br></code></pre></td></tr></table></figure><p><code>who</code>常用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 显示当前登录的所有用户信息</span><br><span class="hljs-built_in">who</span><br><br><span class="hljs-comment"># 显示系统的启动时间</span><br><span class="hljs-built_in">who</span> -b<br><br><span class="hljs-comment"># 显示系统登录进程</span><br><span class="hljs-built_in">who</span> -l<br><br><span class="hljs-comment"># 显示与当前标准输入关联的用户信息</span><br><span class="hljs-built_in">who</span> -m<br><br><span class="hljs-comment"># 显示系统的运行级别</span><br><span class="hljs-built_in">who</span> -r<br><br><span class="hljs-comment"># 显示所有登录用户的用户名和登录用户数</span><br><span class="hljs-built_in">who</span> -q<br></code></pre></td></tr></table></figure><h2 id="4-uname-查看系统信息"><a href="#4-uname-查看系统信息" class="headerlink" title="4. uname - 查看系统信息"></a>4. uname - 查看系统信息</h2><p><code>uname</code>命令用于打印内核名称和版本、主机名等系统信息。命令的语法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> [OPTION]...<br></code></pre></td></tr></table></figure><p>常用使用方式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 只打印内核的名称</span><br><span class="hljs-built_in">uname</span><br><br><span class="hljs-comment"># 使用 -n 选项，只打印系统的主机名</span><br><span class="hljs-built_in">uname</span> -n<br><br><span class="hljs-comment"># 使用 -r 选项，打印内核版本信息</span><br><span class="hljs-built_in">uname</span> -r<br><br><span class="hljs-comment"># 使用 -m 选项，打印系统的硬件名称</span><br><span class="hljs-built_in">uname</span> -m<br><br><span class="hljs-comment"># 使用 -p 选项，打印系统的处理器类型信息</span><br><span class="hljs-built_in">uname</span> -p<br><br><span class="hljs-comment"># 使用 -i 选项，打印系统的硬件平台信息</span><br><span class="hljs-built_in">uname</span> -i<br><br><span class="hljs-comment"># 使用 -a 选项，打印上述所有示例中的信息</span><br><span class="hljs-built_in">uname</span> -a<br></code></pre></td></tr></table></figure><h2 id="5-date-显示和设置系统日期和时间"><a href="#5-date-显示和设置系统日期和时间" class="headerlink" title="5. date - 显示和设置系统日期和时间"></a>5. date - 显示和设置系统日期和时间</h2><p><code>date</code>命令用于以多种格式显示日期和时间，或设置系统的日期和时间。<code>date</code>命令的语法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">date</span> [OPTION]... [+FORMAT]<br><span class="hljs-built_in">date</span> [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]<br></code></pre></td></tr></table></figure><p>常用使用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 以默认格式显示系统的当前日期时间</span><br><span class="hljs-built_in">date</span><br><br><span class="hljs-comment"># 格式化当前日期</span><br><span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%Y-%m-%d&quot;</span><br><br><span class="hljs-comment"># 格式化输出昨天的日期</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;1 day ago&quot;</span> +<span class="hljs-string">&quot;%Y-%m-%d&quot;</span><br><br><span class="hljs-comment"># 2秒后格式化输出</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;2 second&quot;</span> +<span class="hljs-string">&quot;%Y-%m-%d %H:%M.%S&quot;</span><br><br><span class="hljs-comment"># 普通格式化转出</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;2009-12-12&quot;</span> +<span class="hljs-string">&quot;%Y/%m/%d %H:%M.%S&quot;</span><br><br><span class="hljs-comment"># apache格式转换</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;Dec 5, 2009 12:00:37 AM&quot;</span> +<span class="hljs-string">&quot;%Y-%m-%d %H:%M.%S&quot;</span><br><br><span class="hljs-comment"># 日期加减操作</span><br><span class="hljs-built_in">date</span> +%Y%m%d <span class="hljs-comment">#显示前天年月日</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;+1 day&quot;</span> +%Y%m%d <span class="hljs-comment">#显示前一天的日期</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;-1 day&quot;</span> +%Y%m%d <span class="hljs-comment">#显示后一天的日期</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;-1 month&quot;</span> +%Y%m%d <span class="hljs-comment">#显示上一月的日期</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;+1 month&quot;</span> +%Y%m%d <span class="hljs-comment">#显示下一月的日期</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;-1 year&quot;</span> +%Y%m%d <span class="hljs-comment">#显示前一年的日期</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;+1 year&quot;</span> +%Y%m%d <span class="hljs-comment">#显示下一年的日期</span><br><br><span class="hljs-comment"># 设定时间</span><br><span class="hljs-built_in">date</span> -s <span class="hljs-comment"># 设置当前时间，只有root权限才能设置，其他只能查看</span><br><span class="hljs-built_in">date</span> -s 20160816 <span class="hljs-comment"># 设置成20160816，这样会把具体时间设置成空00:00:00</span><br><span class="hljs-built_in">date</span> -s 01:01:01 <span class="hljs-comment"># 设置具体时间，不会对日期做更改</span><br><span class="hljs-built_in">date</span> -s <span class="hljs-string">&quot;01:01:01 2012-05-23&quot;</span> <span class="hljs-comment"># 这样可以设置全部时间 </span><br><span class="hljs-built_in">date</span> -s <span class="hljs-string">&quot;01:01:01 20120523&quot;</span> <span class="hljs-comment"># 这样可以设置全部时间</span><br><span class="hljs-built_in">date</span> -s <span class="hljs-string">&quot;2012-05-23 01:01:01&quot;</span> <span class="hljs-comment"># 这样可以设置全部时间 </span><br><span class="hljs-built_in">date</span> -s <span class="hljs-string">&quot;20120523 01:01:01&quot;</span> <span class="hljs-comment"># 这样可以设置全部时间</span><br></code></pre></td></tr></table></figure><h2 id="6-id-显示用户属性"><a href="#6-id-显示用户属性" class="headerlink" title="6. id - 显示用户属性"></a>6. id - 显示用户属性</h2><p><code>id</code>命令用于打印输出用户<code>uid</code>、<code>gid</code>、用户名和组名等用户身份信息。<code>id</code>命令的语法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">id</span> [OPTION]... [USERNAME]<br></code></pre></td></tr></table></figure><p>常见使用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 输出当前用户的uid、用户名、gid、组名及用户属于的群组信息</span><br><span class="hljs-built_in">id</span><br><br><span class="hljs-comment"># 使用 -u 选项，输出用户的 uid</span><br><span class="hljs-built_in">id</span> -u<br><br><span class="hljs-comment">#-u 选项和 -n 选项结合使用，输出账户的用户名</span><br><span class="hljs-built_in">id</span> -un<br><br><span class="hljs-comment"># 使用 -g 选项，输出帐号当前起作用的gid</span><br><span class="hljs-built_in">id</span> -g<br><br><span class="hljs-comment"># -g 与 -n 选项结合使用，输出帐号当前起作用的用户组名</span><br><span class="hljs-built_in">id</span> -gn<br><br><span class="hljs-comment"># 使用 -G 选项，输出帐号所属的所有群组id</span><br><span class="hljs-built_in">id</span> -G root<br><br><span class="hljs-comment"># -G 与 -n 选项结合使用，输出账号所属的所有群组的名称</span><br><span class="hljs-built_in">id</span> -Gn root<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用Bash命令整理之文本处理</title>
    <link href="/2018/10/11/Linux/%E5%B8%B8%E7%94%A8Bash%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86%E4%B9%8B%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/"/>
    <url>/2018/10/11/Linux/%E5%B8%B8%E7%94%A8Bash%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86%E4%B9%8B%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="1-sort-文本排序"><a href="#1-sort-文本排序" class="headerlink" title="1. sort - 文本排序"></a>1. sort - 文本排序</h2><p><code>sort</code>命令用于将文本文件的行排序。默认情况下，<code>sort</code>命令是按照字符串的字母顺序排序。</p><p>sort 的常用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将文本内容按字母顺序排序</span><br><span class="hljs-built_in">sort</span> example.txt<br><br><span class="hljs-comment"># 使用 -u 选项，移除所有重复行后排序</span><br><span class="hljs-built_in">sort</span> -u example.txt<br><br><span class="hljs-comment"># 使用 -n 选项，将令数字按数值的大小排序</span><br><span class="hljs-built_in">sort</span> -n example.txt<br><br><span class="hljs-comment"># 使用 -r 选项，以倒序方式排序</span><br><span class="hljs-built_in">sort</span> -n -r example.txt<br><br><span class="hljs-comment"># 同时将 file1、file2 的内容排序</span><br><span class="hljs-built_in">sort</span> file1 file2<br></code></pre></td></tr></table></figure><h2 id="2-uniq-文本去重"><a href="#2-uniq-文本去重" class="headerlink" title="2.uniq - 文本去重"></a>2.uniq - 文本去重</h2><p><code>uniq</code>命令用于移除或发现文件中重复的条目。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 它将移除文件中重复的行并显示单一行</span><br><span class="hljs-built_in">uniq</span> example.txt<br><br><span class="hljs-comment"># 可以统计重复行出现的次数</span><br><span class="hljs-built_in">uniq</span> -c example.txt<br><br><span class="hljs-comment"># 使用 -d 选项，只显示文件中有重复的行并只显示一次</span><br><span class="hljs-built_in">uniq</span> -d example.txt<br><br><span class="hljs-comment"># 使用 -D 选项，显示文件中所有重复的行</span><br><span class="hljs-built_in">uniq</span> -D example.txt<br><br><span class="hljs-comment"># 使用 -u 选项，只显示文件中不重复的行</span><br><span class="hljs-built_in">uniq</span> -u example.txt<br><br><span class="hljs-comment"># 使用 -w 选项，限制 uniq 命令只比较每行的前 3 个字符是否重复</span><br><span class="hljs-built_in">uniq</span> -w 3 example.txt<br><br><span class="hljs-comment"># 使用 -s 选项，避免 uniq 命令比较每行的前 3 个字符，只比较后面的字符是否重复</span><br><span class="hljs-built_in">uniq</span> -s 3 example.txt<br><br><span class="hljs-comment"># 使用 -f 选项，避免 uniq 命令比较第一列的内容，只比较后面的字符是否重复</span><br><span class="hljs-built_in">uniq</span> -f 1 example.txt<br></code></pre></td></tr></table></figure><h2 id="3-tr-替换或删除字符"><a href="#3-tr-替换或删除字符" class="headerlink" title="3.tr - 替换或删除字符"></a>3.tr - 替换或删除字符</h2><p><code>tr</code>命令主要用于删除文件中控制字符或进行字符转换。使用<code>tr</code>时要转换两个字符串：字符串 1 用于查询，字符串 2 用于处理各种转换。<code>tr</code>刚执行时，字符串 1 中的字符被映射到字符串 2 中的字符，然后转换操作开始。</p><p><code>tr</code>命令的语法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tr</span> [OPTION]... SET1 [SET2]<br></code></pre></td></tr></table></figure><p>常用命令示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 若要将大括号转换为小括号</span><br><span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;&#123;&#125;&#x27;</span> <span class="hljs-string">&#x27;()&#x27;</span> &lt; textfile &gt; newfile<br><br><span class="hljs-comment"># 若要将大括号转换成方括号</span><br><span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;&#123;&#125;&#x27;</span> <span class="hljs-string">&#x27;\[]&#x27;</span> &lt; textfile &gt; newfile<br><br><span class="hljs-comment"># 若要将小写字符转换成大写，请输入：</span><br><span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;a-z&#x27;</span> <span class="hljs-string">&#x27;A-Z&#x27;</span> &lt; textfile &gt; newfile<br><br><span class="hljs-comment"># 若要创建一个文件中的单词列表</span><br><span class="hljs-built_in">tr</span> -cs <span class="hljs-string">&#x27;[:lower:][:upper:]&#x27;</span> <span class="hljs-string">&#x27;[\n*]&#x27;</span> &lt; textfile &gt; newfile<br><br><span class="hljs-comment"># 若要从某个文件中删除所有空字符</span><br><span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27;\0&#x27;</span> &lt; textfile &gt; newfile<br><br><span class="hljs-comment"># 若要用单独的换行替换每一序列的一个或多个换行，请输入：</span><br><span class="hljs-built_in">tr</span> -s <span class="hljs-string">&#x27;\n&#x27;</span> &lt; textfile &gt; newfile<br><br><span class="hljs-comment"># 要以单个“#”字符替换 &lt;space&gt; 字符类中的每个字符序列</span><br><span class="hljs-built_in">tr</span> -s <span class="hljs-string">&#x27;[:space:]&#x27;</span> <span class="hljs-string">&#x27;[#*]&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="4-grep-查找字符串"><a href="#4-grep-查找字符串" class="headerlink" title="4.grep - 查找字符串"></a>4.grep - 查找字符串</h2><p><code>grep</code>命令用于搜索文本或指定的文件中与指定的字符串或模式相匹配的行。默认情况下，<code>grep</code>命令只显示匹配的行。</p><p><code>grep</code>命令的语法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep [OPTION]... PATTERN [FILE]...<br>grep [OPTION]... [-e PATTERN | -f FILE] [FILE]...<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># `grep`命令查找文件/etc/passwd 中帐号 blinkfox 的信息</span><br>grep blinkfox /etc/passwd<br><br><span class="hljs-comment"># 使用 -i 选项，强制 grep 命令忽略搜索关键字的大小写</span><br>grep -i blinkfox /etc/passwd<br><br><span class="hljs-comment"># 使用 -r 选项，可以递归搜索指定目录下的所有文件</span><br>grep -r blinkfox /etc/<br><br><span class="hljs-comment"># 使用 -w 选项，只匹配包含指定单词的行</span><br>grep -w blinkfox /etc/<br><br><span class="hljs-comment"># 使用 -c 选项，报告文件或文本中模式被匹配的次数</span><br>grep -c blinkfox /etc/passwd<br><br><span class="hljs-comment"># 使用 -n 选项，显示每一个匹配的行的行号</span><br>grep -n blinkfox /etc/passwd<br><br><span class="hljs-comment"># 使用 -v 选项，可以输出除匹配指定模式的行以外的其他所有行</span><br>grep -v blinkfox /etc/passwd<br><br><span class="hljs-comment"># 使用 --color 选项，在输出中将匹配的字符串以彩色的形式标出</span><br>grep --color blinkfox /etc/passwd<br></code></pre></td></tr></table></figure><h2 id="5-diff-比较两个文件"><a href="#5-diff-比较两个文件" class="headerlink" title="5.diff - 比较两个文件"></a>5.diff - 比较两个文件</h2><p><code>diff</code>命令用于比较两个文件，并找出它们之间的不同。<code>diff</code>命令的语法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">diff [OPTION]... from-file to-file<br></code></pre></td></tr></table></figure><p>常用使用方式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 比较两个文件</span><br>diff nsswitch.conf nsswitch.conf.org<br><br><span class="hljs-comment"># 使用 -w 选项，比较时忽略空格</span><br>diff -w nsswitch.conf nsswitch.conf.org<br><br><span class="hljs-comment"># 使用 -y 选项，以并排的格式输出两个文件的比较结果</span><br>diff -y nsswitch.conf nsswitch.conf.org<br><br>使用 -c 选项，以上下对比的格式输出两个文件的比较结果<br>diff -c nsswitch.conf nsswitch.conf.org<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 软件安装</title>
    <link href="/2018/10/10/Linux/Linux%20%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    <url>/2018/10/10/Linux/Linux%20%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="1-源码编译安装"><a href="#1-源码编译安装" class="headerlink" title="1.源码编译安装"></a>1.源码编译安装</h2><ul><li>下载源码文件 <code>wget url</code></li><li>减压包 <code>tar xvf 包名</code></li><li>编译安装<br>需要提前安装好编译器 gcc</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> 包文件夹<br>./configure<br><span class="hljs-keyword">make</span><br><span class="hljs-keyword">make</span> install<br></code></pre></td></tr></table></figure><p>优点：安装的软件能更好的兼容本机，卸载软件只需删除安装目录<br>缺点：安装时间长，容易出错</p><h2 id="2-二进制包-rpm"><a href="#2-二进制包-rpm" class="headerlink" title="2.二进制包 rpm"></a>2.二进制包 rpm</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 安装</span><br><span class="hljs-attribute">rpm</span> -ivh 包全名<br><span class="hljs-comment"># 卸载</span><br>rpm -e 包名<br></code></pre></td></tr></table></figure><p>优点：安装速度快，<br>缺点：软件依赖安装复杂</p><h2 id="3-包管理器安装-yum、apt、pip"><a href="#3-包管理器安装-yum、apt、pip" class="headerlink" title="3.包管理器安装 yum、apt、pip"></a>3.包管理器安装 yum、apt、pip</h2><h3 id="设置国内软件镜像源"><a href="#设置国内软件镜像源" class="headerlink" title="设置国内软件镜像源"></a>设置国内软件镜像源</h3><h4 id="centos设置镜像帮助文档"><a href="#centos设置镜像帮助文档" class="headerlink" title="centos设置镜像帮助文档"></a>centos设置镜像帮助文档</h4><p><a href="https://developer.aliyun.com/mirror/">阿里云镜像站</a>&gt; <a href="https://developer.aliyun.com/mirror/centos/">centos镜像配置页</a>&gt; <a href="http://mirrors.aliyun.com/centos/">centos镜像下载页</a>&gt;<br><a href="https://mirrors.tuna.tsinghua.edu.cn/help/centos/">清华镜像站</a></p><p>默认生效的源配置文件<br>&#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo</p><p>镜像源地址<br><a href="https://mirrors.aliyun.com/centos">https://mirrors.aliyun.com/centos</a><br><a href="https://mirrors.163.com/centos">https://mirrors.163.com/centos</a><br><a href="https://mirrors.tuna.tsinghua.edu.cn/centos/">https://mirrors.tuna.tsinghua.edu.cn/centos/</a></p><hr><h4 id="ubuntu设置镜像帮助文档"><a href="#ubuntu设置镜像帮助文档" class="headerlink" title="ubuntu设置镜像帮助文档"></a>ubuntu设置镜像帮助文档</h4><p><a href="https://developer.aliyun.com/mirror/">阿里云镜像站</a>&gt; <a href="https://developer.aliyun.com/mirror/ubuntu/">ubuntu镜像配置页</a>&gt; <a href="http://mirrors.aliyun.com/ubuntu/">ubuntu镜像下载页</a>&gt;<br><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">清华镜像站</a></p><p>默认生效的源配置文件<br>&#x2F;etc&#x2F;apt&#x2F;sources.list</p><p>镜像源地址<br><a href="https://mirrors.aliyun.com/ubuntu">https://mirrors.aliyun.com/ubuntu</a><br><a href="https://mirrors.163.com/ubuntu">https://mirrors.163.com/ubuntu</a><br><a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a></p><p>其他不错的 yum 源，比如中科大和搜狐。</p><p>中科大的 yum 源，安装方法查看：<a href="https://lug.ustc.edu.cn/wiki/mirrors/help/centos">https://lug.ustc.edu.cn/wiki/mirrors/help/centos</a><br>sohu 的 yum 源安装方法查看： <a href="http://mirrors.sohu.com/help/centos.html">http://mirrors.sohu.com/help/centos.html</a></p><p>运行以下命令生成缓存</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">yum clean <span class="hljs-keyword">all</span><br>yum makecache<br></code></pre></td></tr></table></figure><h3 id="本地光盘yum源"><a href="#本地光盘yum源" class="headerlink" title="本地光盘yum源"></a>本地光盘yum源</h3><ol><li><p>挂载光盘</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># cdrom 的名字比如：sr0</span><br>mkdir <span class="hljs-regexp">/mnt/</span>cdrom<br>mount <span class="hljs-regexp">/dev/</span>cdrom <span class="hljs-regexp">/mnt/</span>cdrom <br></code></pre></td></tr></table></figure></li><li><p>修改yum源配置文件后缀名，使其失效</p></li><li><p>让光盘yum源配置文件生效<br><code>vi /etc/yum.repos.d/Centos-Media.repo</code><br>修改配置文件里光盘的路径 <code>/mnt/cdrom</code><br>修改 <code>enabled=1</code></p></li></ol><p>验证是否修改成功<br>yum list 后，最后一列显示源的名字 [c7-media]</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> 包名<br>apt <span class="hljs-keyword">install</span> 包名<br></code></pre></td></tr></table></figure><p>优点：简单快速，不用管依赖的问题。<br>缺点：卸载软件卸不干净</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><ol><li>列出所有可更新的软件清单命令：yum check-update</li></ol></li><li><ol start="2"><li>更新所有软件命令：yum update</li></ol></li><li><ol start="3"><li>仅安装指定的软件命令：yum install <package_name></li></ol></li><li><ol start="4"><li>仅更新指定的软件命令：yum update <package_name></li></ol></li><li><ol start="5"><li>列出所有可安裝的软件清单命令：yum list</li></ol></li><li><ol start="6"><li>删除软件包命令：yum remove <package_name></li></ol></li><li><ol start="7"><li>查找软件包命令：yum search &lt;关键字&gt;</li></ol></li><li><ol start="8"><li>清除缓存命令:</li></ol><ul><li>yum clean packages： 清除缓存目录下的软件包</li><li>yum clean headers： 清除缓存目录下的 headers</li><li>yum clean oldheaders： 清除缓存目录下旧的 headers</li><li>yum clean， yum clean all （&#x3D; yum clean packages; yum clean oldheaders） ：清除缓存目录下的软件包及旧的 headers</li></ul></li></ul><p>组管理命令</p><ul><li>列出所有可用的软件类表<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">yum grouplist</span><br></code></pre></td></tr></table></figure></li><li>安装指定软件组，组名由 yum grouplist 查询出来<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">yum</span> grupinstall 软件组名<br></code></pre></td></tr></table></figure></li><li>卸载指定软件组<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">yum</span> groupremove 软件组名<br></code></pre></td></tr></table></figure>举例</li></ul><p>Linux LANG变量设置：定义系统的主语系环境</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> src]<span class="hljs-meta"># echo $LANG  </span><br>zh_CN.UTF<span class="hljs-number">-8</span><br></code></pre></td></tr></table></figure><p>设置中文 <code>LANG=zh_CN.utf8</code><br>设置英文  <code>LANG=en_US</code>  </p><p>原则 能不升级就不升级，除非有重大安全问题，关键要保证稳定运行。即使升级，只升级有问题的单个软件包。<br>服务器使用最小化安装，用什么装什么，尽量不卸载。不建议yum卸载，有很多依赖相关的坑。</p><h2 id="4-脚本安装"><a href="#4-脚本安装" class="headerlink" title="4.脚本安装"></a>4.脚本安装</h2><p>把以上三种安装方式的整个流程写出一个脚本程序，只需执行脚本就可以一键安装。</p><p>举例：ngnix 脚本安装</p><p><a href="https://www.lnmp.org/">https://www.lnmp.org/</a></p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 文件管理</title>
    <link href="/2018/10/09/Linux/Linux%20%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    <url>/2018/10/09/Linux/Linux%20%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="基本文件操作"><a href="#基本文件操作" class="headerlink" title="基本文件操作"></a>基本文件操作</h2><ol><li>查看文件</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">ls <span class="hljs-selector-attr">[选项]</span> <span class="hljs-selector-attr">[文件或目录]</span> # <span class="hljs-selector-attr">[]</span>里的内容表示可选项<br>选项<br>-<span class="hljs-selector-tag">a</span> 显示所有文件，包括隐藏文件<br>-l 显示详细信息<br>-d 查看目录属性<br>-h 人性化显示文件大小<br>-<span class="hljs-selector-tag">i</span> 显示inode (ID号、索引节点)<br></code></pre></td></tr></table></figure><ol start="2"><li>创建目录</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">mkdir <span class="hljs-selector-attr">[选项]</span> <span class="hljs-selector-attr">[目录名]</span><br><br>-<span class="hljs-selector-tag">p</span> 递归创建目录<br></code></pre></td></tr></table></figure><ol start="3"><li>切换目录</li></ol><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> [目录]<br><br><span class="hljs-keyword">cd</span> ~  进入当前家目录<br><span class="hljs-keyword">cd</span><br><span class="hljs-keyword">cd</span> -  进入上次目录<br><span class="hljs-keyword">cd</span> <span class="hljs-string">..</span> 进入上一级目录<br><span class="hljs-keyword">cd</span> .  进入当前目录<br></code></pre></td></tr></table></figure><p>相对路径 <code>cd ../usr/local/src</code> 绝对路径<code>cd /etc</code></p><p>目录补全、命令补全，按两下 <strong>Tab键</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span> <span class="hljs-comment"># 查询当前工作路径</span><br></code></pre></td></tr></table></figure><ol start="4"><li>删除文件</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">rm</span> <span class="hljs-literal">-rf</span> [文件或目录]<br>选项 <br><span class="hljs-literal">-r</span> 递归删除目录<br><span class="hljs-operator">-f</span> 强制<br>删除文件要谨慎，删除了就没有了<br></code></pre></td></tr></table></figure><ol start="5"><li>复制命令</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">cp <span class="hljs-selector-attr">[选项]</span> <span class="hljs-selector-attr">[原文件或目录]</span> <span class="hljs-selector-attr">[目标目录]</span><br>选项<br>-r 复制目录<br>-<span class="hljs-selector-tag">p</span> 连带文件属性复制<br>-d 若原文件时链接文件，则复制链接属性<br>-<span class="hljs-selector-tag">a</span> 相当于-pdr<br></code></pre></td></tr></table></figure><ol start="6"><li>剪切或改名</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">mv <span class="hljs-selector-attr">[原文件或目录]</span> <span class="hljs-selector-attr">[目标目录]</span><br><br></code></pre></td></tr></table></figure><ol start="7"><li>目录结构</li></ol><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/d0c50-linux2bfile2bsystem2bhierarchy.jpg" alt="目录结构"></p><ul><li><p><strong>&#x2F;boot</strong> 启动目录</p></li><li><p><strong>&#x2F;dev ：</strong>Device(设备)的缩写, 存放的是Linux的外部设备。<strong>注意：</strong>在Linux中访问设备和访问文件的方式是相同的。</p></li><li><p><strong>&#x2F;etc</strong>： 这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。</p></li><li><p><strong>&#x2F;bin, &#x2F;sbin, &#x2F;usr&#x2F;bin, &#x2F;usr&#x2F;sbin</strong>: 这是系统预设的执行文件的放置目录。**&#x2F;sbin, &#x2F;usr&#x2F;sbin<strong>只有root能使用的程序和指令。</strong>&#x2F;bin<strong>、</strong>&#x2F;usr&#x2F;bin** 是给系统用户使用的指令（除 root 外的通用用户）。</p></li><li><p><strong>&#x2F;var</strong>： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在 &#x2F;var&#x2F;log 目录下，另外 mail 的预设放置也是在这里。</p></li><li><p><strong>&#x2F;media</strong>：类windows的<strong>其他设备，</strong>例如U盘、光驱等等，识别后linux会把设备放到这个目录下。</p></li><li><p><strong>&#x2F;mnt</strong>：临时挂载别的文件系统的，我们可以将光驱挂载在&#x2F;mnt&#x2F;上，然后进入该目录就可以查看光驱里的内容了。</p></li><li><p><strong>&#x2F;home</strong> 普通用户的家目录</p></li></ul><ol start="8"><li>链接命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s [原文件] [目标文件] <span class="hljs-comment"># 生成链接文件</span><br>选项 -s 创建软链接<br></code></pre></td></tr></table></figure><h2 id="文件搜索查找"><a href="#文件搜索查找" class="headerlink" title="文件搜索查找"></a>文件搜索查找</h2><ol><li><p><code>locate 文件名</code>       #  文件搜索，基于本地数据库搜索，速度快，刚建立的文件需等待数据库更新。搜索的数据库 &#x2F;var&#x2F;lib&#x2F;mlocate，<code>updatedb</code>手动更新此数据库。</p></li><li><p>命令搜索</p></li></ol><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">whereis 命令名 <span class="hljs-comment"># 搜索命令所在的路径以及帮助文档</span><br>选项<br>-<span class="hljs-keyword">b </span>只查找可执行文件<br>-m 只查询帮助文档<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> 命令名 <span class="hljs-comment"># 可以看到命令的别名</span><br></code></pre></td></tr></table></figure><p>PATH 环境变量</p><p><code>each $PATH</code>  # 查看环境变量，可以直接使用命令而不必输入命令程序的绝对路径</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">[py@mini ~]$ echo <span class="hljs-variable">$PATH</span><br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin:/u</span>sr<span class="hljs-regexp">/bin:/u</span>sr<span class="hljs-regexp">/local/</span>sbin:<span class="hljs-regexp">/usr/</span>sbin:<span class="hljs-regexp">/home/</span>py<span class="hljs-regexp">/.local/</span>bin:<span class="hljs-regexp">/home/</span>py/bin<br></code></pre></td></tr></table></figure><ol start="3"><li>文件搜索 find</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> [搜索范围] [搜索条件]<br><span class="hljs-built_in">find</span> / -name install.log # 避免过大范围的搜索，这会增加系统压力<br>   <br><span class="hljs-comment"># 查询需要加通配符</span><br>* 匹配任意内容<br>? 匹配任意字符<br>[] 匹配任意中括号内的字符<br><span class="hljs-built_in">find</span> / -name install.log*<br><span class="hljs-built_in">find</span> / -name “ab[cd]<br><br><span class="hljs-built_in">find</span> /var/log/ -mtime -10 # -10表示10天内，10表示10天当天，+10表示10天前 mtime 修改文件时内容，ctime 改变文件属性，atime文件访问时间<br><br><span class="hljs-comment"># 按照文件大小搜索</span><br><span class="hljs-built_in">find</span> . size 25k <br></code></pre></td></tr></table></figure><ol start="4"><li>字符串搜索grep·····</li></ol><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ldif">grep [选项] 字符串 文件名 <span class="hljs-comment"># 在文件当中匹配符合条件的字符串</span><br>选项<br><span class="hljs-literal">-</span>i 忽略大小写<br><span class="hljs-literal">-</span>v 排除指定字符串<br></code></pre></td></tr></table></figure><h2 id="文件压缩减压"><a href="#文件压缩减压" class="headerlink" title="文件压缩减压"></a>文件压缩减压</h2><p>常用的压缩格式:        .zip        .gz       .bz2</p><p>常用的压缩格式：      .tar.gz          .tar.bz2</p><ol><li>zip格式</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 压缩文件</span><br><span class="hljs-built_in">zip</span> 压缩文件名 源文件<br><br><span class="hljs-comment"># 压缩目录</span><br><span class="hljs-built_in">zip</span> -r 压缩文件 原文件 <br><br><span class="hljs-comment"># 解压缩文件</span><br>unzip 压缩文件  <br></code></pre></td></tr></table></figure><ol start="2"><li>gzip格式</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 压缩为 .gz 文件，源文件消失</span><br><span class="hljs-attribute">gzip</span> 源文件 <br><span class="hljs-comment"># 压缩为 .gz 文件，保留源文件</span><br>gzip -c 源文件 &gt; 压缩文件<br><span class="hljs-comment"># 压缩目录下的子文件，但不压缩目录 </span><br>gzip -r 目录<br><span class="hljs-comment"># 减压缩文件</span><br>gzip -d 压缩文件<br>gunzip 压缩文件<br></code></pre></td></tr></table></figure><ol start="3"><li>.bz2格式</li></ol><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># 压缩为.bz2格式，不保留源文件</span><br><span class="hljs-keyword">bzip2 </span>源文件<br><span class="hljs-comment"># 压缩后保留源文件</span><br><span class="hljs-keyword">bzip2 </span>-k 源文件<br><br>注意：<span class="hljs-keyword">bzip2 </span>不能压缩目录<br><br><span class="hljs-comment"># 减压缩 -k 保留压缩文件</span><br><span class="hljs-keyword">bzip2 </span>-d 压缩文件<br><span class="hljs-keyword">bunzip2 </span>压缩文件<br><br></code></pre></td></tr></table></figure><ol start="4"><li>打包命令<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">tar -cvf  打包文件名 源文件<br>选项<br>-c 打包<br>-v 显示过程<br>-f 指定打包后的文件名<br>-x 减压缩tar.gz格式<br>-z 压缩为<span class="hljs-string">.tar.gz</span>格式<br>例如<br>tar -cvf test.tar test<br><br><span class="hljs-comment"># tar.gz格式是先打包为.tar，再压缩为.gz格式</span><br>tar -zcvf 压缩包名<span class="hljs-string">.tar.gz</span> 源文件<br><span class="hljs-comment"># 解压缩包</span><br>tar -xcvf 压缩包名<span class="hljs-string">.tar.gz</span> <br></code></pre></td></tr></table></figure></li></ol><h2 id="文件权限管理"><a href="#文件权限管理" class="headerlink" title="文件权限管理"></a>文件权限管理</h2><h3 id="1-文件基本权限"><a href="#1-文件基本权限" class="headerlink" title="1. 文件基本权限"></a>1. 文件基本权限</h3><ol><li>基本权限的修改</li></ol><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tap">[py@mini ~]$ ll<br>lrwxrwxrwx.  <span class="hljs-number"> 1 </span>root root   <span class="hljs-number"> 7 </span>7月  <span class="hljs-number"> 7 </span>16:26 bin -&gt; usr/bin<br>drwxr-xr-x.<span class="hljs-number"> 19 </span>py py   <span class="hljs-number"> 8192 </span>7月  <span class="hljs-number"> 8 </span>15:06 htop-3.2.1<br>-rw-rw-r--. <span class="hljs-number"> 1 </span>py py      <span class="hljs-number"> 0 </span>7月  <span class="hljs-number"> 7 </span>19:24 test.txt<br>drwxrwxr-x. <span class="hljs-number"> 6 </span>py py  <span class="hljs-number"> 12288 </span>7月  <span class="hljs-number"> 8 </span>02:34 tmux-3.3a<br></code></pre></td></tr></table></figure><ul><li>第一位 文件类型（‘-’ 表示文件，‘d’ 表示目录，‘l’ 表示软链接）</li><li>第一三位 表示 u所有者 rw- （‘r’ 表示读，‘w’ 表示写，‘x’ 表示执行）</li><li>第二三位表示 g所属组 rw-</li><li>第三三位表示 o其他人 r–</li></ul><p>   修改权限 <code>chmod [选项] 模式 文件名</code> # 赋予文件和目录权限</p><ul><li><p>-R 递归</p></li><li><p>模式</p><ul><li><p>[ugoa] [+-&#x3D;] [rwx]  # u 所有者，g所属组，o其他人</p></li><li><p>[mode&#x3D;421]           # 用对应数字的和表示对应的权限 </p><p>例子</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> u+x test.txt <span class="hljs-comment"># 给所有者加可执行权限</span><br><span class="hljs-built_in">chmod</span> g+w,o+w text.txt <span class="hljs-comment"># 给所属组和其他人加写权限</span><br><span class="hljs-built_in">chmod</span> a=rwx <span class="hljs-comment"># 给所有人赋予读写执行权限</span><br><span class="hljs-built_in">chmod</span> u-x,g-w <span class="hljs-comment"># 给其他人所有组减去执行权限写权限</span><br></code></pre></td></tr></table></figure><p>权限的数字表示</p><ul><li><p>r 用4表示，</p></li><li><p>w 用2表示，</p></li><li><p>x 用1表示</p><p> rwxr-xr-x  用数字表示为 755，7表示所有者权限，5表示所有组，5表示其他。</p><p>常用权限</p><p><strong>777</strong>最高权限，<strong>666</strong>文件的最高权限；</p><p><strong>755</strong>普通可执行权限，<strong>644</strong>普通文件权限。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">chmod <span class="hljs-number">755</span> <span class="hljs-built_in">text</span>.mp4 <span class="hljs-comment"># 所有者rwx，所属组rx，其他rx</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><ol start="2"><li><p>权限对文件的作用</p><ul><li>r 读取文件内容（cat more head tail）</li><li>w 编辑、新增、修改文件内容（vi echo）不能</li><li>x 可执行</li></ul></li><li><p>权限对目录的作用</p><ul><li>r 可以查询目录下的文件名（ls）</li><li>w 修改目录结构。如新建、删除、重命名文件和目录（touch rm mv cp）</li><li>x  可以进入目录（cd）</li></ul><p><strong>总结</strong></p><p>对文件来讲，最高权限是 x ；</p><p>对目录来讲，最高权限是 w，0 5（rx）7（rwx）</p></li><li><p>其它权限命令</p><p><code>chown 用户名 文件名</code> # 改变文件的所有者</p><p><code>chgrp 组名 文件名</code>    # 改变文件的所属组</p></li></ol><h3 id="2-文件默认权限"><a href="#2-文件默认权限" class="headerlink" title="2. 文件默认权限"></a>2. 文件默认权限</h3><ul><li>查看默认权限</li></ul><p>​umask</p><p>​0022</p><ul><li>第一位0，表示文件特殊权限</li><li>022 ，表示文件默认权限</li></ul><h3 id="3-ALC权限"><a href="#3-ALC权限" class="headerlink" title="3. ALC权限"></a>3. ALC权限</h3><p>用户身份不足时使用此权限，很少用到。</p><h3 id="4-文件特殊权限"><a href="#4-文件特殊权限" class="headerlink" title="4. 文件特殊权限"></a>4. 文件特殊权限</h3><p>SetUID</p><p>SetGID</p><p>Sticky BIT</p><h3 id="5-不可改变位权限"><a href="#5-不可改变位权限" class="headerlink" title="5. 不可改变位权限"></a>5. 不可改变位权限</h3><p><code>chattr [+-=] [选项] 文件或目录</code> # + 表示增加权限，- 表示删除权限，&#x3D;表示赋予权限</p><p>选项</p><ul><li>i 等价于insert 插入# 对文件不允许删除、改名、添加、修改；对目录只能修改目录下的数据，不允许建立和删除文件。</li><li>a 等价于append 追加 # 对文件只能对文件中增加数据，不能删除、修改数据；对目录只允许建立和修改文件，不允许删除。</li></ul><h3 id="6-sudo-权限"><a href="#6-sudo-权限" class="headerlink" title="6. sudo 权限"></a>6. sudo 权限</h3><ul><li><p>root 把只能超级用户执行的命令赋予普通用户执行</p></li><li><p>sudo 的操作对象是系统命令</p><p>sudo 的使用</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nsis">visudo <span class="hljs-comment"># 实际修改的是/etc/sudoers文件</span><br><br><span class="hljs-comment"># 用户名 被管理主机的地址=（可使用的身份）授权命令（绝对路径）</span><br>root <span class="hljs-literal">ALL</span>=(<span class="hljs-literal">ALL</span>) <span class="hljs-literal">ALL</span><br><br><span class="hljs-comment"># %组名 被管理主机的地址=（可使用的身份）授权命令（绝对路径）</span><br>%wheel <span class="hljs-literal">ALL</span>=(<span class="hljs-literal">ALL</span>) <span class="hljs-literal">ALL</span><br></code></pre></td></tr></table></figure><p>例子：让普通用户执行shutdown -r now</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">visudo <span class="hljs-comment"># 在文件末尾增加下面一行内容</span><br>py ALL=(ALL) <span class="hljs-regexp">/sbin/</span>shutdown -r now<br></code></pre></td></tr></table></figure><p>例子：让普通用户执行passwd命令,<code>!/usr/bin/passwd root</code> 表示禁止执行的命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">py ALL=<span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/passwd [A-Za-z]*, !/u</span>sr<span class="hljs-regexp">/bin/</span>passwd<span class="hljs-string">&quot;&quot;</span>, !<span class="hljs-regexp">/usr/</span>bin/passwd root<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2018/09/24/home/2018-hello-world/"/>
    <url>/2018/09/24/home/2018-hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="念念不忘，必有回响"><a href="#念念不忘，必有回响" class="headerlink" title="念念不忘，必有回响"></a>念念不忘，必有回响</h1><p>欢迎打开自己的新blog，你好世界！</p>]]></content>
    
    
    <categories>
      
      <category>精神家园</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
