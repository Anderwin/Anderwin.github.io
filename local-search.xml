<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>fluid 添加音乐功能</title>
    <link href="/2022/07/01/fluid/"/>
    <url>/2022/07/01/fluid/</url>
    
    <content type="html"><![CDATA[<p>效果请参考本页面的头部 👆</p><h1 id="注入器"><a href="#注入器" class="headerlink" title="注入器"></a>注入器</h1><p>新建 &#x2F;scripts&#x2F;music.js 文件,写入下面内容</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">hexo.extend.filter.register<span class="hljs-params">(&#x27;theme_inject&#x27;, function(injects)</span> &#123;<br>  injects.postMarkdownBegin.raw<span class="hljs-params">(&#x27;default&#x27;, &#x27;&lt;iframe <span class="hljs-attr">frameborder</span>=&quot;no&quot; <span class="hljs-attr">border</span>=&quot;0&quot; <span class="hljs-attr">marginwidth</span>=&quot;0&quot; <span class="hljs-attr">marginheight</span>=&quot;0&quot; <span class="hljs-attr">width</span>=330 <span class="hljs-attr">height</span>=110 <span class="hljs-attr">src</span>=&quot;//music.163.com/outchain/player?<span class="hljs-attr">type</span>=0&amp;<span class="hljs-attr">id</span>=2886962881&amp;<span class="hljs-attr">auto</span>=1&amp;<span class="hljs-attr">height</span>=90&quot;&gt;&lt;/iframe&gt;&#x27;)</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><p>完成,就这么优雅.</p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://aigisss.com/blog/posts/1563abd8.html">https://aigisss.com/blog/posts/1563abd8.html</a></p>]]></content>
    
    
    <categories>
      
      <category>记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>当我记笔记时，究竟在记什么？</title>
    <link href="/2022/06/29/%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/06/29/%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>当我记笔记时，究竟在记什么？当然是我的思考。我在学校期间，笔记多是写在纸上的。工作后笔记都是记在手机或电脑上的。不管什么形式，当我记笔记时，都是想把当时自己的想法记录下来。学习笔记是这样的，读书笔记也是这样的，日记更是这样的。</p><h2 id="不停地记"><a href="#不停地记" class="headerlink" title="不停地记"></a>不停地记</h2><p>我是一个话很少的人，可我的想法却很多。这就导致我的内心很矛盾，很难忍受表达不出想法的痛苦。各种所见所闻我都会产生各种想法，但我就是讲不出来，脑子里面一片混沌，特别的痛苦。看完一部特别喜欢的电影，我只会说：“卧槽，太好看了”。如果有人问我：有多好看？“非常好看”“非常非常好看”。唉，我的痛苦就是从语言的苍白开始的。还好有书籍，只有在阅读时，类似的症状才会有所缓解，因为书里的话很多时候就是我想说的话，每当读到和自己想法一致的内容时，我会感动的热泪盈眶，仿佛压抑了很久的喷嚏终于打了出来。在这种时候我就会摘录书中的文字，并写下几句自己的感受。可是这只能缓解症状，仍然无法解决我的痛苦。时间一长，那些各种笔记我再也想不起当初为什么记录，为什么写下那些话。</p><h2 id="不停地读"><a href="#不停地读" class="headerlink" title="不停地读"></a>不停地读</h2><p>为了缓解我的痛苦，我只能不停地读，不停地记笔记，这就好像是打游戏上瘾了。读书变成了我的生活必需，和吃饭睡觉一样重要。只要有时间我就会泡在图书馆，因为我买不起那么多书。待在图书馆或书店，我感觉自己就活在天堂，感受到了这个世界的第一等快乐。时间一长，我的笔记也越来越多。逐渐地我认识到长期这样也不行，我记录的笔记总是想不起来。我开始不断地反思我的这些行为到底有什么意义？我开始寻找解决之道，好几年后，我找到一个办法。</p><h2 id="不停地写"><a href="#不停地写" class="headerlink" title="不停地写"></a>不停地写</h2><p>没错，就是写作，但不是写日记，是要公开发表的那种。<br>写作是什么？当然是心灵感应。当我在斯蒂芬金的《写作这回事》里读到这句话时，那感觉就是当头一棒，瞬间明白了写作是什么。我于是开始在网上发布自己写的文章，我从不关心是否有人在看，也不关心写的有多烂。就是一直写，一直发。几年后，我发现和当初读书一样，我又上瘾了，停不下来了。但是这仍然没有解决我最初的痛苦，于是，我开始研究各种写作理论和写作方法，目的是让自己写得更清楚。这也促使我读的书更多，记录的笔记也更多，想写的主题同样更多。这个时候我觉得自己的脑子里仍然一片混沌，我走到了崩溃的边缘。</p><h2 id="管理笔记"><a href="#管理笔记" class="headerlink" title="管理笔记"></a>管理笔记</h2><p>记录的笔记越来越多，写的文章也越来多，这又带来了新的痛苦，没错，就是管理笔记。我受够了在各种文件夹翻来翻去找笔记的痛苦。我开始花费大量精力研究如何管理笔记，使用什么笔记工具。市面上流行的笔记软件，我都用过。在笔记软件之间换来换去，寻找适合自己的笔记软件成了一件大事。有句老话说得好，“工欲善其事，必先利其器”，作为一个人类是离不开使用工具的。我用过很多笔记软件，目前看来OBsidian是最适合我的，我简单谈谈为什么？为了方便，我简称Obsidian为Ob。谈工具离不开用户需求和使用场景。下面是我的理由。</p><p><code>排版</code>。Ob 支持最流行的markdown格式，因为我不想在排版上花费太多时间，markdown就很好地满足这个需求。当然这是最基本的需求，多数笔记软件都有这个功能。 <code>笔记存在本地</code>。很重要的一点是笔记文件是离线的，我不想把笔记交给第三方。 <code>文件管理</code>。Ob支持文件管理，我不需要在电脑的资源管理器和笔记软件之间跳来跳去，这非常方便。 <code>全局搜索</code>。无论是一句话还是一个关键词，你可以在整个笔记文件夹里搜索，包括文件里面的内容。 <code>关系图谱、双向链接</code>。Ob的特色功能是“关系图谱”和“双向链接”，这是按照卡片笔记法的原理设计的。我尤其喜欢关系图谱，它形象地展现出了各种想法之间的连接。查看图谱时，我发现了类似人际关系里的弱连接，这时往往会启发出新想法，获得灵感。 <code>功能扩展</code>。支持插件扩展软件功能，我完全可以按照自己的需求像搭积木一样组合出最适合我的软件功能。 <code>免费</code>。这是最重要的一点，如果你不使用同步功能，Ob个人使用永久免费，当然也不需要注册账号。一个工具再好用，需要付费的话，我还是要慎重考虑的。<code>两点不足</code>。当然也有一些小缺陷，没有Notion里面块的功能强大，不能任意的拖动块。 文件导出的格式有点少。我想以后这两个问题都会解决的。</p><h2 id="不停的重读"><a href="#不停的重读" class="headerlink" title="不停的重读"></a>不停的重读</h2><p>整理笔记、梳理自己的想法，每次都需要把所有的笔记阅读一遍，才能梳理出思路，整个大脑就像笔记本电脑载入大型项目后，因内存不足造成卡顿一样。直到读完《卡片笔记写作法》和使用Obsidian这个工具后，让我崩溃的问题似乎找到了解决办法，最起码看到了希望。为此，我兴奋了一个多月。我以前的写作流程也和卡片笔记法类似。最重要的区别只有一点，我是使用大脑反复阅读笔记，然后在大脑中寻找笔记间的联系，这就需要不停的重读笔记，笔记越多，我越痛苦。卡片笔记法结合Obsidian软件刚好解决了我的这个问题。我的大脑被解放了，通过这个方法和工具，我把大脑里做的事情在大脑外部做了。</p><h2 id="人是他写的文字"><a href="#人是他写的文字" class="headerlink" title="人是他写的文字"></a>人是他写的文字</h2><p>不写，就无法思考。卢曼这句话听起来有点夸张，可我的感受确实就是这样的。文字并不是思考的载体，而是思考的媒介。什么是媒介？电流需要通过导体才能传播，思考需要写出来的文字才能思考。我们写下的文字就是思考本身。用写作来思考就像给电脑加了内存条一样，思考会更加顺利、自然。</p><blockquote><p>理查德·费曼的办公室曾经有一位访客，他是一位历史学家，想采访费曼。他说当他看到费曼的笔记本时，非常高兴能够看到“费曼思维过程的精彩记录”。“不，不！”费曼反驳道，“这些不是我思维过程的记录，它们就是我的思维过程，实际上我的思维活动都是在纸上进行的。”“好吧，”历史学家说：“工作是在你的脑子里完成的，但它的记录还是在纸上。”“不，这不是记录，这就是工作过程。我需要在纸上开展工作，这就是那些纸。”<br>——《卡片笔记写作法》</p></blockquote><p>我们是通过语言来思考的，文字又是语言的媒介，这样抽象的思考就通过这些叫做“文字”的符号，形象的表现在纸面上了，当然你也可以画各种各样的图形。记笔记就是把抽象思维转变为形象思维的过程。为什么需要形象化？一段描写树叶的文字，一张树叶的照片，一段树叶的视频，你更喜欢哪种表现形式？图片和视频显然更加形象，它们不需要你太多的思考，理解起来比较省力。相比于文字，图片和视频虽然更形象，但用来表达抽象的事物时就没有文字方便，比如你很高兴这件事，用文字来表达就是“我很高兴”，四个字就够了，用图片和视频就比较麻烦。</p><p>18世纪德国哲学家费尔巴哈说过这样一句名言：“人是他吃的食物”。那么我模仿他的说法谈写作就是：人是他写的文字。所以，你想要了解一个人，读一读他的文章是个好办法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不知道读者们发现没有？思考、阅读、实践、反馈、再思考。这个过程就是不断地实践，然后获得反馈，调整思路后再实践。这就是我们认识这个世界的基本流程。</p><p>随着这个循环的不断重复，我们的认知也在不断地升级。回到最初的问题，当我记笔记时，究竟在记什么？我想你我心中已经有了最佳答案，但是我仍然无法准确的描述出来。为什么呢？我想《道德经》的开篇正好回答了这个问题。</p><blockquote><p>道可道，非常道；名可名，非常名。无名天地之始，有名万物之母。故常无欲，以观其妙；常有欲，以观其徼（jiào）。此两者同出而异名，同谓之玄，玄之又玄，众妙之门。</p></blockquote><hr><p><strong>行动与思考</strong></p><ul><li>读完此文你会记笔记吗？</li><li>你记笔记时，到底在记什么？</li></ul>]]></content>
    
    
    <categories>
      
      <category>记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Matery主题个性化修改</title>
    <link href="/2022/06/27/Matery%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E4%BF%AE%E6%94%B9/"/>
    <url>/2022/06/27/Matery%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E4%BF%AE%E6%94%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="页面菜单栏图标个性化设置："><a href="#页面菜单栏图标个性化设置：" class="headerlink" title="页面菜单栏图标个性化设置："></a>页面菜单栏图标个性化设置：</h2><h3 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h3><p>matery主题中的小图标都是调用 <a href="http://www.fontawesome.com.cn/faicons">http://www.fontawesome.com.cn/faicons</a>  上的图标，记住图标名称，引用的时候直接写就行了，格式如下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">About:</span><br><span class="hljs-symbol">  url:</span> /about<br><span class="hljs-symbol">  icon:</span> fas fa-user-circle<br> <br></code></pre></td></tr></table></figure><h3 id="名称"><a href="#名称" class="headerlink" title="名称"></a>名称</h3><p>页面下大标题修改成和菜单栏文本相同：<br>打开 themes\hexo-theme-matery\languages\zh-CN.yml 文件，修改格式如下：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">archives:</span> 归档<br><span class="hljs-symbol">about:</span> 关于<br><span class="hljs-symbol">contact:</span> 访客登记薄<br><span class="hljs-symbol">friends:</span> 学习情报处  <br></code></pre></td></tr></table></figure><h2 id="关于我页面添加自定义内容"><a href="#关于我页面添加自定义内容" class="headerlink" title="关于我页面添加自定义内容"></a>关于我页面添加自定义内容</h2><p>打开 theme&#x2F;matery&#x2F;layout&#x2F;about.ejs 文件。<br>在 13 行有一个 <code>&lt;div class=&quot;card&quot;&gt;</code> 标签，找出其对应结尾的标签，大概在 61 行后面新增如下代码：</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-content&quot;</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-content article-card-content&quot;</span>&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title center-align&quot;</span> <span class="hljs-attr">data-aos</span>=<span class="hljs-string">&quot;zoom-in-up&quot;</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-info-circle&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>&lt;%-</span><span class="language-ruby"> __(<span class="hljs-string">&#x27;关于&#x27;</span>) </span><span class="language-xml">%&gt;</span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;articleContent&quot;</span> <span class="hljs-attr">data-aos</span>=<span class="hljs-string">&quot;fade-up&quot;</span>&gt;</span></span><br><span class="language-xml">                     &lt;%-</span><span class="language-ruby"> page.content </span><span class="language-xml">%&gt;</span><br><span class="language-xml">                 <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">           <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>可以在 about 页 index.md 自定义内容。</p><h2 id="添加加载动画"><a href="#添加加载动画" class="headerlink" title="添加加载动画"></a>添加加载动画</h2><h3 id="1、在主题-x2F-layout-x2F-partial-x2F-目录新建一个loading-pages-ejs-内容如下："><a href="#1、在主题-x2F-layout-x2F-partial-x2F-目录新建一个loading-pages-ejs-内容如下：" class="headerlink" title="1、在主题 &#x2F;layout&#x2F;_partial&#x2F;目录新建一个loading-pages.ejs 内容如下："></a>1、在主题 &#x2F;layout&#x2F;_partial&#x2F;目录新建一个loading-pages.ejs 内容如下：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-id">#loading-container</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: fixed;</span><br><span class="language-css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100vh</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100vw</span>;</span><br><span class="language-css">        <span class="hljs-attribute">z-index</span>: <span class="hljs-number">9999</span>;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">        <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="language-css">        <span class="hljs-attribute">justify-content</span>: center;</span><br><span class="language-css">        <span class="hljs-attribute">align-items</span>: center;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: <span class="hljs-number">#FFF</span>;</span><br><span class="language-css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        <span class="hljs-comment">/* loader页面消失采用渐隐的方式*/</span></span><br><span class="language-css">        -webkit-<span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">1s</span> ease;</span><br><span class="language-css">        -moz-<span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">1s</span> ease;</span><br><span class="language-css">        -o-<span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">1s</span> ease;</span><br><span class="language-css">        <span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">1s</span> ease;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.loading-image</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">120px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.loading-image</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;</span><br><span class="language-css">        -webkit-<span class="hljs-attribute">animation</span>: pacman-balls <span class="hljs-number">1s</span> linear <span class="hljs-number">0s</span> infinite;</span><br><span class="language-css">        <span class="hljs-attribute">animation</span>: pacman-balls <span class="hljs-number">1s</span> linear <span class="hljs-number">0s</span> infinite</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.loading-image</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) &#123;</span><br><span class="language-css">        -webkit-<span class="hljs-attribute">animation</span>: pacman-balls <span class="hljs-number">1s</span> linear .<span class="hljs-number">33s</span> infinite;</span><br><span class="language-css">        <span class="hljs-attribute">animation</span>: pacman-balls <span class="hljs-number">1s</span> linear .<span class="hljs-number">33s</span> infinite</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.loading-image</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">4</span>) &#123;</span><br><span class="language-css">        -webkit-<span class="hljs-attribute">animation</span>: pacman-balls <span class="hljs-number">1s</span> linear .<span class="hljs-number">66s</span> infinite;</span><br><span class="language-css">        <span class="hljs-attribute">animation</span>: pacman-balls <span class="hljs-number">1s</span> linear .<span class="hljs-number">66s</span> infinite</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.loading-image</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">5</span>) &#123;</span><br><span class="language-css">        -webkit-<span class="hljs-attribute">animation</span>: pacman-balls <span class="hljs-number">1s</span> linear .<span class="hljs-number">99s</span> infinite;</span><br><span class="language-css">        <span class="hljs-attribute">animation</span>: pacman-balls <span class="hljs-number">1s</span> linear .<span class="hljs-number">99s</span> infinite</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">   <span class="hljs-selector-class">.loading-image</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:first</span>-of-type &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">25px</span> solid <span class="hljs-number">#49b1f5</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-right-color</span>: transparent;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">        -webkit-<span class="hljs-attribute">animation</span>: rotate_pacman_half_up .<span class="hljs-number">5s</span> <span class="hljs-number">0s</span> infinite;</span><br><span class="language-css">        <span class="hljs-attribute">animation</span>: rotate_pacman_half_up .<span class="hljs-number">5s</span> <span class="hljs-number">0s</span> infinite;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.loading-image</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">25px</span> solid <span class="hljs-number">#49b1f5</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-right-color</span>: transparent;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">        -webkit-<span class="hljs-attribute">animation</span>: rotate_pacman_half_down .<span class="hljs-number">5s</span> <span class="hljs-number">0s</span> infinite;</span><br><span class="language-css">        <span class="hljs-attribute">animation</span>: rotate_pacman_half_down .<span class="hljs-number">5s</span> <span class="hljs-number">0s</span> infinite;</span><br><span class="language-css">        <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">50px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-keyword">@-webkit-keyframes</span> rotate_pacman_half_up &#123;<span class="hljs-number">0%</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">270deg</span>)&#125;<span class="hljs-number">50%</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">1turn</span>)&#125;<span class="hljs-selector-tag">to</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">270deg</span>)&#125;&#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-keyword">@keyframes</span> rotate_pacman_half_up &#123;<span class="hljs-number">0%</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">270deg</span>)&#125;<span class="hljs-number">50%</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">1turn</span>)&#125;<span class="hljs-selector-tag">to</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">270deg</span>)&#125;&#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-keyword">@-webkit-keyframes</span> rotate_pacman_half_down &#123;<span class="hljs-number">0%</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">90deg</span>)&#125;<span class="hljs-number">50%</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0deg</span>)&#125;<span class="hljs-selector-tag">to</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">90deg</span>)&#125;&#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-keyword">@keyframes</span> rotate_pacman_half_down &#123;<span class="hljs-number">0%</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">90deg</span>)&#125;<span class="hljs-number">50%</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0deg</span>)&#125;<span class="hljs-selector-tag">to</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">90deg</span>)&#125;&#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-keyword">@-webkit-keyframes</span> pacman-balls &#123;<span class="hljs-number">75%</span> &#123;<span class="hljs-attribute">opacity</span>: .<span class="hljs-number">7</span>&#125;<span class="hljs-selector-tag">to</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">100px</span>, -<span class="hljs-number">6.25px</span>)&#125;&#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-keyword">@keyframes</span> pacman-balls &#123;<span class="hljs-number">75%</span> &#123;<span class="hljs-attribute">opacity</span>: .<span class="hljs-number">7</span>&#125;<span class="hljs-selector-tag">to</span> &#123;<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">100px</span>, -<span class="hljs-number">6.25px</span>)&#125;&#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.loading-image</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>),</span><br><span class="language-css">    <span class="hljs-selector-class">.loading-image</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">4</span>),</span><br><span class="language-css">    <span class="hljs-selector-class">.loading-image</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">5</span>),</span><br><span class="language-css">    <span class="hljs-selector-class">.loading-image</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">6</span>)&#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#49b1f5</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">2px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">6.25px</span>);</span><br><span class="language-css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.loading-text</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">20vh</span>;</span><br><span class="language-css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#2c3e50</span>;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2rem</span>;</span><br><span class="language-css">        <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-number">10px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.2</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-keyword">@media</span> <span class="hljs-keyword">only</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">500px</span>) &#123;</span><br><span class="language-css">         <span class="hljs-selector-class">.loading-text</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.5rem</span>;</span><br><span class="language-css">         &#125;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.fadeout</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">alpha</span>(opacity=<span class="hljs-number">0</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-comment">/* logo出现动画 */</span></span><br><span class="language-css">    <span class="hljs-keyword">@-webkit-keyframes</span> fadeInDown&#123;<span class="hljs-number">0%</span>&#123;<span class="hljs-attribute">opacity</span>:<span class="hljs-number">0</span>;-webkit-<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate3d</span>(<span class="hljs-number">0</span>,-<span class="hljs-number">100%</span>,<span class="hljs-number">0</span>);<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate3d</span>(<span class="hljs-number">0</span>,-<span class="hljs-number">100%</span>,<span class="hljs-number">0</span>)&#125;<span class="hljs-number">100%</span>&#123;<span class="hljs-attribute">opacity</span>:<span class="hljs-number">1</span>;-webkit-<span class="hljs-attribute">transform</span>:none;<span class="hljs-attribute">transform</span>:none&#125;&#125;</span><br><span class="language-css">    <span class="hljs-keyword">@keyframes</span> fadeInDown&#123;<span class="hljs-number">0%</span>&#123;<span class="hljs-attribute">opacity</span>:<span class="hljs-number">0</span>;-webkit-<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate3d</span>(<span class="hljs-number">0</span>,-<span class="hljs-number">100%</span>,<span class="hljs-number">0</span>);&#125;&#125;</span><br><span class="language-css"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> loaded = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">       <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> loader = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;loading-container&quot;</span>);</span><br><span class="language-javascript">            loader.<span class="hljs-property">className</span>=<span class="hljs-string">&quot;fadeout&quot;</span> ;<span class="hljs-comment">//使用渐隐的方法淡出loading page</span></span><br><span class="language-javascript">            <span class="hljs-comment">// document.getElementById(&quot;body-wrap&quot;).style.display=&quot;flex&quot;;</span></span><br><span class="language-javascript">            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                loader.<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&quot;none&quot;</span>;</span><br><span class="language-javascript">            &#125;,<span class="hljs-number">2500</span>); </span><br><span class="language-javascript">        &#125;,<span class="hljs-number">1000</span>);<span class="hljs-comment">//强制显示loading page 1s  </span></span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">    <span class="hljs-title function_">loaded</span>();</span><br><span class="language-javascript">&#125;)()</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、在主题的-layout-目录找到-layout-ejs-文件"><a href="#2、在主题的-layout-目录找到-layout-ejs-文件" class="headerlink" title="2、在主题的 layout 目录找到 layout.ejs 文件"></a>2、在主题的 layout 目录找到 layout.ejs 文件</h3><p>在 <body> 附近添加内容后如下：</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;&lt;%=</span></span></span><span class="language-ruby"> config.language </span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">%&gt;&quot;</span>&gt;</span></span><br><span class="language-xml">&lt;%-</span><span class="language-ruby"> partial(<span class="hljs-string">&#x27;_partial/head&#x27;</span>) </span><span class="language-xml">%&gt;</span><br><span class="language-xml"></span><br><span class="language-xml"> &lt;%</span><span class="language-ruby"> <span class="hljs-keyword">if</span> (theme.loadingPages.enable) &#123; </span><span class="language-xml">%&gt;</span><br><span class="language-xml">    &lt;%-</span><span class="language-ruby"> partial(<span class="hljs-string">&#x27;_partial/loading-pages&#x27;</span>) </span><span class="language-xml">%&gt;</span><br><span class="language-xml"> &lt;%</span><span class="language-ruby"> &#125; </span><span class="language-xml">%&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    &lt;%</span><span class="language-ruby"> <span class="hljs-keyword">if</span> (theme.loadingPages.enable) &#123; </span><span class="language-xml">%&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loading-container&quot;</span>&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;loading-text&quot;</span>&gt;</span>嘘~  正在从服务器偷取页面 . . . <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> </span><br><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;loading-image&quot;</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    &lt;%</span><span class="language-ruby"> &#125; </span><span class="language-xml">%&gt;</span><br><span class="language-xml"></span><br><span class="language-xml">    &lt;%-</span><span class="language-ruby"> partial(<span class="hljs-string">&#x27;_partial/header&#x27;</span>) </span><span class="language-xml">%&gt;</span><br><span class="language-xml">    ...</span><br></code></pre></td></tr></table></figure><h3 id="3、在主题配置文件-config-yml添加开关配置"><a href="#3、在主题配置文件-config-yml添加开关配置" class="headerlink" title="3、在主题配置文件_config.yml添加开关配置"></a>3、在主题配置文件_config.yml添加开关配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">loadingPages:<br>  <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span>  <br><span class="hljs-built_in">enable</span> 设置为 <span class="hljs-literal">true</span> 表示开启加载动画， <span class="hljs-literal">false</span> 表示关闭加载动画。<br></code></pre></td></tr></table></figure><h2 id="修改博客标题在手机端的字体大小"><a href="#修改博客标题在手机端的字体大小" class="headerlink" title="修改博客标题在手机端的字体大小"></a>修改博客标题在手机端的字体大小</h2><p>在主题文件的source&#x2F;css&#x2F;my.css文件中，新增下面这样的 CSS 代码，然后设置成自己喜欢的字体大小即可</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">/* 修改首页轮播的标题大小 */</span><br><span class="hljs-keyword">@media</span> <span class="hljs-keyword">only</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">601px</span>) &#123;<br>    <span class="hljs-selector-class">.bg-cover</span> <span class="hljs-selector-class">.title</span> &#123;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2.5rem</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 修改博客标题的字体大小 */</span><br><span class="hljs-keyword">@media</span> <span class="hljs-keyword">only</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">601px</span>) &#123;<br>    <span class="hljs-selector-tag">header</span> <span class="hljs-selector-class">.brand-logo</span> <span class="hljs-selector-class">.logo-span</span> &#123;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.5rem</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="去掉banner的颜色动画"><a href="#去掉banner的颜色动画" class="headerlink" title="去掉banner的颜色动画"></a>去掉banner的颜色动画</h2><p>有的同学可能不喜欢banner的颜色遮罩，特别是在banner图片的颜色和动画颜色一样时，表现不出图片的美观。去掉后放一张高清小姐姐大图，博客访问量一下迅速爆炸！听我的准没错，那如何去掉这个烦人的彩色动画呢？跟着我：在theme主题目录下，找到 source&#x2F;css&#x2F;matery.css文件,ctrl+F快捷键查找.bg-cover:after，注释掉即可。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext">/* .bg-cover:after &#123;<br>    <span class="hljs-attribute">-webkit-animation</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rainbow 60s infinite;</span><br>    <span class="hljs-attribute">animation</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rainbow 60s infinite;</span><br>&#125; */<br></code></pre></td></tr></table></figure><hr><p>参考资料</p><p><a href="https://blog.csdn.net/kuashijidexibao/article/details/112971657">https://blog.csdn.net/kuashijidexibao/article/details/112971657</a></p><p><a href="https://zhuanlan.zhihu.com/p/259728821">https://zhuanlan.zhihu.com/p/259728821</a></p><p>添加相册<br><a href="https://www.cnblogs.com/chendeqiang/p/12861726.html">https://www.cnblogs.com/chendeqiang/p/12861726.html</a><br><a href="https://blog.csdn.net/weixin_39759247/article/details/107055255">https://blog.csdn.net/weixin_39759247/article/details/107055255</a></p>]]></content>
    
    
    <categories>
      
      <category>建设博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Matery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022-Hello World</title>
    <link href="/2022/06/26/2022-hello-world/"/>
    <url>/2022/06/26/2022-hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="我换了个马甲又回来了"><a href="#我换了个马甲又回来了" class="headerlink" title="我换了个马甲又回来了"></a>我换了个马甲又回来了</h1><p>好久没有写博客了，最近整理电脑文件，发现这个闲置的角落。</p><p>自认为这件事很有意义，于是我打扫了一下卫生，换了个皮肤，瞬间清爽了许多。</p><p>没有那么多的花里胡哨，我只需要清爽简单。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker实战-基于Docker的Apache-Django-Mysql应用容器化</title>
    <link href="/2019/09/15/Docker%E5%AE%9E%E6%88%98-Apache-Django-Mysql%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    <url>/2019/09/15/Docker%E5%AE%9E%E6%88%98-Apache-Django-Mysql%E5%AE%B9%E5%99%A8%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="基于Docker的Apache-Django-Mysql应用容器化"><a href="#基于Docker的Apache-Django-Mysql应用容器化" class="headerlink" title="基于Docker的Apache-Django-Mysql应用容器化"></a>基于Docker的Apache-Django-Mysql应用容器化</h2><p>使用Dockerfile+compose的方式实战部署Django项目</p><span id="more"></span><h3 id="安装docker与compose，准备需要用到的-image"><a href="#安装docker与compose，准备需要用到的-image" class="headerlink" title="安装docker与compose，准备需要用到的 image"></a>安装docker与compose，准备需要用到的 image</h3><p>这里在centos7上安装，详细过程看前面文章,这里只记录版本号<br>docker版本信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@centos-7</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># docker version</span><br><span class="hljs-attr">Client:</span> <span class="hljs-string">Docker</span> <span class="hljs-string">Engine</span> <span class="hljs-bullet">-</span> <span class="hljs-string">Community</span><br> <span class="hljs-attr">Version:</span>           <span class="hljs-number">19.03</span><span class="hljs-number">.2</span><br> <span class="hljs-attr">API version:</span>       <span class="hljs-number">1.40</span><br> <span class="hljs-attr">Go version:</span>        <span class="hljs-string">go1.12.8</span><br> <span class="hljs-attr">Git commit:</span>        <span class="hljs-string">6a30dfc</span><br> <span class="hljs-attr">Built:</span>             <span class="hljs-string">Thu</span> <span class="hljs-string">Aug</span> <span class="hljs-number">29</span> <span class="hljs-number">05</span><span class="hljs-string">:28:55</span> <span class="hljs-number">2019</span><br> <span class="hljs-attr">OS/Arch:</span>           <span class="hljs-string">linux/amd64</span><br> <span class="hljs-attr">Experimental:</span>      <span class="hljs-literal">false</span><br><br><span class="hljs-attr">Server:</span> <span class="hljs-string">Docker</span> <span class="hljs-string">Engine</span> <span class="hljs-bullet">-</span> <span class="hljs-string">Community</span><br> <span class="hljs-attr">Engine:</span><br>  <span class="hljs-attr">Version:</span>          <span class="hljs-number">19.03</span><span class="hljs-number">.2</span><br>  <span class="hljs-attr">API version:</span>      <span class="hljs-number">1.40</span> <span class="hljs-string">(minimum</span> <span class="hljs-string">version</span> <span class="hljs-number">1.12</span><span class="hljs-string">)</span><br>  <span class="hljs-attr">Go version:</span>       <span class="hljs-string">go1.12.8</span><br>  <span class="hljs-attr">Git commit:</span>       <span class="hljs-string">6a30dfc</span><br>  <span class="hljs-attr">Built:</span>            <span class="hljs-string">Thu</span> <span class="hljs-string">Aug</span> <span class="hljs-number">29</span> <span class="hljs-number">05</span><span class="hljs-string">:27:34</span> <span class="hljs-number">2019</span><br>  <span class="hljs-attr">OS/Arch:</span>          <span class="hljs-string">linux/amd64</span><br>  <span class="hljs-attr">Experimental:</span>     <span class="hljs-literal">false</span><br> <span class="hljs-attr">containerd:</span><br>  <span class="hljs-attr">Version:</span>          <span class="hljs-number">1.2</span><span class="hljs-number">.6</span><br>  <span class="hljs-attr">GitCommit:</span>        <span class="hljs-string">894b81a4b802e4eb2a91d1ce216b8817763c29fb</span><br> <span class="hljs-attr">runc:</span><br>  <span class="hljs-attr">Version:</span>          <span class="hljs-number">1.0</span><span class="hljs-number">.0</span><span class="hljs-string">-rc8</span><br>  <span class="hljs-attr">GitCommit:</span>        <span class="hljs-string">425e105d5a03fabd737a126ad93d62a9eeede87f</span><br> <span class="hljs-attr">docker-init:</span><br>  <span class="hljs-attr">Version:</span>          <span class="hljs-number">0.18</span><span class="hljs-number">.0</span><br>  <span class="hljs-attr">GitCommit:</span>        <span class="hljs-string">fec3683</span><br></code></pre></td></tr></table></figure><p>compose 版本信息</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs d">[root<span class="hljs-keyword">@centos</span>-<span class="hljs-number">7</span> ~]# docker-compose <span class="hljs-keyword">version</span><br>docker-compose <span class="hljs-keyword">version</span> <span class="hljs-number">1.24</span><span class="hljs-number">.1</span>, build <span class="hljs-number">4667896</span>b<br>docker-py <span class="hljs-keyword">version</span>: <span class="hljs-number">3.7</span><span class="hljs-number">.3</span><br>CPython <span class="hljs-keyword">version</span>: <span class="hljs-number">3.6</span><span class="hljs-number">.8</span><br>OpenSSL <span class="hljs-keyword">version</span>: OpenSSL <span class="hljs-number">1.1</span><span class="hljs-number">.0</span>j  <span class="hljs-number">20</span> Nov <span class="hljs-number">2018</span><br></code></pre></td></tr></table></figure><p>查找Docker Hub上的mysql镜像</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">docker <span class="hljs-built_in">search</span> mysql<br>docker <span class="hljs-built_in">search</span> centos<br></code></pre></td></tr></table></figure><p>拉取官方的镜像</p><p>国内访问 hub.docker.com 网速不好,建议配置阿里云加速或网易云加速</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull mysql:<span class="hljs-number">5</span>.<span class="hljs-number">7</span><br><br><span class="hljs-attribute">docker</span> pull centos:<span class="hljs-number">6</span>.<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><h3 id="准备文件结构docker文件夹目录结构"><a href="#准备文件结构docker文件夹目录结构" class="headerlink" title="准备文件结构docker文件夹目录结构"></a>准备文件结构<strong>docker文件夹目录结构</strong></h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">└── docker<br>    │ <br>    ├── docker-compose.yml          <span class="hljs-comment"># docker-compose 配置文件</span><br>    ├── Dockerfile                  <span class="hljs-comment"># 构建httpd+django容器的Dockerfile</span><br>    │   <br>    └── work<br>        └── html                    <span class="hljs-comment"># 项目代码源文件本地持久化</span><br>        │   └── <span class="hljs-keyword">dist </span>               <span class="hljs-comment"># Angular前端</span><br>        │   └── PmsService          <span class="hljs-comment"># Django后端</span><br>        │ <br>        └── httpd<br>        │   ├── PmsService.conf     <span class="hljs-comment"># httpd配置文件</span><br>        │   └── mod_wsgi.conf       <span class="hljs-comment"># wsgi配置文件</span><br>        │ <br>        └── mysql                   <span class="hljs-comment"># 数据库持久化主机挂载目录</span><br>       <br></code></pre></td></tr></table></figure><h3 id="构建httpd-django容器的Dockerfile"><a href="#构建httpd-django容器的Dockerfile" class="headerlink" title="构建httpd+django容器的Dockerfile"></a><strong>构建httpd+django容器的Dockerfile</strong></h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs awk">FROM centos:<span class="hljs-number">6.8</span><br><br>LABEL version=<span class="hljs-string">&quot;1.0&quot;</span><br>LABEL author=Anderwin<br>LABEL description=<span class="hljs-string">&quot;httpd+wsgi+django&quot;</span><br><br><span class="hljs-comment"># centos：7和centos：latest基本容器中都包含Systemd，但是默认情况下它不处于活动状态。</span><br><span class="hljs-comment"># 为了使用systemd，您将删除了许多可能导致问题的文件</span><br><br>RUN (cd <span class="hljs-regexp">/lib/</span>systemd<span class="hljs-regexp">/system/</span>sysinit.target.wants/; <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> *; <span class="hljs-keyword">do</span> [ <span class="hljs-variable">$i</span> == \<br>systemd-tmpfiles-setup.service ] || rm -f <span class="hljs-variable">$i</span>; done); \<br>rm -f <span class="hljs-regexp">/lib/</span>systemd<span class="hljs-regexp">/system/mu</span>lti-user.target.wants/*;\<br>rm -f <span class="hljs-regexp">/etc/</span>systemd<span class="hljs-regexp">/system/</span>*.wants/*;\<br>rm -f <span class="hljs-regexp">/lib/</span>systemd<span class="hljs-regexp">/system/</span>local-fs.target.wants/*; \<br>rm -f <span class="hljs-regexp">/lib/</span>systemd<span class="hljs-regexp">/system/</span>sockets.target.wants/*udev*; \<br>rm -f <span class="hljs-regexp">/lib/</span>systemd<span class="hljs-regexp">/system/</span>sockets.target.wants/*initctl*; \<br>rm -f <span class="hljs-regexp">/lib/</span>systemd<span class="hljs-regexp">/system/</span>basic.target.wants/*;\<br>rm -f <span class="hljs-regexp">/lib/</span>systemd<span class="hljs-regexp">/system/</span>anaconda.target.wants/*;<br><br><br><span class="hljs-comment"># yum 更新/安装pip源/安装环境软件</span><br>RUN yum -y update &amp;&amp; yum clean all &amp;&amp; yum -y install epel-release \<br>    &amp;&amp; yum --enablerepo=epel install -y python-pip \<br>    &amp;&amp; yum install -y gcc libffi-devel python-devel openssl-devel \<br>    &amp;&amp; yum install -y mysql-devel python-devel python-setuptools \<br>    &amp;&amp; yum -y install httpd* \<br>    &amp;&amp; pip install -i https:<span class="hljs-regexp">//</span>pypi.tuna.tsinghua.edu.cn/simple django==<span class="hljs-number">1.6</span>.<span class="hljs-number">2</span> \<br>    &amp;&amp; pip install -i https:<span class="hljs-regexp">//</span>pypi.tuna.tsinghua.edu.cn/simple djangorestframework==<span class="hljs-number">2.3</span>.<span class="hljs-number">14</span> \<br>    &amp;&amp; pip install MySQL-python &amp;&amp; pip install mod_wsgi &amp;&amp; mod_wsgi-express install-module \<br>    &amp;&amp; chkconfig --level <span class="hljs-number">2345</span> httpd on<br><br><br><span class="hljs-comment"># 暴露端口</span><br>EXPOSE <span class="hljs-number">80</span><br>EXPOSE <span class="hljs-number">8007</span><br><br><span class="hljs-comment"># 开机启动 apache 服务</span><br>CMD [<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;service httpd start;bash&quot;</span>]<br><br></code></pre></td></tr></table></figure><h3 id="编辑wsgi配置文件-mod-wsgi-conf"><a href="#编辑wsgi配置文件-mod-wsgi-conf" class="headerlink" title="编辑wsgi配置文件 mod_wsgi.conf"></a>编辑wsgi配置文件 mod_wsgi.conf</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">LoadModule</span> wsgi_module <span class="hljs-string">&quot;/usr/lib64/httpd/modules/mod_wsgi-py26.so&quot;</span><br><span class="hljs-attribute">WSGIPythonHome</span> <span class="hljs-string">&quot;/usr&quot;</span><br></code></pre></td></tr></table></figure><h3 id="编辑httpd配置文件-PmsService-conf"><a href="#编辑httpd配置文件-PmsService-conf" class="headerlink" title="编辑httpd配置文件 PmsService.conf"></a>编辑httpd配置文件 PmsService.conf</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 主配置文件已经默认监听80端口，此处重复监听会报错</span><br><br><span class="hljs-comment"># 后端服务</span><br><span class="hljs-attribute">Listen</span> <span class="hljs-number">8007</span><br><span class="hljs-section">&lt;VirtualHost *<span class="hljs-number">:8007</span>&gt;</span><br>        <span class="hljs-attribute">WSGIScriptAlias</span> / <span class="hljs-string">&quot;var/www/html/PmsService/PmsService/wsgi.py&quot;</span><br>        <span class="hljs-attribute">ServerName</span> www.pmsservice.com<br>        <span class="hljs-attribute">Alias</span> /static /var/www/html/PmsService/static<br>        <span class="hljs-section">&lt;Directory <span class="hljs-string">&quot;/var/www/html/PmsService&quot;</span>&gt;</span><br>                <span class="hljs-attribute">Order</span> <span class="hljs-literal">Allow</span>,<span class="hljs-literal">Deny</span><br>                <span class="hljs-attribute">Allow</span> from <span class="hljs-literal">all</span><br>        <span class="hljs-section">&lt;/Directory&gt;</span><br><span class="hljs-section">&lt;/VirtualHost&gt;</span><br><br><span class="hljs-comment"># 前端服务</span><br><span class="hljs-section">&lt;VirtualHost *<span class="hljs-number">:80</span>&gt;</span><br>       <span class="hljs-attribute">DocumentRoot</span> /var/www/html/dist<br>       <span class="hljs-section">&lt;Directory  /var/www/html/dist&gt;</span><br>            <span class="hljs-attribute">Order</span> <span class="hljs-literal">Allow</span>,<span class="hljs-literal">Deny</span><br>            <span class="hljs-attribute">Allow</span> from <span class="hljs-literal">All</span><br>           <span class="hljs-section">&lt;/Directory&gt;</span><br><span class="hljs-section">&lt;/VirtualHost&gt;</span><br></code></pre></td></tr></table></figure><p>注意，Django项目的setting.py中连接数据库处要写成数据库容器名“db”</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><br>DATABASES = &#123;<br>    &#x27;default&#x27;: &#123;<br>        &#x27;ENGINE&#x27;: &#x27;django.db.backends.mysql&#x27;,<br>        &#x27;NAME&#x27;: &#x27;haerbinxi_users&#x27;,<br>        &#x27;USER&#x27;: &#x27;root&#x27;,<br>        &#x27;PASSWORD&#x27;: &#x27;Anderwin@<span class="hljs-number">168168</span>&#x27;,<br>        &#x27;HOST&#x27;: &#x27;db&#x27;,   <span class="hljs-meta"># 此处与docker-compose.yml处一致，不可写成ip地址</span><br>        &#x27;PORT&#x27;: &#x27;<span class="hljs-number">3306</span>&#x27;,<br>    &#125;,<br></code></pre></td></tr></table></figure><h3 id="编写docker-compose-yml配置文件"><a href="#编写docker-compose-yml配置文件" class="headerlink" title="编写docker-compose.yml配置文件"></a>编写<strong>docker-compose.yml配置文件</strong></h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># docker-compose版本</span><br><span class="hljs-symbol">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-meta"># 服务</span><br><span class="hljs-symbol">services:</span><br><span class="hljs-symbol">  web:</span><br>    <span class="hljs-meta"># 构建镜像</span><br><span class="hljs-symbol">    build:</span> .<br>    <span class="hljs-meta"># 运行容器的名称</span><br><span class="hljs-symbol">    container_name:</span> webservice<br>    <span class="hljs-meta"># 允许后台运行</span><br><span class="hljs-symbol">    tty:</span> true<br>    <span class="hljs-meta"># 端口映射</span><br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-string">&quot;80:80&quot;</span><br>      - <span class="hljs-string">&quot;8007:8007&quot;</span><br>    <br>    <span class="hljs-meta"># 挂载卷 </span><br>    <span class="hljs-meta"># 项目文件和apache配置文件本地持久化挂载卷</span><br><span class="hljs-symbol">    volumes:</span><br>      - ~<span class="hljs-keyword">/docker/</span>work/html:<span class="hljs-keyword">/var/</span>www/html<br>      - ~<span class="hljs-keyword">/docker/</span>work/httpd:<span class="hljs-keyword">/etc/</span>httpd/conf.d<br><br>    <span class="hljs-meta"># 依赖db服务，先启动db再启动web</span><br><span class="hljs-symbol">    depends_on:</span><br>      - db<br>    <span class="hljs-meta"># 宕机即重启</span><br><span class="hljs-symbol">    restart:</span> always<br><br>    <span class="hljs-meta"># 连接数据库</span><br><span class="hljs-symbol">    links:</span><br>      - db<br><span class="hljs-symbol">  db:</span><br>    <span class="hljs-meta"># 拉取镜像</span><br><span class="hljs-symbol">    image:</span> mysql:<span class="hljs-number">5.7</span><br>    <span class="hljs-meta"># 运行容器的名称</span><br><span class="hljs-symbol">    container_name:</span> mysql<br><br>    <span class="hljs-meta"># 环境变量 数据库密码需要复杂密码，简单密码导致无法连接数据库（1045错误）</span><br><span class="hljs-symbol">    environment:</span><br>      - MYSQL_ROOT_PASSWORD=Anderwin@<span class="hljs-number">168168</span><br>    <span class="hljs-meta"># 端口映射</span><br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-string">&quot;3306:3306&quot;</span><br>    <span class="hljs-meta"># 宕机即重启</span><br><span class="hljs-symbol">    restart:</span> always<br><br>    <span class="hljs-meta"># 挂载卷</span><br><span class="hljs-symbol">    volumes:</span><br>      <span class="hljs-meta"># 数据库本地持久化挂载卷</span><br>      - ~<span class="hljs-keyword">/docker/</span>work/mysql:<span class="hljs-keyword">/var/</span>lib/mysql<br>    <br></code></pre></td></tr></table></figure><h3 id="在docker-compose所在目录docker-x2F-构建、启动项目"><a href="#在docker-compose所在目录docker-x2F-构建、启动项目" class="headerlink" title="在docker-compose所在目录docker&#x2F; 构建、启动项目"></a>在docker-compose所在目录docker&#x2F; 构建、启动项目</h3><h4 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose build</span><br><br></code></pre></td></tr></table></figure><h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose up -d</span><br><br></code></pre></td></tr></table></figure><h4 id="使用Navicat-导入项目数据库后就可以在浏览器访问web网页了"><a href="#使用Navicat-导入项目数据库后就可以在浏览器访问web网页了" class="headerlink" title="使用Navicat 导入项目数据库后就可以在浏览器访问web网页了"></a>使用Navicat 导入项目数据库后就可以在浏览器访问web网页了</h4><h4 id="关闭项目"><a href="#关闭项目" class="headerlink" title="关闭项目"></a>关闭项目</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose down</span><br><br></code></pre></td></tr></table></figure><h3 id="项目打包迁移部署"><a href="#项目打包迁移部署" class="headerlink" title="项目打包迁移部署"></a>项目打包迁移部署</h3><h4 id="保存镜像到tar文件"><a href="#保存镜像到tar文件" class="headerlink" title="保存镜像到tar文件"></a>保存镜像到tar文件</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> save docker_web &gt; docker_web.tar<br><span class="hljs-attribute">docker</span> save mysql:<span class="hljs-number">5</span>.<span class="hljs-number">7</span> &gt; mysql:<span class="hljs-number">5</span>.<span class="hljs-number">7</span>.tar<br><br></code></pre></td></tr></table></figure><p>在目标目标主机安装好docker以及compose<br>把打包好的镜像拷贝到目标主机用户目录下，减压本地镜像包</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> load &lt; docker_web.tar<br><span class="hljs-attribute">docker</span> load &lt; mysql:<span class="hljs-number">5</span>.<span class="hljs-number">7</span>.tar<br><br></code></pre></td></tr></table></figure><h4 id="目标主机启动项目"><a href="#目标主机启动项目" class="headerlink" title="目标主机启动项目"></a>目标主机启动项目</h4><p>将打包好的docker文件夹拷贝到目标主机的用户目录下<br>windows下需要修改docker-compose挂载卷的本地目录<br>在docker文件夹下使用下面命令启动项目</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose up -d</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker实战-构建Apache+wsgi+Django镜像</title>
    <link href="/2019/09/15/Docker%E5%AE%9E%E6%88%98-Apache-wsgi-Django%E9%95%9C%E5%83%8F/"/>
    <url>/2019/09/15/Docker%E5%AE%9E%E6%88%98-Apache-wsgi-Django%E9%95%9C%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="使用commit构建Apache-wsgi-Django镜像"><a href="#使用commit构建Apache-wsgi-Django镜像" class="headerlink" title="使用commit构建Apache+wsgi+Django镜像"></a>使用commit构建Apache+wsgi+Django镜像</h2><p>**docker commit :**从容器创建一个新的镜像</p><span id="more"></span><h3 id="运行一个基础镜像"><a href="#运行一个基础镜像" class="headerlink" title="运行一个基础镜像"></a>运行一个基础镜像</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -dit centos:<span class="hljs-number">6</span>.<span class="hljs-number">8</span> bash<br></code></pre></td></tr></table></figure><ul><li><strong>-d:</strong> 后台运行容器，并返回容器ID；</li><li><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</li><li><strong>-P:</strong> 随机端口映射，容器内部端口<strong>随机</strong>映射到主机的高端口</li><li><strong>-p:</strong> 指定端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></li><li><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li><li><strong>docker exec ：</strong>在运行的容器中执行命令</li></ul><p>通过 <strong>docker ps -a</strong> 命令查看已经在运行的容器，然后使用容器 ID在容器中开启一个交互模式的终端</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker exec -it <span class="hljs-number">7</span>ef9388bbf2b <span class="hljs-regexp">/bin/</span>bash<br></code></pre></td></tr></table></figure><p><strong>交互模式进入容器：</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker <span class="hljs-built_in">run</span> -<span class="hljs-keyword">it</span> 镜像名 bash<br>docker exec -<span class="hljs-keyword">it</span> 容器<span class="hljs-built_in">id</span> bash<br></code></pre></td></tr></table></figure><hr><h3 id="安装需要的软件包以及模块"><a href="#安装需要的软件包以及模块" class="headerlink" title="安装需要的软件包以及模块"></a>安装需要的软件包以及模块</h3><h4 id="安装pip源"><a href="#安装pip源" class="headerlink" title="安装pip源"></a><strong>安装pip源</strong></h4><p>yum updata</p><p>yum -y install epel-release</p><p>编辑文件的每一个[epel]的第三行去掉注释，第四行注释掉，完成效果如下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/yum</span>.repos.d/epel.repo <br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[epel]</span><br><span class="hljs-attr">name</span>=Extra Packages for Enterprise Linux <span class="hljs-number">6</span> - <span class="hljs-variable">$basearch</span><br><span class="hljs-attr">baseurl</span>=http://download.fedoraproject.org/pub/epel/<span class="hljs-number">6</span>/<span class="hljs-variable">$basearch</span><br><span class="hljs-comment">#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-6&amp;arch=$basearch</span><br><span class="hljs-attr">failovermethod</span>=priority<br><span class="hljs-attr">enabled</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">gpgkey</span>=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><hr><h4 id="安装环境软件"><a href="#安装环境软件" class="headerlink" title="安装环境软件"></a><strong>安装环境软件</strong></h4><p>yum –enablerepo&#x3D;epel install -y python-pip</p><p>pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a> django&#x3D;&#x3D;1.6.2</p><p>pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a> djangorestframework&#x3D;&#x3D;2.3.14</p><p>yum install -y gcc libffi-devel python-devel openssl-devel</p><p>yum install -y mysql-devel python-devel python-setuptools </p><p>pip install MySQL-python</p><hr><h4 id="安装apache"><a href="#安装apache" class="headerlink" title="安装apache"></a><strong>安装apache</strong></h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">yum -y install httpd*  <span class="hljs-comment">--安装apache</span><br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">rpm -<span class="hljs-keyword">qa</span> | <span class="hljs-keyword">grep</span> httpd     --查看安装的http包<br></code></pre></td></tr></table></figure><p>查看apache是否启动</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-number">1</span>.查看端口<br><br>首先要知道apache的端口，比如说<span class="hljs-number">80</span>端口；<br>查看端口是否被开启和监听<br>netstat -<span class="hljs-keyword">an</span> | <span class="hljs-keyword">grep</span> :<span class="hljs-number">80</span><br><br><span class="hljs-number">2</span>.查看进程<br><span class="hljs-keyword">ps</span> -ef |<span class="hljs-keyword">grep</span> httpd<br><span class="hljs-keyword">ps</span> -aux | <span class="hljs-keyword">grep</span> httpd<br>如果看到许多（一般是<span class="hljs-number">4</span>到<span class="hljs-number">5</span>个）输出就说明对了。<br></code></pre></td></tr></table></figure><p>启动Apache网站检查</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">service httpd <span class="hljs-built_in">start</span>            <span class="hljs-comment">--启动Apache网站  </span><br>service httpd <span class="hljs-built_in">stop</span>             <span class="hljs-comment">--停止Apache网站  </span><br>service httpd restart          <span class="hljs-comment">--重启Apache网站</span><br></code></pre></td></tr></table></figure><hr><h4 id="安装python2-7的mod-wsgi"><a href="#安装python2-7的mod-wsgi" class="headerlink" title="安装python2.7的mod_wsgi"></a><strong>安装python2.7的mod_wsgi</strong></h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> mod_wsgi<br></code></pre></td></tr></table></figure><p>配置apache加载wsgi模块</p><p>使用<em>mod_wsgi-express install-module</em>查询mod_wsgi.so的路径，输出如下:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@95d28530ae06</span> conf.d]<span class="hljs-meta"># mod_wsgi-express install-module</span><br>LoadModule wsgi_module <span class="hljs-string">&quot;/usr/lib64/httpd/modules/mod_wsgi-py26.so&quot;</span><br>WSGIPythonHome <span class="hljs-string">&quot;/usr&quot;</span><br></code></pre></td></tr></table></figure><p>在Apache模块配置目录&#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;创建一个mod_wsgi.conf配置文件，加入上面的内容</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vi</span> mod_wsgi.<span class="hljs-keyword">conf</span><br><br>LoadModule wsgi_module <span class="hljs-string">&quot;/usr/lib64/httpd/modules/mod_wsgi-py26.so&quot;</span><br>WSGIPythonHome <span class="hljs-string">&quot;/usr&quot;</span><br></code></pre></td></tr></table></figure><p>重启Apache服务</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service httpd restart</span> <br></code></pre></td></tr></table></figure><hr><h4 id="设置开机启动Apache"><a href="#设置开机启动Apache" class="headerlink" title="设置开机启动Apache"></a><strong>设置开机启动Apache</strong></h4><p>先用查询apache和mysql服务是否存在，不存在则需要手动添加</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">chkconfig <span class="hljs-comment">--list</span><br></code></pre></td></tr></table></figure><p>设置httpd 在运行级别为2、3、4、5情况都为开启状态</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chkconfig</span> --level <span class="hljs-number">2345</span> httpd <span class="hljs-literal">on</span><br></code></pre></td></tr></table></figure><p>重启Apache服务</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service httpd restart</span> <br></code></pre></td></tr></table></figure><hr><h3 id="生成新镜像"><a href="#生成新镜像" class="headerlink" title="生成新镜像"></a>生成新镜像</h3><p>本地需要的程序都准备完成后使用commit生成新的镜像</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> commit -m <span class="hljs-string">&quot;Apache/2.2.15-mod_wsgi-py26-Django1.6.2&quot;</span> -a li <span class="hljs-number">95</span>d28530ae06 centos/apache-wsgi-django:<span class="hljs-number">1</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>**docker commit :**从容器创建一个新的镜像。</p><p>语法 docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</p><p>OPTIONS说明：</p><ul><li>**-a :**提交的镜像作者；</li><li>**-c :**使用Dockerfile指令来创建镜像；</li><li>**-m :**提交时的说明文字；</li><li>**-p :**在commit时，将容器暂停。</li></ul><hr><h3 id="docker-save-将指定镜像保存成-tar-归档文件。"><a href="#docker-save-将指定镜像保存成-tar-归档文件。" class="headerlink" title="docker save : 将指定镜像保存成 tar 归档文件。"></a><strong>docker save : 将指定镜像保存成 tar 归档文件。</strong></h3><p>将镜像 centos&#x2F;apache-wsgi-django:1.0 生成 centos&#x2F;apache-wsgi-django.tar 文档</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> save -o centos/apache-wsgi-django.tar centos/apache-wsgi-django:<span class="hljs-number">1</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>语法：docker save [OPTIONS] IMAGE [IMAGE…]</p><p>OPTIONS 说明：</p><ul><li>**-o :**输出到的文件。</li></ul><hr><h3 id="将项目文件导入容器并赋予执行权限（可选部分）"><a href="#将项目文件导入容器并赋予执行权限（可选部分）" class="headerlink" title="将项目文件导入容器并赋予执行权限（可选部分）"></a><strong>将项目文件导入容器并赋予执行权限</strong>（可选部分）</h3><p>为方便批量部署可以把项目文件导入容器，然后再构建镜像。优点：方便批量部署。缺点：项目环境不可重复使用</p><p>将主机的项目文件目录拷贝到容器目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker cp .<span class="hljs-regexp">/ 95d28530ae06:/</span>var<span class="hljs-regexp">/www/</span>html<br>docker cp .<span class="hljs-regexp">/testprj.conf 95d28530ae06:/</span>etc<span class="hljs-regexp">/httpd/</span>conf.d<br></code></pre></td></tr></table></figure><p>赋予权限：执行某个容器的某条命令，但又不想进入容器内，编写脚本文件</p><p>vi start.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>DOCKER_ID=95d28530ae06<br>sudo docker <span class="hljs-built_in">exec</span> -it <span class="hljs-variable">$DOCKER_ID</span> /bin/bash -c <span class="hljs-string">&#x27;chcon -R -t httpd_user_content_t /var/www/html &amp;&amp; chmod -R 777 /var/www/html &amp;&amp; service httpd restart&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker实战-安装卸载</title>
    <link href="/2019/09/15/Docker%E5%AE%9E%E6%88%98-%E5%AE%89%E8%A3%85%E5%8D%B8%E8%BD%BD/"/>
    <url>/2019/09/15/Docker%E5%AE%9E%E6%88%98-%E5%AE%89%E8%A3%85%E5%8D%B8%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="获取Docker引擎-CentOS社区"><a href="#获取Docker引擎-CentOS社区" class="headerlink" title="获取Docker引擎 - CentOS社区"></a>获取Docker引擎 - CentOS社区</h1><p>要开始使用CentOS上的Docker Engine - 社区，请确保 <a href="https://docs.docker.com/install/linux/docker-ce/centos/#prerequisites">满足先决条件</a>，然后 <a href="https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce">安装Docker</a>。</p><p>Docker Engine - 发行版的社区二进制文件可从<a href="https://download.docker.com/">download.docker.com</a>获得</p><span id="more"></span><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><h3 id="OS要求"><a href="#OS要求" class="headerlink" title="OS要求"></a>OS要求</h3><p>要安装Docker Engine - Community，您需要CentOS 7的维护版本。不支持或测试存档版本。</p><p>该<code>centos-extras</code>库必须启用。默认情况下，此存储库已启用，但如果已将其禁用，则需要 <a href="https://wiki.centos.org/AdditionalResources/Repositories">重新启用它</a>。</p><p><code>overlay2</code>建议使用存储驱动程序。</p><h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><p>较旧版本的Docker被称为<code>docker</code>或<code>docker-engine</code>。如果已安装这些，请卸载它们以及相关的依赖项。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">$ sudo yum remove docker <span class="hljs-string">\</span><br>                  docker-client <span class="hljs-string">\</span><br>                  docker-client-latest <span class="hljs-string">\</span><br>                  docker-common <span class="hljs-string">\</span><br>                  docker-latest <span class="hljs-string">\</span><br>                  docker-latest-logrotate <span class="hljs-string">\</span><br>                  docker-logrotate <span class="hljs-string">\</span><br>                  docker-engine<br></code></pre></td></tr></table></figure><p>如果<code>yum</code>报告没有安装这些软件包，则可以。</p><p><code>/var/lib/docker/</code>保留包括图像，容器，卷和网络在内的内容。Docker Engine - 社区包现在被调用<code>docker-ce</code>。</p><h2 id="安装Docker-Engine-社区"><a href="#安装Docker-Engine-社区" class="headerlink" title="安装Docker Engine - 社区"></a>安装Docker Engine - 社区</h2><p>您可以根据需要以不同方式安装Docker Engine - 社区：</p><ul><li>大多数用户 <a href="https://docs.docker.com/install/linux/docker-ce/centos/#install-using-the-repository">设置Docker的存储库</a>并从中进行安装，以便于安装和升级任务。这是推荐的方法。</li><li>有些用户下载RPM软件包并 <a href="https://docs.docker.com/install/linux/docker-ce/centos/#install-from-a-package">手动安装</a>并完全手动管理升级。这在诸如在没有访问互联网的气隙系统上安装Docker的情况下非常有用。</li><li>在测试和开发环境中，一些用户选择使用自动 <a href="https://docs.docker.com/install/linux/docker-ce/centos/#install-using-the-convenience-script">便捷脚本</a>来安装Docker。</li></ul><h3 id="使用存储库安装"><a href="#使用存储库安装" class="headerlink" title="使用存储库安装"></a>使用存储库安装</h3><p>在新主机上首次安装Docker Engine - Community之前，需要设置Docker存储库。之后，您可以从存储库安装和更新Docker。</p><h4 id="设置存储库"><a href="#设置存储库" class="headerlink" title="设置存储库"></a>设置存储库</h4><ol><li><p>安装所需的包。<code>yum-utils</code>提供了<code>yum-config-manager</code> 效用，并<code>device-mapper-persistent-data</code>和<code>lvm2</code>由需要 <code>devicemapper</code>存储驱动程序。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haskell">$ sudo yum install -y yum-utils \<br>  device-mapper-persistent-<span class="hljs-class"><span class="hljs-keyword">data</span> \</span><br>  lvm2<br></code></pre></td></tr></table></figure></li><li><p>使用以下命令设置<strong>稳定</strong>存储库。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ sudo yum-config-manager \<br>    --add-repo \<br>    https:<span class="hljs-regexp">//</span>download.docker.com<span class="hljs-regexp">/linux/</span>centos/docker-ce.repo<br></code></pre></td></tr></table></figure></li></ol><h4 id="安装DOCKER-ENGINE-社区"><a href="#安装DOCKER-ENGINE-社区" class="headerlink" title="安装DOCKER ENGINE - 社区"></a>安装DOCKER ENGINE - 社区</h4><ol><li><p>安装<em>最新版本</em>的Docker Engine - 社区和容器，或者转到下一步安装特定版本：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ sudo yum install docker-<span class="hljs-keyword">ce</span> docker-<span class="hljs-keyword">ce</span>-cli containerd.io<br></code></pre></td></tr></table></figure><p>如果提示接受GPG密钥，请验证指纹是否匹配<code>060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35</code>，如果匹配，则接受该指纹 。</p><blockquote><p>有多个Docker存储库？</p><p>如果您启用了多个Docker存储库，则在未指定<code>yum install</code>或 <code>yum update</code>命令中的版本的情况下安装或更新始终会安装尽可能高的版本，这可能不适合您的稳定性需求。</p></blockquote><p>Docker已安装但尚未启动。该<code>docker</code>组已创建，但没有用户添加到该组。</p></li><li><p>要安装<em>特定版本</em>的Docker Engine - Community，请列出repo中的可用版本，然后选择并安装：</p><p>一个。列出并对您的仓库中可用的版本进行排序。此示例按版本号对结果进行排序，从最高到最低，并被截断：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ yum <span class="hljs-keyword">list</span> docker-<span class="hljs-keyword">ce</span> --showduplicates | <span class="hljs-keyword">sort</span> -r<br><br>docker-<span class="hljs-keyword">ce</span>.x86_64  <span class="hljs-number">3</span>:<span class="hljs-number">18.09</span>.<span class="hljs-number">1</span>-<span class="hljs-number">3</span>.el7                     docker-<span class="hljs-keyword">ce</span>-stable<br>docker-<span class="hljs-keyword">ce</span>.x86_64  <span class="hljs-number">3</span>:<span class="hljs-number">18.09</span>.<span class="hljs-number">0</span>-<span class="hljs-number">3</span>.el7                     docker-<span class="hljs-keyword">ce</span>-stable<br>docker-<span class="hljs-keyword">ce</span>.x86_64  <span class="hljs-number">18.06</span>.<span class="hljs-number">1</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">3</span>.el7                    docker-<span class="hljs-keyword">ce</span>-stable<br>docker-<span class="hljs-keyword">ce</span>.x86_64  <span class="hljs-number">18.06</span>.<span class="hljs-number">0</span>.<span class="hljs-keyword">ce</span>-<span class="hljs-number">3</span>.el7                    docker-<span class="hljs-keyword">ce</span>-stable<br></code></pre></td></tr></table></figure><p>返回的列表取决于启用的存储库，并且特定于您的CentOS版本（<code>.el7</code>在此示例中以后缀表示）。</p><p>湾 通过其完全限定的包名称安装特定版本，包名称（<code>docker-ce</code>）加上从第一个冒号（<code>:</code>）开始的版本字符串（第2列），直到第一个连字符，用连字符（<code>-</code>）分隔。例如，<code>docker-ce-18.09.1</code>。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ sudo yum install docker-<span class="hljs-keyword">ce</span>-<span class="hljs-symbol">&lt;VERSION_STRING&gt;</span> docker-<span class="hljs-keyword">ce</span>-cli-<span class="hljs-symbol">&lt;VERSION_STRING&gt;</span> containerd.io<br></code></pre></td></tr></table></figure><p>Docker已安装但尚未启动。该<code>docker</code>组已创建，但没有用户添加到该组。</p></li><li><p>启动Docker。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> sudo systemctl <span class="hljs-built_in">start</span> docker<br></code></pre></td></tr></table></figure></li><li><p>通过运行<code>hello-world</code> 映像验证是否正确安装了Docker Engine - 社区。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo docker <span class="hljs-built_in">run</span> hello-world<br></code></pre></td></tr></table></figure><p>此命令下载测试映像并在容器中运行它。当容器运行时，它会打印一条信息性消息并退出。</p></li></ol><h2 id="以非root用户身份管理Docker"><a href="#以非root用户身份管理Docker" class="headerlink" title="以非root用户身份管理Docker"></a>以非root用户身份管理Docker</h2><p>Docker守护程序绑定到Unix套接字而不是TCP端口。默认情况下，Unix套接字由用户拥有<code>root</code>，其他用户只能使用它<code>sudo</code>。Docker守护程序始终以<code>root</code>用户身份运行。</p><p>如果您不想在<code>docker</code>命令前加上<code>sudo</code>，请创建一个名为的Unix组<code>docker</code>并向其添加用户。当Docker守护程序启动时，它会创建一个可由该<code>docker</code>组成员访问的Unix套接字。</p><blockquote><p>警告</p><p>该<code>docker</code>组授予与<code>root</code> 用户等效的权限。有关如何影响系统安全性的详细信息，请参阅 <a href="https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface"><em>Docker Daemon Attack Surface</em></a>。</p></blockquote><p>要创建<code>docker</code>组并添加您的用户：</p><ol><li><p>创建<code>docker</code>组。</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>sudo groupadd docker<br></code></pre></td></tr></table></figure></li><li><p>将您的用户添加到该<code>docker</code>组。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>sudo usermod -aG docker <span class="hljs-variable">$USER</span><br></code></pre></td></tr></table></figure></li><li><p>注销并重新登录，以便重新评估您的组成员身份。</p><p>如果在虚拟机上进行测试，则可能需要重新启动虚拟机才能使更改生效。</p><p>在桌面Linux环境（如X Windows）上，完全注销会话，然后重新登录。</p><p>在Linux上，您还可以运行以下命令来激活对组的更改：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">$ <span class="hljs-keyword">new</span><span class="hljs-type">grp</span> docker <br></code></pre></td></tr></table></figure></li><li><p>验证您是否可以运行<code>docker</code>命令<code>sudo</code>。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ docker <span class="hljs-built_in">run</span> hello-world<br></code></pre></td></tr></table></figure><p>此命令下载测试映像并在容器中运行它。当容器运行时，它会打印一条信息性消息并退出。</p><p>如果<code>sudo</code>在将用户添加到<code>docker</code>组之前最初使用Docker CLI命令，则可能会看到以下错误，表明您的<code>~/.docker/</code>目录由于<code>sudo</code>命令而创建的权限不正确。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs none">WARNING: Error loading config file: /home/user/.docker/config.json -<br>stat /home/user/.docker/config.json: permission denied<br></code></pre></td></tr></table></figure><p>要解决此问题，请删除<code>~/.docker/</code>目录（它会自动重新创建，但任何自定义设置都会丢失），或使用以下命令更改其所有权和权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">chown</span> <span class="hljs-string">&quot;<span class="hljs-variable">$USER</span>&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$USER</span>&quot;</span> /home/<span class="hljs-string">&quot;<span class="hljs-variable">$USER</span>&quot;</span>/.docker -R</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">chmod</span> g+rwx <span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/.docker&quot;</span> -R</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="配置Docker以在启动时启动"><a href="#配置Docker以在启动时启动" class="headerlink" title="配置Docker以在启动时启动"></a>配置Docker以在启动时启动</h2><p>大多数当前的Linux发行版（RHEL，CentOS，Fedora，Ubuntu 16.04及更高版本）用于<a href="https://docs.docker.com/install/linux/linux-postinstall/#systemd"><code>systemd</code></a>管理系统启动时启动的服务。Ubuntu 14.10及以下使用<a href="https://docs.docker.com/install/linux/linux-postinstall/#upstart"><code>upstart</code></a>。</p><h3 id="systemd"><a href="#systemd" class="headerlink" title="systemd"></a><code>systemd</code></h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure><p>要禁用此行为，请<code>disable</code>改用。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo systemctl <span class="hljs-built_in">disable</span> docker<br></code></pre></td></tr></table></figure><h3 id="在Linux系统上安装Compose"><a href="#在Linux系统上安装Compose" class="headerlink" title="在Linux系统上安装Compose"></a>在Linux系统上安装Compose</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot;</span> -o <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br>sudo chmod +x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br></code></pre></td></tr></table></figure><h3 id="配置阿里镜像源"><a href="#配置阿里镜像源" class="headerlink" title="配置阿里镜像源"></a>配置阿里镜像源</h3><p>由于国内访问hub.docker.com速度慢，建议到阿里云申请镜像加速地址。</p><h2 id="卸载Docker-Engine-社区"><a href="#卸载Docker-Engine-社区" class="headerlink" title="卸载Docker Engine - 社区"></a>卸载Docker Engine - 社区</h2><ol><li><p>卸载Docker包：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo yum <span class="hljs-built_in">remove</span> docker-ce<br></code></pre></td></tr></table></figure></li><li><p>主机上的图像，容器，卷或自定义配置文件不会自动删除。要删除所有图像，容器和卷：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">rm</span> -rf /var/lib/docker</span><br></code></pre></td></tr></table></figure></li></ol><p>您必须手动删除任何已编辑的配置文件。</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker基础学习笔记3</title>
    <link href="/2019/09/13/Docker%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/"/>
    <url>/2019/09/13/Docker%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</url>
    
    <content type="html"><![CDATA[<h2 id="关于服务"><a href="#关于服务" class="headerlink" title="关于服务"></a>关于服务</h2><p>在分布式应用程序中，应用程序的不同部分称为“服务”。例如，如果您想象一个视频共享站点，它可能包括一个用于在数据库中存储应用程序数据的服务，一个用户在上传内容后在后台进行视频转码的服务，一个用于前端的服务，等等。</p><p>服务实际上只是“生产中的容器”。服务只运行一个映像，但它编码图像的运行方式 - 它应该使用哪些端口，应该运行多少个容器副本，以便服务具有所需的容量，以及等等。扩展服务会更改运行该软件的容器实例的数量，从而为流程中的服务分配更多计算资源。</p><p>幸运的是，使用Docker平台定义，运行和扩展服务非常容易 - 只需编写一个<code>docker-compose.yml</code>文件即可。</p><span id="more"></span><h2 id="你的第一个docker-compose-yml档案"><a href="#你的第一个docker-compose-yml档案" class="headerlink" title="你的第一个docker-compose.yml档案"></a>你的第一个<code>docker-compose.yml</code>档案</h2><p>一个<code>docker-compose.yml</code>文件是一个YAML文件，它定义了如何Docker容器在生产中应表现。</p><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a><code>docker-compose.yml</code></h3><p>将此文件保存为<code>docker-compose.yml</code>您想要的任何位置。确保已将 <a href="https://docs.docker.com/get-started/part2/">第2部分中</a>创建<a href="https://docs.docker.com/get-started/part2/#share-your-image">的图像推</a>送到注册表，并通过替换 图像详细信息进行更新。<code>.yml``username/repo:tag</code></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-symbol">services:</span><br><span class="hljs-symbol">  web:</span><br>    <span class="hljs-meta"># replace username/repo:tag with your name and image details</span><br><span class="hljs-symbol">    image:</span> username/repo:tag<br><span class="hljs-symbol">    deploy:</span><br><span class="hljs-symbol">      replicas:</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">      resources:</span><br><span class="hljs-symbol">        limits:</span><br><span class="hljs-symbol">          cpus:</span> <span class="hljs-string">&quot;0.1&quot;</span><br><span class="hljs-symbol">          memory:</span> <span class="hljs-number">50</span>M<br><span class="hljs-symbol">      restart_policy:</span><br><span class="hljs-symbol">        condition:</span> on-failure<br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-string">&quot;4000:80&quot;</span><br><span class="hljs-symbol">    networks:</span><br>      - webnet<br><span class="hljs-symbol">networks:</span><br><span class="hljs-symbol">  webnet:</span><br></code></pre></td></tr></table></figure><p>该<code>docker-compose.yml</code>文件告诉Docker执行以下操作：</p><ul><li>拉<a href="https://docs.docker.com/get-started/part2/">我们在步骤2中上传的图像</a>从注册表。</li><li>将该映像的5个实例作为一个被调用的服务运行<code>web</code>，限制每个实例使用，最多只占单个CPU核心时间的10％（这也可以是例如“1.5”表示每个核心的1和半核心），以及50MB RAM。</li><li>如果一个失败，立即重启容器。</li><li>将主机上的端口4000映射到<code>web</code>端口80。</li><li>指示<code>web</code>容器通过称为负载平衡的网络共享端口80 <code>webnet</code>。（在内部，容器本身<code>web</code>在短暂的端口发布到 80端口。）</li><li><code>webnet</code>使用默认设置（负载平衡的覆盖网络）定义网络。</li></ul><h2 id="运行新的负载均衡应用"><a href="#运行新的负载均衡应用" class="headerlink" title="运行新的负载均衡应用"></a>运行新的负载均衡应用</h2><p>在我们<code>docker stack deploy</code>首先运行命令之前：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">docker swarm <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：我们在<a href="https://docs.docker.com/get-started/part4/">第4部分中介绍</a>了该命令的含义。如果您没有运行，<code>docker swarm init</code>则会收到“此节点不是群集管理器”的错误。</p></blockquote><p>现在让我们来运行吧。您需要为您的应用程序命名。在这里，它被设置为 <code>getstartedlab</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">docker stack deploy -c docker-compose.yml getstartedlab<br></code></pre></td></tr></table></figure><p>我们的单个服务堆栈在一台主机上运行已部署映像的5个容器实例。我们来调查吧。</p><p>在我们的应用程序中获取一项服务的服务ID：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker service <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p>查找服务的输出，并<code>web</code>以您的应用名称为前缀。如果您将其命名为与此示例中显示的相同，则名称为 <code>getstartedlab_web</code>。还列出了服务ID，以及副本数，映像名称和公开端口。</p><p>或者，您可以运行<code>docker stack services</code>，然后运行堆栈的名称。以下示例命令允许您查看与<code>getstartedlab</code>堆栈关联的所有服务 ：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> stack services getstartedlab<br><span class="hljs-attribute">ID</span>                  NAME                MODE                REPLICAS            IMAGE               PORTS<br><span class="hljs-attribute">bqpve1djnk0x</span>        getstartedlab_web   replicated          <span class="hljs-number">5</span>/<span class="hljs-number">5</span>                 username/repo:tag   *:<span class="hljs-number">4000</span>-&gt;<span class="hljs-number">80</span>/tcp<br></code></pre></td></tr></table></figure><p>在服务中运行的单个容器称为<strong>任务</strong>。任务被赋予以数字递增的唯一ID，最多为<code>replicas</code>您定义 的数量<code>docker-compose.yml</code>。列出您的服务任务：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker service ps getstartedlab_web</span><br></code></pre></td></tr></table></figure><p>如果您只列出系统上的所有容器，则任务也会显示，但不会被服务过滤：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">docker <span class="hljs-keyword">container</span> <span class="hljs-keyword">ls</span> -q<br></code></pre></td></tr></table></figure><p>您可以<code>curl -4 http://localhost:4000</code>连续多次运行，或者在浏览器中转到该URL并点击刷新几次。</p><p><img src="https://docs.docker.com/get-started/images/app80-in-browser.png" alt="浏览器中的Hello World"></p><p>无论哪种方式，容器ID都会发生变化，从而证明负载均衡; 对于每个请求，以循环方式选择5个任务中的一个来响应。容器ID与上一个命令（<code>docker container ls -q</code>）的输出匹配。</p><p>要查看堆栈的所有任务，您可以运行<code>docker stack ps</code>您的应用程序名称，如以下示例所示：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker stack ps getstartedlab<br>ID                  NAME                  IMAGE               <span class="hljs-keyword">NODE</span>                <span class="hljs-title">DESIRED</span> STATE       CURRENT STATE           ERROR               PORTS<br>uwiaw67sc0eh        getstartedlab_web.<span class="hljs-number">1</span>   username/repo:<span class="hljs-keyword">tag</span>   <span class="hljs-title">docker-desktop</span>      Running             Running <span class="hljs-number">9</span> minutes ago                       <br>sk50xbhmcae7        getstartedlab_web.<span class="hljs-number">2</span>   username/repo:<span class="hljs-keyword">tag</span>   <span class="hljs-title">docker-desktop</span>      Running             Running <span class="hljs-number">9</span> minutes ago                       <br>c4uuw5i6h02j        getstartedlab_web.<span class="hljs-number">3</span>   username/repo:<span class="hljs-keyword">tag</span>   <span class="hljs-title">docker-desktop</span>      Running             Running <span class="hljs-number">9</span> minutes ago                       <br><span class="hljs-number">0</span>dyb70ixu25s        getstartedlab_web.<span class="hljs-number">4</span>   username/repo:<span class="hljs-keyword">tag</span>   <span class="hljs-title">docker-desktop</span>      Running             Running <span class="hljs-number">9</span> minutes ago                       <br>aocrb88ap8b0        getstartedlab_web.<span class="hljs-number">5</span>   username/repo:<span class="hljs-keyword">tag</span>   <span class="hljs-title">docker-desktop</span>      Running             Running <span class="hljs-number">9</span> minutes ago<br></code></pre></td></tr></table></figure><blockquote><p>运行Windows 10？</p><p>Windows 10 PowerShell应该已经<code>curl</code>可用，但如果没有，你可以获得像<a href="https://git-for-windows.github.io/">Git BASH</a>这样的Linux终端模拟器 ，或者下载 <a href="http://gnuwin32.sourceforge.net/packages/wget.htm">与Windows</a> 非常相似的<a href="http://gnuwin32.sourceforge.net/packages/wget.htm">wget</a>。</p></blockquote><blockquote><p>响应时间慢？</p><p>根据您环境的网络配置，容器最多可能需要30秒才能响应HTTP请求。这并不表示Docker或swarm性能，而是我们在本教程后面讨论的未满足的Redis依赖性。目前，访客柜台因同样的原因不起作用; 我们还没有添加服务来保存数据。</p></blockquote><h2 id="扩展应用程序"><a href="#扩展应用程序" class="headerlink" title="扩展应用程序"></a>扩展应用程序</h2><p>您可以通过更改<code>replicas</code>值<code>docker-compose.yml</code>，保存更改并重新运行<code>docker stack deploy</code>命令来扩展应用程序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">docker stack deploy -c docker-compose.yml getstartedlab<br></code></pre></td></tr></table></figure><p>Docker执行就地更新，无需首先拆除堆栈或杀死任何容器。</p><p>现在，重新运行<code>docker container ls -q</code>以查看已重新配置的已部署实例。如果放大副本，则会启动更多任务，从而启动更多容器。</p><h3 id="取下应用程序和群"><a href="#取下应用程序和群" class="headerlink" title="取下应用程序和群"></a>取下应用程序和群</h3><ul><li><p>将应用程序关闭<code>docker stack rm</code>：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">docker <span class="hljs-keyword">stack</span> <span class="hljs-keyword">rm</span> getstartedlab<br></code></pre></td></tr></table></figure></li><li><p>取下群。</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">docker swarm <span class="hljs-literal">leave</span> --<span class="hljs-literal">force</span><br></code></pre></td></tr></table></figure></li></ul><p>使用Docker站起来扩展您的应用程序就像这一样简单。您已经朝着学习如何在生产中运行容器迈出了一大步。接下来，您将学习如何在Docker机器群集上运行此应用程序作为真正的群体。</p><blockquote><p><strong>注意</strong>：像这样的撰写文件用于使用Docker定义应用程序，可以使用<a href="https://docs.docker.com/docker-cloud/">Docker Cloud</a>或使用<a href="https://www.docker.com/enterprise-edition">Docker Enterprise Edition</a>选择的任何硬件或云提供程序 上载到云提供程序</p></blockquote><p>回顾一下，虽然键入<code>docker run</code>很简单，但生产中容器的真正实现是将其作为服务运行。服务在Compose文件中编码容器的行为，此文件可用于扩展，限制和重新部署我们的应用程序。服务的更改可以在运行时使用启动服务的相同命令来应用： <code>docker stack deploy</code>。</p><p>在此阶段要探索的一些命令：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment"># 列出堆栈或应用程序</span><br>docker stack ls                                            <span class="hljs-comment"># List stacks or apps</span><br><br><span class="hljs-comment"># 运行指定的Compose文件</span><br>docker stack deploy -c <span class="hljs-variable">&lt;composefile&gt;</span> <span class="hljs-variable">&lt;appname&gt;</span>  <span class="hljs-comment"># Run the specified Compose file</span><br><br><span class="hljs-comment"># 列出与应用程序关联的运行服务</span><br>docker service ls                 <span class="hljs-comment"># List running services associated with an app</span><br><br><span class="hljs-comment"># 列出与应用关联的任务</span><br>docker service ps <span class="hljs-variable">&lt;service&gt;</span>                  <span class="hljs-comment"># List tasks associated with an app</span><br><br><span class="hljs-comment"># 检查任务或容器</span><br>docker inspect <span class="hljs-variable">&lt;task or container&gt;</span>                   <span class="hljs-comment"># Inspect task or container</span><br><br><span class="hljs-comment"># 列出容器ID</span><br>docker container ls -q                                      <span class="hljs-comment"># List container IDs</span><br><br><span class="hljs-comment"># 撕下一个应用程序</span><br>docker stack rm <span class="hljs-variable">&lt;appname&gt;</span>                             <span class="hljs-comment"># Tear down an application</span><br><br><span class="hljs-comment"># 从管理器中删除单个节点群</span><br>docker swarm leave --force      <span class="hljs-comment"># Take down a single node swarm from the manager</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker基础学习笔记2</title>
    <link href="/2019/09/13/Docker%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
    <url>/2019/09/13/Docker%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
    
    <content type="html"><![CDATA[<h2 id="使用-Dockerfile定义容器"><a href="#使用-Dockerfile定义容器" class="headerlink" title="使用 Dockerfile定义容器"></a>使用 <code>Dockerfile</code>定义容器</h2><p><code>Dockerfile</code>定义容器内环境中发生的事情。对网络接口和磁盘驱动器等资源的访问在此环境中进行虚拟化，该环境与系统的其他部分隔离，因此您需要将端口映射到外部世界，并具体说明要“复制”到哪些文件那个环境。但是，在执行此操作之后，您可以预期<code>Dockerfile</code>在此处定义的应用程序的构建 在其运行的任何位置都完全相同。</p><span id="more"></span><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a><code>Dockerfile</code></h3><p>在本地计算机上创建一个空目录。<code>cd</code>目录，创建一个名为<code>Dockerfile</code>的文件，将以下内容复制并粘贴到该文件中，然后保存。记下解释新Dockerfile中每个语句的注释。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># Use an official Python runtime as a parent image</span><br><span class="hljs-keyword">FROM</span> python:<span class="hljs-number">2.7</span>-slim<br><br><span class="hljs-comment"># Set the working directory to /app</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><br><span class="hljs-comment"># Copy the current directory contents into the container at /app</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . /app</span><br><br><span class="hljs-comment"># Install any needed packages specified in requirements.txt</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> pip install --trusted-host pypi.python.org -r requirements.txt</span><br><br><span class="hljs-comment"># Make port 80 available to the world outside this container</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br><br><span class="hljs-comment"># Define environment variable</span><br><span class="hljs-keyword">ENV</span> NAME World<br><br><span class="hljs-comment"># Run app.py when the container launches</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;python&quot;</span>, <span class="hljs-string">&quot;app.py&quot;</span>]</span><br></code></pre></td></tr></table></figure><p><img src="/images/Docker%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/dockerfile%E5%85%B3%E9%94%AE%E5%AD%97.jpg" alt="dockerfile关键字"></p><h2 id="应用程序本身"><a href="#应用程序本身" class="headerlink" title="应用程序本身"></a>应用程序本身</h2><p>再创建两个文件，<code>requirements.txt</code>然后<code>app.py</code>将它们放在同一个文件夹中<code>Dockerfile</code>。这完成了我们的应用程序，您可以看到它非常简单。当上述<code>Dockerfile</code>被内置到的图像，<code>app.py</code>并且 <code>requirements.txt</code>是因为存在<code>Dockerfile</code>的<code>COPY</code>命令，并从输出<code>app.py</code>是通过HTTP得益于访问<code>EXPOSE</code> 命令。</p><h3 id="requirements-txt-存放依赖性软包"><a href="#requirements-txt-存放依赖性软包" class="headerlink" title="requirements.txt 存放依赖性软包"></a><code>requirements.txt</code> 存放依赖性软包</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Flask</span><br><span class="hljs-attribute">Redis</span><br></code></pre></td></tr></table></figure><h2 id="构建应用程序"><a href="#构建应用程序" class="headerlink" title="构建应用程序"></a>构建应用程序</h2><p>我们准备构建应用程序。确保您仍处于新目录的顶层。这是<code>ls</code>应该显示的内容：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">ls</span><br>Dockerfileapp.pyrequirements.txt<br></code></pre></td></tr></table></figure><p>现在运行build命令。这将创建一个Docker镜像，我们将使用该<code>--tag</code>选项命名。使用<code>-t</code>，如果你想用较短的选项。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker build --tag</span>=friendlyhello .<br></code></pre></td></tr></table></figure><p>你的建筑镜像在哪里？它位于您机器的本地Docker镜像注册表中：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ docker image ls<br><br>REPOSITORY            <span class="hljs-keyword">TAG</span>                 <span class="hljs-title">IMAGE</span> ID<br>friendlyhello         latest              <span class="hljs-number">326387</span>cea398<br></code></pre></td></tr></table></figure><p>注意标签是如何默认的<code>latest</code>。标签选项的完整语法类似于<code>--tag=friendlyhello:v0.0.1</code>。</p><blockquote><p>Linux用户的故障排除</p><p><em>代理服务器设置</em></p><p>代理服务器可以在Web应用程序启动并运行后阻止其连接。如果您位于代理服务器后面，请<code>RUN pip</code>在Dockerfile中添加以下行，使用该<code>ENV</code>命令指定代理服务器的主机和端口：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># Set proxy server, replace host:port with values for your servers</span><br><span class="hljs-keyword">ENV</span> http_proxy host:port<br><span class="hljs-keyword">ENV</span> https_proxy host:port<br></code></pre></td></tr></table></figure><p><em>DNS设置</em></p><p>DNS配置错误可能会产生问题<code>pip</code>。您需要设置自己的DNS服务器地址才能<code>pip</code>正常工作。您可能想要更改Docker守护程序的DNS设置。您可以<code>/etc/docker/daemon.json</code>使用<code>dns</code>密钥编辑（或创建）配置文件，如下所示：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>  <span class="hljs-string">&quot;dns&quot;</span>: [<span class="hljs-string">&quot;your_dns_address&quot;</span>, <span class="hljs-string">&quot;8.8.8.8&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，列表的第一个元素是DNS服务器的地址。第二项是Google的DNS，可在第一项无法使用时使用。</p><p>在继续之前，请保存<code>daemon.json</code>并重新启动docker服务。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo service docker restart</span><br></code></pre></td></tr></table></figure><p>修复后，重试运行该<code>build</code>命令。</p><p><em>MTU设置</em></p><p>如果默认网桥上的MTU（默认值为1500）大于主机外部网络的MTU，则<code>pip</code>失败。通过<code>/etc/docker/daemon.json</code>使用<code>mtu</code>密钥编辑（或创建）配置文件来设置docker bridge网络的MTU以匹配主机的MTU ，如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml">&#123;<br>  <span class="hljs-attr">&quot;mtu&quot;:</span> <span class="hljs-number">1450</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在继续之前，请保存<code>daemon.json</code>并重新启动docker服务。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo systemctl restart docker</span><br></code></pre></td></tr></table></figure><p>重新运行该<code>build</code>命令。</p></blockquote><h2 id="运行应用程序"><a href="#运行应用程序" class="headerlink" title="运行应用程序"></a>运行应用程序</h2><p>运行应用程序，使用以下方法将计算机的端口4000映射到容器的已发布端口80 <code>-p</code>：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -p <span class="hljs-number">4000</span>:<span class="hljs-number">80</span> friendlyhello<br></code></pre></td></tr></table></figure><p>您应该看到Python正在为您的应用提供服务的消息<code>http://0.0.0.0:80</code>。但是该消息来自容器内部，它不知道您将该容器的端口80映射到4000，从而生成正确的URL <code>http://localhost:4000</code>。</p><blockquote><p><strong>注意</strong>：如果您在Windows 7上使用Docker Toolbox，请使用Docker Machine IP而不是<code>localhost</code>。例如，http：&#x2F;&#x2F;192.168.99.100：4000 &#x2F;。要查找IP地址，请使用该命令<code>docker-machine ip</code>。</p></blockquote><p>您还可以<code>curl</code>在shell中使用该命令来查看相同的内容。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">$ curl http://localhost:4000<br><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>Hostname:<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span> 8fc990912a14<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>Visits:<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>cannot connect to Redis, counter disabled<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br></code></pre></td></tr></table></figure><p>现在让我们在后台以分离模式运行应用程序：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -d -p <span class="hljs-number">4000</span>:<span class="hljs-number">80</span> friendlyhello<br></code></pre></td></tr></table></figure><p>您获得应用程序的长容器ID，然后被踢回终端。您的容器正在后台运行。您还可以看到缩写的容器ID <code>docker container ls</code>（并且在运行命令时两者都可以互换）：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mel">$ docker <span class="hljs-keyword">container</span> <span class="hljs-keyword">ls</span><br>CONTAINER ID        IMAGE               COMMAND             CREATED<br><span class="hljs-number">1</span>fa4ab2cf395        friendlyhello       <span class="hljs-string">&quot;python app.py&quot;</span>     <span class="hljs-number">28</span> seconds ago<br></code></pre></td></tr></table></figure><p>请注意<code>CONTAINER ID</code>匹配的内容<code>http://localhost:4000</code>。</p><p>现在<code>docker container stop</code>用来结束这个过程，使用<code>CONTAINER ID</code>如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> container stop <span class="hljs-number">1</span>fa4ab2cf395<br></code></pre></td></tr></table></figure><h2 id="分享你的镜像"><a href="#分享你的镜像" class="headerlink" title="分享你的镜像"></a>分享你的镜像</h2><p>为了演示我们刚刚创建的内容的可移植性，让我们上传我们构建的图像并在其他地方运行它。毕竟，当您想要将容器部署到生产环境时，您需要知道如何推送到注册表。</p><p>注册表是存储库的集合，存储库是图像的集合 - 类似于GitHub存储库，除了代码已经构建。注册表上的帐户可以创建许多存储库。该<code>docker</code>CLI使用泊坞窗的公共注册表默认情况下。</p><h2 id="回顾和备忘单（可选）"><a href="#回顾和备忘单（可选）" class="headerlink" title="回顾和备忘单（可选）"></a>回顾和备忘单（可选）</h2><p>以下是此页面中基本Docker命令的列表，以及一些相关的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Create image using this directory&#x27;s Dockerfile</span><br><span class="hljs-comment"># 使用此目录的Dockerfile创建映像</span><br>docker build -t friendlyhello .  <br><br><span class="hljs-comment"># Run &quot;friendlyhello&quot; mapping port 4000 to 80</span><br><span class="hljs-comment"># 运行“friendlyhello”映射端口4000到80</span><br>docker run -p 4000:80 friendlyhello  <br><br><span class="hljs-comment"># Same thing, but in detached mode</span><br><span class="hljs-comment"># 运行，但处于分离模式</span><br>docker run -d -p 4000:80 friendlyhello <br><br><span class="hljs-comment"># List all running containers</span><br><span class="hljs-comment"># 列出所有正在运行的容器</span><br>docker container <span class="hljs-built_in">ls</span><br><br><span class="hljs-comment"># List all containers, even those not running</span><br><span class="hljs-comment"># 列出所有容器，甚至是那些未运行的容器</span><br>docker container <span class="hljs-built_in">ls</span> -a <br><br><span class="hljs-comment"># Gracefully stop the specified container</span><br><span class="hljs-comment"># 优雅地停止指定的容器</span><br>docker container stop &lt;<span class="hljs-built_in">hash</span>&gt;  <br><br><span class="hljs-comment"># Force shutdown of the specified container</span><br><span class="hljs-comment"># 强制关闭指定的容器</span><br>docker container <span class="hljs-built_in">kill</span> &lt;<span class="hljs-built_in">hash</span>&gt; <br><br><span class="hljs-comment"># Remove specified container from this machine</span><br><span class="hljs-comment"># 从此计算机中删除指定的容器</span><br>docker container <span class="hljs-built_in">rm</span> &lt;<span class="hljs-built_in">hash</span>&gt; <br><br><span class="hljs-comment"># Remove all containers</span><br><span class="hljs-comment"># 删除所有容器</span><br>docker container <span class="hljs-built_in">rm</span> $(docker container <span class="hljs-built_in">ls</span> -a -q) <br><br><span class="hljs-comment"># List all images on this machine</span><br><span class="hljs-comment"># 列出本机上的所有镜像</span><br>docker image <span class="hljs-built_in">ls</span> -a <br><br><span class="hljs-comment"># Remove specified image from this machine</span><br><span class="hljs-comment"># 从本机删除指定的图像</span><br>docker image <span class="hljs-built_in">rm</span> &lt;image <span class="hljs-built_in">id</span>&gt;  <br><br><span class="hljs-comment"># Remove all images from this machine</span><br><span class="hljs-comment"># 从本机删除所有图像</span><br>docker image <span class="hljs-built_in">rm</span> $(docker image <span class="hljs-built_in">ls</span> -a -q)  <br><br><span class="hljs-comment"># Log in this CLI session using your Docker credentials</span><br><span class="hljs-comment"># 使用Docker凭据登录此CLI会话</span><br>docker login   <br><br><span class="hljs-comment"># Tag &lt;image&gt; for upload to registry</span><br><span class="hljs-comment"># 标记&lt;image&gt;以上传到注册表</span><br>docker tag &lt;image&gt; username/repository:tag  <br><br><span class="hljs-comment"># Upload tagged image to registry</span><br><span class="hljs-comment"># 将标记图像上载到注册表</span><br>docker push username/repository:tag <br><br><span class="hljs-comment"># Run image from a registry</span><br><span class="hljs-comment"># 从注册表运行镜像</span><br>docker run username/repository:tag                   <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker基础学习笔记1</title>
    <link href="/2019/09/13/Docker%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <url>/2019/09/13/Docker%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    
    <content type="html"><![CDATA[<h2 id="使用Docker能干什么？"><a href="#使用Docker能干什么？" class="headerlink" title="使用Docker能干什么？"></a>使用Docker能干什么？</h2><p>一句话总结: <code>一次封装，到处运行</code></p><span id="more"></span><p>docker特点</p><ul><li><p>灵活：即使是最复杂的应用也可以集装箱化。</p></li><li><p>轻量级：容器利用并共享主机内核。</p></li><li><p>可互换：您可以即时部署更新和升级。</p></li><li><p>便携式：您可以在本地构建，部署到云，并在任何地方运行。</p></li><li><p>可扩展：您可以增加并自动分发容器副本。</p></li><li><p>可堆叠：您可以垂直和即时堆叠服务</p></li><li><p>快速，一致地交付您的应用程序</p><p>  Docker允许开发人员使用提供应用程序和服务的本地容器在标准化环境中工作，从而简化了开发生命周期。容器非常适合持续集成和持续交付（CI &#x2F; CD）工作流程。</p><p>  请考虑以下示例场景：<br>  您的开发人员在本地编写代码并使用Docker容器与同事共享他们的工作。<br>  他们使用Docker将他们的应用程序推入测试环境并执行自动和手动测试。<br>  当开发人员发现错误时，他们可以在开发环境中修复它们，并将它们重新部署到测试环境中以进行测试和验证。<br>  测试完成后，获取客户的修复就像将更新的图像推送到生产环境一样简单。</p></li><li><p>响应式部署和扩展</p><p>  Docker基于容器的平台允许高度可移植的工作负载。Docker容器可以在开发人员的本地笔记本电脑，数据中心的物理或虚拟机，云提供商或混合环境中运行。</p><p>  Docker的可移植性和轻量级特性还使得可以轻松地动态管理工作负载，按照业务需求即时扩展或拆除应用程序和服务。</p></li><li><p>在同一硬件上运行更多工作负载</p><p>  Docker轻巧而快速。它为基于管理程序的虚拟机提供了一种可行且经济高效的替代方案，因此您可以使用更多的计算容量来实现业务目标。Docker非常适合高密度环境以及需要用更少资源完成更多工作的中小型部署</p></li></ul><p><img src="/images/Docker%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/docker%E8%83%BD%E5%B9%B2%E4%BB%80%E4%B9%88.jpg" alt="docker能干什么"></p><p><img src="/images/Docker%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/whydocker.jpg" alt="whydocker"></p><h2 id="学习思路"><a href="#学习思路" class="headerlink" title="学习思路"></a>学习思路</h2><p>最好的学习教程：官方文档 <a href="https://docs.docker.com/get-started/">https://docs.docker.com/get-started/</a></p><p>加深理解基本概念，二手知识：<a href="https://www.bilibili.com/video/av27122140/?p=1">https://www.bilibili.com/video/av27122140/?p=1</a></p><p><code>学习思路：理解基本概念---熟悉基本操作——实战应用----掌握基本概念----熟练基本操作</code></p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>镜像 、容器、仓库、Dockerfile、容器卷</p><h2 id="安装docke"><a href="#安装docke" class="headerlink" title="安装docke"></a>安装docke</h2><h2 id="常用操作命令"><a href="#常用操作命令" class="headerlink" title="常用操作命令"></a>常用操作命令</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment">## List Docker CLI commands </span><br><span class="hljs-comment"># 列出Docker CLI命令</span><br>docker<br>docker container <span class="hljs-params">--help</span><br><br><span class="hljs-comment">## Display Docker version and info </span><br><span class="hljs-comment"># 显示Docker版本和信息</span><br>docker <span class="hljs-params">--version</span><br>docker <span class="hljs-keyword">version</span><br>docker info<br><br><span class="hljs-comment">## Execute Docker image </span><br><span class="hljs-comment"># 执行Docker镜像</span><br>docker run hello-world<br><br><span class="hljs-comment">## List Docker images </span><br><span class="hljs-comment"># 列出Docker镜像</span><br>docker image <span class="hljs-keyword">ls</span><br><br><span class="hljs-comment">## List Docker containers (running, all, all in quiet mode) </span><br><span class="hljs-comment"># 列出Docker容器（运行，全部，全部处于安静模式）</span><br>docker container <span class="hljs-keyword">ls</span><br>docker container <span class="hljs-keyword">ls</span> <span class="hljs-params">--all</span><br>docker container <span class="hljs-keyword">ls</span> -aq<br></code></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>容器化使<a href="https://www.docker.com/solutions/cicd">CI &#x2F; CD</a>无缝。例如：</p><ul><li>应用程序没有系统依赖性</li><li>可以将更新推送到分布式应用程序的任何部分</li><li>资源密度可以优化。</li></ul><p>使用Docker，扩展应用程序是一个新的可执行文件，而不是运行繁重的VM主机。</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitBook ,你人生的第一本书</title>
    <link href="/2019/08/27/gitbook/"/>
    <url>/2019/08/27/gitbook/</url>
    
    <content type="html"><![CDATA[<p>GitBook ,你人生的第一本书</p><p>做笔记写文档非常凌乱，不好管理，于是寻找各种文档工具</p><!---more---><p> <code>docsify</code>   (<a href="https://docsify.js.org/#/zh-cn/">https://docsify.js.org/#/zh-cn/</a>)</p><ul><li><p>docsify不是静态生成html，而通过动态请求markdown编译生成html**。</p></li><li><p>docsify还具有轻应用、全文搜索功能、支持多个主题、兼容IE10+、支持SSR等特性</p></li></ul><p><code>Gitbook</code></p><ul><li><strong>简洁</strong>（采用<a href="https://www.zhihu.com/question/20409634/answer/90728572">Markdown语法</a>，没有其他渲染，符合记录学习笔记的定位）</li><li>可在线浏览、可转成电子书（PDF、ePub、Mobi）</li><li>形成工具使用体系（Git、GitHub、GitHub Pages、GitBook）</li><li><strong>不怕编写失误</strong>（每次提交记录都可追溯）</li></ul><p><code>Phenomic</code></p><p><code>hexo</code></p><ul><li><a href="https://hexo.io/">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。有高扩展性、静态的特性。</li></ul><p>下面介绍gitbook</p><p>最好的教程是官方文档 <a href="https://docs.gitbook.com/">https://docs.gitbook.com/</a><br>以下只是个人笔记，如有疏漏，请多包涵。更新中……</p><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h3><p>安装 Node.js<br>GitBook 是一个基于 Node.js 的命令行工具，下载安装 Node.js （<a href="https://nodejs.org/en">https://nodejs.org/en</a>)<br>安装完成之后，有如下提示。</p><blockquote><p>This package has installed:<br>    •Node.js v10.16.3 to &#x2F;usr&#x2F;local&#x2F;bin&#x2F;node<br>    •npm v6.9.0 to &#x2F;usr&#x2F;local&#x2F;bin&#x2F;npm<br>Make sure that &#x2F;usr&#x2F;local&#x2F;bin is in your $PATH.</p></blockquote><p>你可以使用下面的命令来检验是否安装成功。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ <span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br>v10.<span class="hljs-number">16.3</span><br><br>npm -v<br><span class="hljs-number">6.9</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="2-安装Gitbook命令"><a href="#2-安装Gitbook命令" class="headerlink" title="2.安装Gitbook命令"></a>2.安装Gitbook命令</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">sudo npm install -g gitbook-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>检查是否安装成功</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gitbook</span> -V<br><br><span class="hljs-attribute">CLI</span> version: <span class="hljs-number">2</span>.<span class="hljs-number">3</span>.<span class="hljs-number">2</span><br><span class="hljs-attribute">GitBook</span> version: <span class="hljs-number">3</span>.<span class="hljs-number">2</span>.<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="3-GitBook-初体验"><a href="#3-GitBook-初体验" class="headerlink" title="3.GitBook 初体验"></a>3.GitBook 初体验</h3><p>新建一本书的目录gitbook(此名称随便起)，进入gitbook目录，创造一本书。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ mkdir gitbook<br>$ cd mybook<br>$ gitbook init<br><br>warn: <span class="hljs-keyword">no</span> <span class="hljs-keyword">summary</span> file <span class="hljs-keyword">in</span> this book<br><span class="hljs-keyword">info</span>: <span class="hljs-keyword">create</span> README.md<br><span class="hljs-keyword">info</span>: <span class="hljs-keyword">create</span> <span class="hljs-keyword">SUMMARY</span>.md<br><span class="hljs-keyword">info</span>: initialization <span class="hljs-keyword">is</span> finished<br></code></pre></td></tr></table></figure><p>可以看到他会创建 README.md 和 SUMMARY.md 这两个文件，README.md 应该不陌生，就是说明文档，而 SUMMARY.md 其实就是书的章节目录。</p><p>接下来，我们输入 命令，然后在浏览器地址栏中输入 <a href="http://localhost:4000/">http://localhost:4000</a> 便可预览书籍。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs lasso">$ gitbook serve<br><br>Live reload server started <span class="hljs-keyword">on</span> port: <span class="hljs-number">35729</span><br>Press CTRL+C <span class="hljs-keyword">to</span> quit <span class="hljs-params">...</span><br><br>info: <span class="hljs-number">7</span> plugins are installed <br>info: loading plugin <span class="hljs-string">&quot;livereload&quot;</span><span class="hljs-params">...</span> OK <br>info: loading plugin <span class="hljs-string">&quot;highlight&quot;</span><span class="hljs-params">...</span> OK <br>info: loading plugin <span class="hljs-string">&quot;search&quot;</span><span class="hljs-params">...</span> OK <br>info: loading plugin <span class="hljs-string">&quot;lunr&quot;</span><span class="hljs-params">...</span> <br>OK <br>info: loading plugin <span class="hljs-string">&quot;sharing&quot;</span><span class="hljs-params">...</span> OK <br>info: loading plugin <span class="hljs-string">&quot;fontsettings&quot;</span><span class="hljs-params">...</span> OK <br>info: loading plugin <span class="hljs-string">&quot;theme-default&quot;</span><span class="hljs-params">...</span> OK <br>info: found <span class="hljs-number">1</span> pages <br>info: found <span class="hljs-number">0</span> asset files <br>info: &gt;&gt; generation finished <span class="hljs-keyword">with</span> success <span class="hljs-keyword">in</span> <span class="hljs-number">0.3</span>s ! <br><br>Starting server <span class="hljs-params">...</span><br>Serving book <span class="hljs-keyword">on</span> http:<span class="hljs-comment">//localhost:4000</span><br></code></pre></td></tr></table></figure><p>CTRL+Z 强制退出后再启动，遇到的问题</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs gradle">gitbook serve<br><br>... Uhoh. Got error listen EADDRINUSE: address already in use :::<span class="hljs-number">35729</span> ...<br>Error: listen EADDRINUSE: address already in use :::<span class="hljs-number">35729</span><br>    at Server.setupListenHandle [as _listen2] (net.js:<span class="hljs-number">1270</span>:<span class="hljs-number">14</span>)<br>    at listenInCluster (net.js:<span class="hljs-number">1318</span>:<span class="hljs-number">12</span>)<br>    at Server.listen (net.js:<span class="hljs-number">1405</span>:<span class="hljs-number">7</span>)<br>    at Server.listen (<span class="hljs-regexp">/private/</span>var<span class="hljs-regexp">/root/</span>.gitbook<span class="hljs-regexp">/versions/</span><span class="hljs-number">3.2</span>.<span class="hljs-number">3</span><span class="hljs-regexp">/node_modules/</span>tiny-lr<span class="hljs-regexp">/lib/</span>server.js:<span class="hljs-number">164</span>:<span class="hljs-number">15</span>)<br>    at Promise.apply (<span class="hljs-regexp">/private/</span>var<span class="hljs-regexp">/root/</span>.gitbook<span class="hljs-regexp">/versions/</span><span class="hljs-number">3.2</span>.<span class="hljs-number">3</span><span class="hljs-regexp">/node_modules/</span>q/q.js:<span class="hljs-number">1165</span>:<span class="hljs-number">26</span>)<br>    at Promise.promise.promiseDispatch (<span class="hljs-regexp">/private/</span>var<span class="hljs-regexp">/root/</span>.gitbook<span class="hljs-regexp">/versions/</span><span class="hljs-number">3.2</span>.<span class="hljs-number">3</span><span class="hljs-regexp">/node_modules/</span>q/q.js:<span class="hljs-number">788</span>:<span class="hljs-number">41</span>)<br>    at <span class="hljs-regexp">/private/</span>var<span class="hljs-regexp">/root/</span>.gitbook<span class="hljs-regexp">/versions/</span><span class="hljs-number">3.2</span>.<span class="hljs-number">3</span><span class="hljs-regexp">/node_modules/</span>q/q.js:<span class="hljs-number">1391</span>:<span class="hljs-number">14</span><br>    at runSingle (<span class="hljs-regexp">/private/</span>var<span class="hljs-regexp">/root/</span>.gitbook<span class="hljs-regexp">/versions/</span><span class="hljs-number">3.2</span>.<span class="hljs-number">3</span><span class="hljs-regexp">/node_modules/</span>q/q.js:<span class="hljs-number">137</span>:<span class="hljs-number">13</span>)<br>    at flush (<span class="hljs-regexp">/private/</span>var<span class="hljs-regexp">/root/</span>.gitbook<span class="hljs-regexp">/versions/</span><span class="hljs-number">3.2</span>.<span class="hljs-number">3</span><span class="hljs-regexp">/node_modules/</span>q/q.js:<span class="hljs-number">125</span>:<span class="hljs-number">13</span>)<br>    at process._tickCallback (internal<span class="hljs-regexp">/process/</span>next_tick.js:<span class="hljs-number">61</span>:<span class="hljs-number">11</span>)<br><br>You already have a server listening on <span class="hljs-number">35729</span><br>You should stop it and <span class="hljs-keyword">try</span> again.<br></code></pre></td></tr></table></figure><p>解决办法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">kill -<span class="hljs-number">9</span> <span class="hljs-constructor">$(<span class="hljs-params">lsof</span> -<span class="hljs-params">t</span> -<span class="hljs-params">i</span>:35729)</span><br></code></pre></td></tr></table></figure><h3 id="4-详细介绍下-GitBook-目录结构及相关文件。"><a href="#4-详细介绍下-GitBook-目录结构及相关文件。" class="headerlink" title="4.详细介绍下 GitBook 目录结构及相关文件。"></a>4.详细介绍下 GitBook 目录结构及相关文件。</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">sh</span>-3.2# tree<br>.<br>├── README.md<br>├── SUMMARY.md<br>└── _book<br>    ├── gitbook<br>    │   ├── fonts<br>    │   │   └── fontawesome<br>    │   │       ├── FontAwesome.otf<br>    │   │       ├── fontawesome-webfont.eot<br>    │   │       ├── fontawesome-webfont.svg<br>    │   │       ├── fontawesome-webfont.ttf<br>    │   │       ├── fontawesome-webfont.woff<br>    │   │       └── fontawesome-webfont.woff2<br>    │   ├── gitbook-<span class="hljs-keyword">plugin</span>-fontsettings<br>    │   │   ├── fontsettings.js<br>    │   │   └── website.css<br>    │   ├── gitbook-<span class="hljs-keyword">plugin</span>-highlight<br>    │   │   ├── ebook.css<br>    │   │   └── website.css<br>    │   ├── gitbook-<span class="hljs-keyword">plugin</span>-livereload<br>    │   │   └── <span class="hljs-keyword">plugin</span>.js<br>    │   ├── gitbook-<span class="hljs-keyword">plugin</span>-lunr<br>    │   │   ├── lunr.min.js<br>    │   │   └── <span class="hljs-keyword">search</span>-lunr.js<br>    │   ├── gitbook-<span class="hljs-keyword">plugin</span>-<span class="hljs-keyword">search</span><br>    │   │   ├── lunr.min.js<br>    │   │   ├── <span class="hljs-keyword">search</span>-engine.js<br>    │   │   ├── <span class="hljs-keyword">search</span>.css<br>    │   │   └── <span class="hljs-keyword">search</span>.js<br>    │   ├── gitbook-<span class="hljs-keyword">plugin</span>-sharing<br>    │   │   └── buttons.js<br>    │   ├── gitbook.js<br>    │   ├── images<br>    │   │   ├── apple-touch-icon-precomposed-152.png<br>    │   │   └── favicon.ico<br>    │   ├── style.css<br>    │   └── theme.js<br>    ├── index.html<br>    └── search_index.json<br></code></pre></td></tr></table></figure><p>README.md<br>书本简介内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">序言</span><br><span class="hljs-meta prompt_"> &gt;</span><span class="language-bash">人生的第一本电纸书</span><br></code></pre></td></tr></table></figure><p>SUMMARY.md<br>这个文件主要决定 GitBook 的章节目录，它通过 Markdown 中的列表语法来表示文件的父子关系</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scss"># <span class="hljs-selector-tag">Summary</span><br>  <br>* <span class="hljs-selector-attr">[序言]</span>(README.md)<br><br>* <span class="hljs-selector-attr">[第一章]</span>(chapter1/README.md)<br>    * <span class="hljs-selector-attr">[第一节]</span>(chapter1/seciont1.md)<br>    * <span class="hljs-selector-attr">[第二节]</span>(chapter1/section2.md)<br>* <span class="hljs-selector-attr">[第二章]</span>(chapter2/README.md)<br>    * <span class="hljs-selector-attr">[第一节]</span>(chapter2/seciont1.md)<br>    * <span class="hljs-selector-attr">[第二节]</span>(chapter2/section2.md)<br>* <span class="hljs-selector-attr">[结束]</span>(end/README.md)<br></code></pre></td></tr></table></figure><p>fonts字体文件夹<br>images图片文件夹</p><p>插件文件夹<br>gitbook-plugin-fontsettings<br>gitbook-plugin-highlight<br>gitbook-plugin-livereload<br>gitbook-plugin-lunr<br>gitbook-plugin-search<br>gitbook-plugin-sharing</p><p>GitBook 有插件官网，默认带有 5 个插件，highlight、search、sharing、font-settings、livereload。</p><h3 id="5-帮助文档"><a href="#5-帮助文档" class="headerlink" title="5.帮助文档"></a>5.帮助文档</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">sh<span class="hljs-number">-3.2</span><span class="hljs-comment"># gitbook</span><br><br>  Usage: gitbook [options] [<span class="hljs-keyword">command</span>]<br><br><br>  Options:<br><br>    -v, <span class="hljs-comment">--gitbook [version]  specify GitBook version to use</span><br>    -d, <span class="hljs-comment">--debug              enable verbose error</span><br>    -V, <span class="hljs-comment">--version            Display running versions of gitbook and gitbook-cli</span><br>    -h, <span class="hljs-comment">--help               output usage information</span><br><br><br>  Commands:<br><br>    ls                        List versions installed locally<br>    current                   Display currently activated <span class="hljs-built_in">version</span><br>    ls-remote                 List remote versions available <span class="hljs-keyword">for</span> install<br>    fetch [<span class="hljs-built_in">version</span>]           Download <span class="hljs-keyword">and</span> install <span class="hljs-keyword">a</span> &lt;<span class="hljs-built_in">version</span>&gt;<br>    <span class="hljs-built_in">alias</span> [<span class="hljs-built_in">folder</span>] [<span class="hljs-built_in">version</span>]  Set <span class="hljs-keyword">an</span> <span class="hljs-built_in">alias</span> named &lt;<span class="hljs-built_in">version</span>&gt; pointing <span class="hljs-built_in">to</span> &lt;<span class="hljs-built_in">folder</span>&gt;<br>    uninstall [<span class="hljs-built_in">version</span>]       Uninstall <span class="hljs-keyword">a</span> <span class="hljs-built_in">version</span><br>    update [tag]              Update <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> latest <span class="hljs-built_in">version</span> <span class="hljs-keyword">of</span> GitBook<br>    help                      List commands <span class="hljs-keyword">for</span> GitBook<br>    *                         run <span class="hljs-keyword">a</span> <span class="hljs-keyword">command</span> <span class="hljs-title">with</span> <span class="hljs-title">a</span> <span class="hljs-title">specific</span> <span class="hljs-title">gitbook</span>  <span class="hljs-title">version</span><br><br></code></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs scss">sh-<span class="hljs-number">3.2</span># gitbook help<br>    build <span class="hljs-selector-attr">[book]</span> <span class="hljs-selector-attr">[output]</span>       build <span class="hljs-selector-tag">a</span> book<br>        <span class="hljs-attr">--log</span>                   Minimum log level to <span class="hljs-attribute">display</span> (Default is info; Values are debug, info, warn, error, disabled)<br>        <span class="hljs-attr">--format</span>                Format to build to (Default is website; Values are website, json, ebook)<br>        --<span class="hljs-selector-attr">[no-]</span>timing           Print timing debug information (Default is false)<br><br>    serve <span class="hljs-selector-attr">[book]</span> <span class="hljs-selector-attr">[output]</span>       serve the book as <span class="hljs-selector-tag">a</span> website for testing<br>        <span class="hljs-attr">--port</span>                  Port for server to listen on (Default is <span class="hljs-number">4000</span>)<br>        <span class="hljs-attr">--lrport</span>                Port for livereload server to listen on (Default is <span class="hljs-number">35729</span>)<br>        --<span class="hljs-selector-attr">[no-]</span>watch            Enable file watcher and live reloading (Default is true)<br>        --<span class="hljs-selector-attr">[no-]</span>live             Enable live reloading (Default is true)<br>        --<span class="hljs-selector-attr">[no-]</span>open             Enable opening book in browser (Default is false)<br>        <span class="hljs-attr">--browser</span>               Specify browser for opening book (Default is )<br>        <span class="hljs-attr">--log</span>                   Minimum log level to <span class="hljs-attribute">display</span> (Default is info; Values are debug, info, warn, error, disabled)<br>        <span class="hljs-attr">--format</span>                Format to build to (Default is website; Values are website, json, ebook)<br><br>    install <span class="hljs-selector-attr">[book]</span>              install <span class="hljs-attribute">all</span> plugins dependencies<br>        <span class="hljs-attr">--log</span>                   Minimum log level to <span class="hljs-attribute">display</span> (Default is info; Values are debug, info, warn, error, disabled)<br><br>    parse <span class="hljs-selector-attr">[book]</span>                parse and print debug information about <span class="hljs-selector-tag">a</span> book<br>        <span class="hljs-attr">--log</span>                   Minimum log level to <span class="hljs-attribute">display</span> (Default is info; Values are debug, info, warn, error, disabled)<br><br>    init <span class="hljs-selector-attr">[book]</span>                 setup and create files for chapters<br>        <span class="hljs-attr">--log</span>                   Minimum log level to <span class="hljs-attribute">display</span> (Default is info; Values are debug, info, warn, error, disabled)<br><br>    pdf <span class="hljs-selector-attr">[book]</span> <span class="hljs-selector-attr">[output]</span>         build <span class="hljs-selector-tag">a</span> book into an ebook file<br>        <span class="hljs-attr">--log</span>                   Minimum log level to <span class="hljs-attribute">display</span> (Default is info; Values are debug, info, warn, error, disabled)<br><br>    epub <span class="hljs-selector-attr">[book]</span> <span class="hljs-selector-attr">[output]</span>        build <span class="hljs-selector-tag">a</span> book into an ebook file<br>        <span class="hljs-attr">--log</span>                   Minimum log level to <span class="hljs-attribute">display</span> (Default is info; Values are debug, info, warn, error, disabled)<br><br>    mobi <span class="hljs-selector-attr">[book]</span> <span class="hljs-selector-attr">[output]</span>        build <span class="hljs-selector-tag">a</span> book into an ebook file<br>        <span class="hljs-attr">--log</span>                   Minimum log level to <span class="hljs-attribute">display</span> (Default is info; Values are debug, info, warn, error, disabled)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>写作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gitbook</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows7_32 Apache2.2发布Django+Angular项目</title>
    <link href="/2019/08/09/Windows7-32-Apache2-2%E5%8F%91%E5%B8%83Django-Angular%E9%A1%B9%E7%9B%AE/"/>
    <url>/2019/08/09/Windows7-32-Apache2-2%E5%8F%91%E5%B8%83Django-Angular%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p>遇坑记录</p><p>1.缺少MySQL-python-1.2.3.win32-py2.7.exe模块</p><p>2.mod_wsgi.so模块不可用</p><p>3.Aapache2.2配置文件格式</p><span id="more"></span> <h3 id="一．安装依赖环境"><a href="#一．安装依赖环境" class="headerlink" title="一．安装依赖环境"></a>一．安装依赖环境</h3><p>1）pypa-setuptools-d9bb58331007 python setup.py install</p><p>2）pip-1.4.1 python setup.py install</p><p>3）django-1.6.2 python setup.py install</p><p>4）django-rest-framework-2.3.14 python setup.py install</p><p>5）MySQL-python-1.2.3.win32-py2.7.exe</p><p>6）httpd-2.2.25-win32-x86-openssl-0.9.8y.msi</p><h3 id="二、修改配置文件Apache（Apache2-2-conf-httpd-conf）"><a href="#二、修改配置文件Apache（Apache2-2-conf-httpd-conf）" class="headerlink" title="二、修改配置文件Apache（Apache2.2\conf\httpd.conf）"></a>二、修改配置文件Apache（Apache2.2\conf\httpd.conf）</h3><p>1.安装mod_wsgi.so模块。方法：拷贝mod_wsgi.so到Apache安装目录下的modules    文件夹中，（如：D:\Apache2.2\modules下）</p><p>2.添加LoadModule wsgi_module modules&#x2F;mod_wsgi.so</p><p>3.启用 Include conf&#x2F;extra&#x2F;httpd-vhosts.conf</p><p>4.关闭默认端口监听 # Listen 80</p><p>5.配置conf&#x2F;extra&#x2F;httpd-vhosts.conf文件</p><p>​      后端配置信息</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Listen</span> <span class="hljs-number">8007</span><br><br><span class="hljs-section">&lt;VirtualHost *<span class="hljs-number">:8007</span>&gt;</span><br><br>    <span class="hljs-attribute">WSGIScriptAlias</span> / D:/PmsService/PmsService/wsgi.py<br><br>    <span class="hljs-attribute">DocumentRoot</span> <span class="hljs-string">&quot;D:/PmsService&quot;</span><br><br>    <span class="hljs-attribute">ServerName</span> www.PmsService.com <br><br>    <span class="hljs-attribute">Alias</span> /static D:/PmsService/static<br><br>    <span class="hljs-section">&lt;Directory <span class="hljs-string">&quot;D:/PmsService/PmsService&quot;</span>&gt;</span> <br><br>        <span class="hljs-attribute">Order</span> <span class="hljs-literal">allow</span>,<span class="hljs-literal">deny</span>  <br><br>        <span class="hljs-attribute">Allow</span> from <span class="hljs-literal">all</span><br><br>    <span class="hljs-section">&lt;/Directory&gt;</span>  <br><br><span class="hljs-section">&lt;/VirtualHost&gt;</span><br></code></pre></td></tr></table></figure><p>  前端配置信息</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Listen</span> <span class="hljs-number">80</span><br><br><span class="hljs-section">&lt;VirtualHost *<span class="hljs-number">:80</span>&gt;</span><br><br>    <span class="hljs-attribute">DocumentRoot</span> <span class="hljs-string">&quot;D:/iegfms&quot;</span><br><br>    <span class="hljs-section">&lt;Directory  <span class="hljs-string">&quot;D:/iegfms&quot;</span>&gt;</span><br><br>        <span class="hljs-attribute">Order</span> <span class="hljs-literal">allow</span>,<span class="hljs-literal">deny</span>  <br><br>        <span class="hljs-attribute">Allow</span> from <span class="hljs-literal">all</span>   <br><br>    <span class="hljs-section">&lt;/Directory&gt;</span><br><br><span class="hljs-section">&lt;/VirtualHost&gt;</span><br></code></pre></td></tr></table></figure><h3 id="三、修改Django后端项目的配置信息"><a href="#三、修改Django后端项目的配置信息" class="headerlink" title="三、修改Django后端项目的配置信息"></a>三、修改Django后端项目的配置信息</h3><p>1.Wsgi.py文件</p><p>Windows系统sys.path.append(“D:&#x2F;PmsService&#x2F;“),</p><p>linu系统 sys.path.append(“&#x2F;var&#x2F;www&#x2F;html&#x2F;PmsService”)</p><p>2.settings.py文件</p><p>​        配置数据库信息DATABASES &#x3D; {}</p><h3 id="四、导入对应的数据库"><a href="#四、导入对应的数据库" class="headerlink" title="四、导入对应的数据库"></a>四、导入对应的数据库</h3>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android自动化测试概况</title>
    <link href="/2019/07/28/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A6%82%E5%86%B5/"/>
    <url>/2019/07/28/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A6%82%E5%86%B5/</url>
    
    <content type="html"><![CDATA[<p><strong>Android<strong><strong>几种常用</strong></strong>自动化测试框架****对比</strong></p><p>1、Monkey是Android SDK自带的测试工具，在测试过程中会向系统发送伪随机的用户事件流，如按键输入、触摸屏输入、手势输入等)，实现对正在开发的应用程序进行压力测试，也有日志输出。该工具只能做一些压力测试，由于测试事件和数据都是随机的，不能自定义，所以有很大的局限性。</p><p>2、MonkeyRunner也是android SDK提供的测试工具。严格意义上来说MonkeyRunner其实是一个Api工具包，比Monkey强大，可以编写测试脚本来自定义数据、事件。缺点是脚本用Python来写，对测试人员来说要求较高，有比较大的学习成本。</p><p>3、Robotium也是基于Instrumentation的测试框架，主要针对某一个APK进行自动化测试，APK可以有源码，也可以没有源码，功能强大；缺点是对测试人员来说要有一定的Java基础，了解Android基本组件，不能跨App。</p><p>4、Instrumentation是早期Google提供的Android自动化测试工具类，虽然在那时候JUnit也可以对Android进行测试，但是Instrumentation允许你对应用程序做更为复杂的测试，甚至是框架层面的，是很多其它测试框架的基础，可以在同进程中加载被测组件。它有很多丰富的高层封装，使用者可以使用基于instrumentation的其他框架，避免过多二次开发量。但Instrumentation不支持跨应用，导致基于instrumentation的框架都继承了这个缺点。</p><p>5、UIAutomator是由谷歌提供的测试框架，它提供了原生Android app和游戏的高级UI测试。基本上支持所有的Android事件操作，与Instrumentation对比，它不需要测试人员了解代码实现细节（可以用UiAutomatorviewer抓去App页面上的控件属性而不看源码）基于Java，测试代码结构简单、编写容易、学习成本，一次编译，所有设备或模拟器都能运行测试，能跨App（比如：很多App有选择相册、打开相机拍照，这就是跨App测试）。缺点是只支持SDK 16（Android 4.1）及以上，不支持Hybird App、WebApp。</p><p>6、Appium是一个开源的、跨平台的自动化测试工具，这个框架应该是功能最强大的。</p><span id="more"></span><h3 id="自动化工具发展介绍"><a href="#自动化工具发展介绍" class="headerlink" title="自动化工具发展介绍"></a>自动化工具发展介绍</h3><p><img src="/images/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A6%82%E5%86%B5/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95002.jpg" alt="图片名称"><br><img src="/images/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A6%82%E5%86%B5/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95004.jpg" alt="图片名称"><br><img src="/images/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A6%82%E5%86%B5/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95005.jpg" alt="图片名称"><br><img src="/images/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A6%82%E5%86%B5/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95006.jpg" alt="图片名称"></p><h3 id="adb简单使用"><a href="#adb简单使用" class="headerlink" title="adb简单使用"></a>adb简单使用</h3><p><img src="/images/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A6%82%E5%86%B5/adb001.jpg" alt="图片名称"><br><img src="/images/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A6%82%E5%86%B5/adb002.jpg" alt="图片名称"></p><h3 id="Monkey简单使用"><a href="#Monkey简单使用" class="headerlink" title="Monkey简单使用"></a>Monkey简单使用</h3><p><img src="/images/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A6%82%E5%86%B5/monkey001.jpg" alt="图片名称"><br><img src="/images/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A6%82%E5%86%B5/monkey002.jpg" alt="图片名称"><br><img src="/images/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A6%82%E5%86%B5/monkey003.jpg" alt="图片名称"></p>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>像婴儿一样去学英语（To learn English like a baby）</title>
    <link href="/2019/07/07/%E5%83%8F%E5%A9%B4%E5%84%BF%E4%B8%80%E6%A0%B7%E5%8E%BB%E5%AD%A6%E8%8B%B1%E8%AF%AD/"/>
    <url>/2019/07/07/%E5%83%8F%E5%A9%B4%E5%84%BF%E4%B8%80%E6%A0%B7%E5%8E%BB%E5%AD%A6%E8%8B%B1%E8%AF%AD/</url>
    
    <content type="html"><![CDATA[<p>　</p><p>​     这个话题乍一听起来有点匪夷所思，怎么叫像婴儿一样去学英语呢？其实道理并不复杂。如今全中国有四亿英语学习者，花了几百亿人民币学英语，结果学的一塌糊涂。我们整天高呼讲一口流利的英语，那么有几个人能够真正做到讲一口“流利”的英语？就像我在前面一篇文章里说的，能否用英语思维是衡量英语水平的一个重要标准！换句话说，要想真正做到流利，做到“不假思索”的说英语，具备美语思维能力是非常重要的！</p><span id="more"></span><p>　　大家可能不相信，中国的这么多英语学习者大部分人英语说的都还没有美国的七八岁孩子说的好、说的流利！不是夸张，是事实！我每次去商场都能看见美国四、五岁的小孩操着流利的英语和他们的父母聊天。记得我刚到美国的时候有一天去沃尔玛买东西，无意间看到一个只有差不多五岁左右的小女孩拉着他爸爸的手说：“Daddy, I want spaghetti”，我当时一下子都没听懂，过了一会才想起来在《老友记》里面曾经听过spaghetti这个单词，表示“意大利面”的意思！这个单词写出来都不一定有很多人认识，但后来却了解到这其实是一个对美国人来说很普通的单词！我刚来的时候连Pizza这个单词都读错了（你们知道这个单词怎么读吗？），售货员都听不懂！不是我一个人读错了，而是我身边的很多中国学生都读错了！这些其实都是由于语言背后的环境和文化造成的，所以我们必须要改变我们学习英语的方法和态度！</p><p>　　那么为什么美国那么小的小孩都能轻松的讲出那么好的英语呢？同样的道理，我们为什么那么小就能讲出那么好的中国话？这也就引出了我要说的像婴儿一样学英语的几大要点：</p><p>　　1、忘记自己在学外语！<br>　　我们大部分人在学习英语的时候都是把它当成外语来学的，所以也就只有“外语”的水平。要想达到“母语”的水平就一定要觉得这就是我的母语！就像一个婴儿一样，接触的第一个语言就是他的母语，没有任何抵制，全方面的吸收。我们学习英语的时候也要学习这种精神，要忘记自己学习的是“外语”，甚至是“忘记”自己在学习英语，把学习英语当成一种习惯，把模仿当成一种潜意识，这将是你英语成功的开端！</p><p>　　2、忘记自己的英语水平！</p><p>　　我的很多朋友学英语的时候都会向我抱怨，说我都过了六级了可还是听不懂BBC，看不懂CNN，不看字幕就看不懂《老友记》，于是觉得很沮丧。其实这有什么呢？有哪个人一生下来就能听懂和说出英语的？有哪个人刚出生就掌握几万词汇的？不都是后天不断的努力吗？我们学学婴儿吧，婴儿听不懂的时候是不会哭的，因为他根本就不知道语言是怎么回事，小孩子长大后会讲英语了也不会鸣放鞭炮庆祝，因为这是很正常的事情，每个人都是这么过来的！所以不管你是初中生，还是过了六级的大学生，都请忘掉自己的英语水平，忘掉已经考过的证书，老老实实的像个婴儿一样一步步的去学，只有这样你才有可能走上英语成功之路。</p><p>　　3、忘记自己的脸面！<br>　　害怕丢脸，害怕犯错误是所有英语学习者的通病，而且往往越是年龄大的人越是如此！想一想我们在一两岁学说话的时候花了多长时间才说出“爸爸、妈妈”这样简单的词汇？我们有脸红吗？我们有感到羞愧吗？当然没有！因为我们根本就不知道什么叫丢脸，什么叫惭愧！而这恰恰就是语言学习的诀窍！所以从今天开始，不管我们的英语讲的有多么的烂，不管能不能听的懂，我们都不要害羞和气馁。我们要做的就是第一：接受现实，承认自己的不足；第二：忘掉脸面，老老实实的学习，把别人的嘲笑和打击当成空气，走自己的路，让别人羡慕去吧！</p><p>　　4、尽可能多的去接触英语！<br>　　婴儿从来不需要去买磁带练习听力，也不需要去找英语角练习口语；不是因为他不去练习听力，也不是因为他不去练口语，而是因为他一出生就有很多人在他耳边说英语，所以他把吸收的语言信号慢慢通过嘴巴反射出去，无形中每天都在练习口语！我们当然不可能去指望我们的父母和我们说英语，也不能指望我们的身边的朋友也和我们说英语，但我们需要自己自觉一点，要充分利用现有的资源，比如电视、广播、网络，来营造一个声音和文字的环境，同时抓住一切机会去用英语表达自己的思想，表达自己的感情！还是那句话，忘了自己在学英语，就当你在做一件极其普通的事情，不要把学英语搞的那么隆重，那么花哨。脚踏实地，终有一天会获得丰厚的回报！</p><p>　　5、尽可能的去学会用英语思维！<br>　　所谓的英语思维，更重要的是Think in American way！学习英语表达，学习由于文化差异带来的语言变化。有很多人会问，我现在已经养成了用汉语思维的习惯了，怎么还能用另一种语言思维呢？其实这就好像是电视机的频道一样，语言之间的切换就像频道之间的切换，是完全可以的。我在这里接触过很多中国小孩，他们遇到外国人就说着流利的英语，碰见中国人的时候又改成汉语，问他们，他们说都能用两种语言思维，只是不认得也不会写汉字。所以我们每天只要有可能，就让自己的思维切换到英语这个频道，用英语去思考问题，开始可能会比较痛苦，但一旦你真正的坚持下来（这是成功的唯一途径），你就会发现你的英语已经了不得了。</p><p>　　我提倡像婴儿一样学英语并不是真的把自己变成像婴儿那样弱智，而是因为婴儿学习语言的过程其实很值得我们大家学习和模仿！我最希望大家记住的一个概念就是忘记自己在学英语，就当这是你的母语！新东方少儿英语课的名称叫Pop英语，有一个含义就是让孩子“泡”在英语的学习的环境里面。我们也要尽可能的去接触英语，接触的越多越好！我们如果真的能具备婴儿学习语言时的那么多优秀品质，我想我们花在英语上的那么多精力和金钱就不会那么冤枉了。</p><p>本文转载至&lt;<a href="http://bbs.tianya.cn/post-english-211779-1.shtml">http://bbs.tianya.cn/post-english-211779-1.shtml</a></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Englist</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>敏捷开发</title>
    <link href="/2019/07/07/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
    <url>/2019/07/07/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<p>敏捷开发初步了解</p><span id="more"></span><p>学习笔记记录</p><p><img src="/images/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91.jpg" alt="敏捷开发"></p>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试计划</title>
    <link href="/2019/06/10/%E6%B5%8B%E8%AF%95%E8%AE%A1%E5%88%92/"/>
    <url>/2019/06/10/%E6%B5%8B%E8%AF%95%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<p>测试计划Testing plan，描述了要进行的测试活动的范围、方法、资源和进度的文档；是对整个信息系统应用软件组装测试和确认测试。它确定测试项、被测特性、测试任务、谁执行任务、各种可能的风险。测试计划可以有效预防计划的风险，保障计划的顺利实施。</p><span id="more"></span><h3 id="测试计划的目的"><a href="#测试计划的目的" class="headerlink" title="测试计划的目的"></a>测试计划的目的</h3><p>制定测试计划，要达到的目标如下：<br>（1）为测试各项活动制定一个现实可行的、综合的计划，包括每项测试活动的对象、范围、方法、进度和预期结果。<br>（2）为项目实施建立一个组织模型，并定义测试项目中每个角色的责任和工作内容。<br>（3）开发有效的测试模型，能正确地验证正在开发的软件系统。<br>（4）确定测试所需要的时间和资源，以保证其可获得性、有效性。<br>（5）确立每个测试阶段测试完成以及测试成功的标准、要实现的目标。<br>（6）识别出测试活动中各种风险，并消除可能存在的风险，降低由不可能消除的风险所带来的损失。</p><h3 id="测试计划的作用"><a href="#测试计划的作用" class="headerlink" title="测试计划的作用"></a>测试计划的作用</h3><p>测试计划通常分内部作用和外部作用，内部作用有以下3种：<br>（1）作为测试计划的结果，让相关人员和开发人员来评审。<br>（2）存储计划执行的细节，让测试人员进行同行评审。<br>（3）存储计划进度表、测试环境等更多的信息。<br>    测试计划的外部作用是为顾客提供一种信心，通常向顾客交代有关测试过程、人员的技能、资源、使用的工具等信息</p><h3 id="测试计划的思路"><a href="#测试计划的思路" class="headerlink" title="测试计划的思路"></a>测试计划的思路</h3><p><img src="/images/%E6%B5%8B%E8%AF%95%E8%AE%A1%E5%88%92/%E6%B5%8B%E8%AF%95%E8%AE%A1%E5%88%92.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>写hexo博客不需要管理员权限</title>
    <link href="/2019/05/30/%E5%86%99hexo%E5%8D%9A%E5%AE%A2%E4%B8%8D%E9%9C%80%E8%A6%81%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90/"/>
    <url>/2019/05/30/%E5%86%99hexo%E5%8D%9A%E5%AE%A2%E4%B8%8D%E9%9C%80%E8%A6%81%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90/</url>
    
    <content type="html"><![CDATA[<p>每次写博客都需要管理员权限，虽然安全，但是不是很烦？今天找到一个方法解决这个问题。<br>博客文件夹source默认只有管理员权限才可以读写，<br>解决思路是把博客文件夹增加用户，并把权限修改为你需要的读写权限。</p><span id="more"></span><h4 id="解锁文件夹"><a href="#解锁文件夹" class="headerlink" title="解锁文件夹"></a>解锁文件夹</h4><p><img src="/images/%E5%86%99hexo%E5%8D%9A%E5%AE%A2%E4%B8%8D%E9%9C%80%E8%A6%81%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90/%E6%9D%83%E9%99%901.jpg" alt="图片"></p><h4 id="增加用户"><a href="#增加用户" class="headerlink" title="增加用户"></a>增加用户</h4><p><img src="/images/%E5%86%99hexo%E5%8D%9A%E5%AE%A2%E4%B8%8D%E9%9C%80%E8%A6%81%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90/%E6%9D%83%E9%99%902.jpg" alt="图片"></p><h4 id="修改账户权限"><a href="#修改账户权限" class="headerlink" title="修改账户权限"></a>修改账户权限</h4><p><img src="/images/%E5%86%99hexo%E5%8D%9A%E5%AE%A2%E4%B8%8D%E9%9C%80%E8%A6%81%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90/%E6%9D%83%E9%99%903.jpg" alt="图片"></p><h4 id="把权限应用到包含的项目"><a href="#把权限应用到包含的项目" class="headerlink" title="把权限应用到包含的项目"></a>把权限应用到包含的项目</h4><p><img src="/images/%E5%86%99hexo%E5%8D%9A%E5%AE%A2%E4%B8%8D%E9%9C%80%E8%A6%81%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90/%E6%9D%83%E9%99%904.jpg" alt="图片"></p><h4 id="确定"><a href="#确定" class="headerlink" title="确定"></a>确定</h4><p><img src="/images/%E5%86%99hexo%E5%8D%9A%E5%AE%A2%E4%B8%8D%E9%9C%80%E8%A6%81%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90/%E6%9D%83%E9%99%905.jpg" alt="图片"></p>]]></content>
    
    
    <categories>
      
      <category>建设博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何做好测试需求分析</title>
    <link href="/2019/05/26/%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E6%B5%8B%E8%AF%95%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/"/>
    <url>/2019/05/26/%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E6%B5%8B%E8%AF%95%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>怎么做需求分析?测试需求分析就是分析我们测试什么、如何测试的过程。通过完备的测试需求分析可以输出高质量的软件测试计划、软件测试方案、软件测试用例。</p><span id="more"></span><hr><h3 id="软件测试需求分析的一般步骤"><a href="#软件测试需求分析的一般步骤" class="headerlink" title="软件测试需求分析的一般步骤"></a><strong>软件测试需求分析的一般步骤</strong></h3><h4 id="1-测试需求收集"><a href="#1-测试需求收集" class="headerlink" title="1.测试需求收集"></a><strong>1.测试需求收集</strong></h4><p>通过需求文档了解需求的实现背景，按照业务场景制作流程图、思维导图。列出需求文档中的具有可测性的原始需求。最后生成一个以测试的观点出发的checklist（检查表），用来作为测试该软件的主要工作内容。检查表的检查要点包括需求的正确性、必要性、优先级、明确性、可测性、完整性、一致性、可修改性。</p><h4 id="2-分析需求合理性"><a href="#2-分析需求合理性" class="headerlink" title="2.分析需求合理性"></a><strong>2.分析需求合理性</strong></h4><p>通过业务知识来分析需求的合理性，需要我们有深厚的业务功底，然后在通过结合系统现有的实现来分析需求的合理性。</p><h4 id="3-确定测试的范围和优先级"><a href="#3-确定测试的范围和优先级" class="headerlink" title="3.确定测试的范围和优先级"></a><strong>3.确定测试的范围和优先级</strong></h4><p>确定需求所涉及的全部测试点，然后通过分析，测试范围的优先级。</p><h4 id="4-细化测试点并确定测试方法"><a href="#4-细化测试点并确定测试方法" class="headerlink" title="4.细化测试点并确定测试方法"></a><strong>4.细化测试点并确定测试方法</strong></h4><p>对每一条需求进行细化分解，形成可测试的分层描述的测试点，可以用MindManager列出个模块下的测试点，各模块或大的测试点需要写出对应的测试方法，或测试策略。删除测试需求中存在的重复的、冗余的含有关系的测试项。如果有类似的测试项，最终生成测试需求树。</p><p>是否需要性能测试、白盒测试，是否需要提前准备数据，或会遇到什么样的测试难点，采取怎样的应对措施。</p><h4 id="5-确定哪些工作测试人员可以提前介入"><a href="#5-确定哪些工作测试人员可以提前介入" class="headerlink" title="5.确定哪些工作测试人员可以提前介入"></a><strong>5.确定哪些工作测试人员可以提前介入</strong></h4><p>测试提前介入测试，规避了后面的测试的进度风险和质量风险。</p><h4 id="6-查缺补漏"><a href="#6-查缺补漏" class="headerlink" title="6.查缺补漏"></a><strong>6.查缺补漏</strong></h4><p>主要关注有没有场景需求没有考虑全面， 涉及的修改范围被遗漏了，以及一些特殊的关联配置没有考虑到的，另外如果需求做了一些变动也要及时补充需求分析，主要是分析变动可能带来的风险，以及准备哪些应对之策。</p><h3 id="需求分析的输出结果"><a href="#需求分析的输出结果" class="headerlink" title="需求分析的输出结果"></a>需求分析的输出结果</h3><p>需求来源分析的输出为《测试需求来源表》；</p><p>原始测试需求提取的输出为《原始测试需求表》；</p><p>原始测试需求分析的输出为《初始测试项表》；</p><p>测试特性分析的输出为《测试特性表》和《特性测试项表》</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><hr><p><a href="https://www.cnblogs.com/hanxiaomin/p/6132828.html">https://www.cnblogs.com/hanxiaomin/p/6132828.html</a></p><p><a href="https://blog.csdn.net/zhusongziye/article/details/79703982">https://blog.csdn.net/zhusongziye/article/details/79703982</a></p><p><a href="https://blog.csdn.net/fyx_testers/article/details/80871591">https://blog.csdn.net/fyx_testers/article/details/80871591</a></p><p><a href="http://blog.chinaunix.net/uid-26983585-id-5768907.html">http://blog.chinaunix.net/uid-26983585-id-5768907.html</a></p><p><strong>测试需求分析的常用的工程方法</strong> <a href="http://www.51testing.com/html/94/n-3718394.html&gt;">http://www.51testing.com/html/94/n-3718394.html&gt;</a></p>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试用例那点事</title>
    <link href="/2019/05/23/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E9%82%A3%E7%82%B9%E4%BA%8B/"/>
    <url>/2019/05/23/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E9%82%A3%E7%82%B9%E4%BA%8B/</url>
    
    <content type="html"><![CDATA[<h4 id="用例设计"><a href="#用例设计" class="headerlink" title="用例设计"></a>用例设计</h4><p>前提，尽可能多的站在不同的角度分析问题。比如在运营维护、用户等角度来看待软件，分别针对性的设计测试用例，同时使用一些设计方法。</p><span id="more"></span><p>编写测试用例的两个途径  </p><blockquote><p>1 先有用例设计，从整个产品&#x2F;项目出发，先确定测试范围、测试目标，再细化范围到具体对象-&gt;具体功能，确定设计用例技术和测试方法，再来编写用例。<br>2 测试执行后-通过Bug反推 修改补充用例。两者相结合才会产出一份漂亮且有效的测试用例.</p></blockquote><h4 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h4><ul><li><p>完整覆盖需求</p></li><li><p>有清晰的输入输出</p></li><li><p>描述清晰简洁</p></li><li><p>编写有顺序</p></li><li><p>要突出重点</p></li><li><p>用例需要不断完善</p></li><li><p>每条用例都有通过的标准</p></li></ul><h4 id="用例具体内容"><a href="#用例具体内容" class="headerlink" title="用例具体内容"></a>用例具体内容</h4><p>1 用例编号<br>全局唯一，我们可以通过代号快速找到测试用例。<br>格式是：项目名模块名001，可以通过编号快速知道一个项目有多少用例，一个模块有多少用例。</p><p>2 用例标题</p><blockquote><p>目的:概述测试用例意图<br>书写方式：一句完整的话（不超过30个汉字）；功能简报形<br>例：电影详情页-返回<br>例：栏目-发布<br>例：电影-添加</p></blockquote><p>3 预置条件<br>书写要求：一个简洁的结果。</p><blockquote><p>用户已成功登陆<br>自动审核的开关已关</p></blockquote><p>4 测试步骤<br>书写要求：有顺序的可执行的操作</p><p>5 预期结果<br>书写要求：和测试步骤中点一一对应,可检查</p><p>6 测试数据<br>测试数据：测试时使用到的数据</p><h4 id="编写测试用例常见问题"><a href="#编写测试用例常见问题" class="headerlink" title="编写测试用例常见问题"></a>编写测试用例常见问题</h4><ul><li>用例标题意图不明确</li><li>用例中引用其他用例</li><li>用例中包含过多的细节</li><li>用例中出现笼统的词( 反复、多次 - 确定反复的具体次数&#x2F;范围； 长时间 - 确定长时间的具体时间&#x2F;范围； 大量 - 确定具体的数据量&#x2F;范围。)</li><li>用例中步骤不可执行</li><li>用例中期望结果不可验证</li></ul>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件测试流程框架</title>
    <link href="/2019/05/22/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/"/>
    <url>/2019/05/22/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="武能动手敲代码，文能提笔写文档。"><a href="#武能动手敲代码，文能提笔写文档。" class="headerlink" title="武能动手敲代码，文能提笔写文档。"></a>武能动手敲代码，文能提笔写文档。</h3><p>一分钟了解软件测试这档事。</p><p>目录</p><span id="more"></span><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E7%9B%AE%E5%BD%95.jpg" alt="目录"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E7%9B%AE%E7%9A%84.jpg" alt="软件测试的目的"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E6%B5%8B%E8%AF%95%E5%88%86%E7%B1%BB.jpg" alt="测试分类"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E9%AA%8C%E6%94%B6%E6%B5%8B%E8%AF%95.jpg" alt="验收测试"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E5%8E%9F%E5%88%99.jpg" alt="软件测试的原则"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E5%BC%80%E5%8F%91%E7%80%91%E5%B8%83%E6%A8%A1%E5%9E%8B.jpg" alt="开发瀑布模型"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E7%80%91%E5%B8%83%E6%A8%A1%E5%9E%8B%E4%BC%98%E7%BC%BA%E7%82%B9.jpg" alt="瀑布模型优缺点"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95v%E6%A8%A1%E5%9E%8B.jpg" alt="软件测试v模型"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/v%E6%A8%A1%E5%9E%8B%E4%BC%98%E7%BC%BA%E7%82%B9.jpg" alt="v模型优缺点"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%BC%96%E5%86%99%E6%B5%81%E7%A8%8B.jpg" alt="测试用例编写流程"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90.jpg" alt="需求分析"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%902.jpg" alt="需求分析2"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E6%8F%90%E5%8F%96%E6%B5%8B%E8%AF%95%E7%82%B9.jpg" alt="提取测试点"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E5%8C%85%E5%90%AB%E5%93%AA%E4%BA%9B%E5%86%85%E5%AE%B9.jpg" alt="测试用例包含哪些内容"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%BC%96%E5%86%99%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.jpg" alt="测试用例编写注意事项"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%BC%96%E5%86%99%E6%96%B9%E6%B3%95.jpg" alt="测试用例编写方法"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E8%BE%B9%E7%95%8C%E5%80%BC%E5%88%86%E6%9E%90%E6%B3%95.jpg" alt="边界值分析法"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E7%94%A8%E4%BE%8B%E7%BC%96%E5%86%99%E6%96%B9%E6%B3%95%E5%9C%BA%E6%99%AF%E6%B3%95.jpg" alt="用例编写方法场景法"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E5%AE%9E%E4%BE%8B.jpg" alt="测试用例实例"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E8%AF%84%E5%AE%A1.jpg" alt="测试用例评审"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E8%AF%84%E5%AE%A12.jpg" alt="测试用例评审2"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%9A%84%E7%AE%A1%E7%90%86.jpg" alt="测试用例的管理"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%9A%84%E7%AE%A1%E7%90%862.jpg" alt="测试用例的管理2"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%9A%84%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.jpg" alt="测试用例的管理工具"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E8%BF%AD%E4%BB%A3%E6%B5%8B%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.jpg" alt="迭代测试常见问题"></p><p>测试计划<img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E6%B5%8B%E8%AF%95%E8%AE%A1%E5%88%92.jpg" alt="测试计划"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B8%B8%E7%94%A8%E6%AD%A5%E9%AA%A4.jpg" alt="功能测试常用步骤"></p><p><img src="/images/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6/%E7%9B%B8%E5%85%B3%E7%9A%84%E6%B5%8B%E8%AF%95%E7%B1%BB%E5%9E%8B.jpg" alt="相关的测试类型"></p>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="/2019/05/21/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2019/05/21/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>第一篇博客开始了。。。</p><p>没有标题</p><hr><span id="more"></span><p>​       上周末花了我一天时间搭建个人博客，接下来花了一周多时间diy博客样式（业余时间），现在基本满意了，接下来就是最重要的事情了。</p><p>​       不知道从什么时候开始的，我特别喜欢一个地方，特别喜欢。不管有事没事，就是喜欢在这里呆上一段时间，我把这种感觉称作”我的图书馆一小时”，在这里呆一会，一天工作的疲惫都烟消云散，一切烦恼都找不到了，就是那么惬意。都说环境会影响人，我以前不相信，现在又特别认同。有人说‘当你能同时接受两种不同的观点，就能理解这个复杂的世界了’，环境会影响人，在地铁上吵杂的环境里，我不能忍受。在图书馆这样的环境里，我时常会想，这里都有什么类型的人？也许他们和我一样，仅仅是需要这样的环境?在这里我不是每次都看书的，有时只是在这里坐一会，休息休息。我的很多决定都是在这里定下的。一小时随意的思考，能让我静下心来，能够自我反省，三省吾身。当然大多数时候，一小时是不够用的，但每次来最少一小时。</p><p>​     越来越觉得时间不够用，能来这里待一会都很难得。以前喜欢自己写写画画，涂鸦生活琐事，从来没有想过公开。现在越来越觉的写博客的重要性，把作品展示出来的重要性，只有这样才能让我遇到和我一样的人，分享、交流，生命才更有意义。其实我也没想好具体些什么？我想，写什么都不重要，重要的是直接开始吧，今天作为一个开始，写给几十年后的自己看，我想那时的我会为现在的自己感到自豪的。</p>]]></content>
    
    
    <categories>
      
      <category>记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo yilia接入valine评论系统</title>
    <link href="/2019/05/18/yilia%E6%8E%A5%E5%85%A5valine%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <url>/2019/05/18/yilia%E6%8E%A5%E5%85%A5valine%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>搭建博客的时候 想要接入一个评论功能,查了很多资料，终于找到一个方案，做个记录方便自己方便他人。<br>1.多说（现在已经不能用）<br>2.网易云跟帖（现在已经不能用）<br>3.畅言（需要提供备案号）<br>4.来必力（LiveRe）<br>5.Disqus<br>6.Hypercomments<br>7.Valine<br>最后选用valine这个插件，就因为它简洁</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>1.去valine注册一个账号<a href="https://leancloud.cn/dashboard/login.html#/signup%EF%BC%8C%E6%B3%A8%E5%86%8C%E6%88%90%E5%8A%9F%E4%B9%8B%E5%90%8E%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%85%8D%E8%B4%B9%E7%9A%84%E5%BA%94%E7%94%A8">https://leancloud.cn/dashboard/login.html#/signup，注册成功之后创建一个免费的应用</a><br>2.创建好之后进入创建的应用，选择左下角的设置&gt;应用Key，然后就能看到你的appid和appkey<br>3.在应用里面的安全中心加入自己的域名。</p><h3 id="加入代码"><a href="#加入代码" class="headerlink" title="加入代码"></a>加入代码</h3><p>1.在hexo加入valine的评论配置</p><p>加入代码的文件在hexo的 themes&#x2F;yilia&#x2F;_config.yml 加到文件的最后即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">valine:</span> <br>  <span class="hljs-attr">appid:</span> <span class="hljs-string">5Luh2LTjNL7BdW3tUc6gN2Yb-gzGzoHsz</span> <span class="hljs-comment">#Leancloud应用的appId</span><br>  <span class="hljs-attr">appkey:</span> <span class="hljs-string">ySLSX2eHHgjme7X8QzLU6YYL</span> <span class="hljs-comment">#Leancloud应用的appKey</span><br>  <span class="hljs-attr">verify:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#验证码</span><br>  <span class="hljs-attr">notify:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#评论回复提醒</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">mm</span> <span class="hljs-comment">#评论列表头像样式：&#x27;&#x27;/mm/identicon/monsterid/wavatar/retro/hide</span><br>  <span class="hljs-attr">placeholder:</span> <span class="hljs-string">ヾﾉ≧∀≦)o来啊，快活啊!</span> <span class="hljs-comment">#评论框占位符</span><br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>2.然后在hexo的 themes&#x2F;yilia&#x2F;layout&#x2F;_partial&#x2F;article.ejs加入代码</p><blockquote><p>注意这段代码需要放置到&lt;% if (!index &amp;&amp; post.comments){ %&gt;中, 这样首页就不会出现评论栏. </p></blockquote><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="language-xml">&lt;%</span><span class="language-ruby"> <span class="hljs-keyword">if</span> (theme.valine &amp;&amp; theme.valine.appid &amp;&amp; theme.valine.appkey)&#123; </span><span class="language-xml">%&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;comments&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;comments&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-selector-class">.comments</span>&#123;<span class="hljs-attribute">margin</span>:<span class="hljs-number">30px</span>;<span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span>;<span class="hljs-attribute">background</span>:<span class="hljs-number">#fff</span>&#125;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>:<span class="hljs-number">800px</span>)&#123;<span class="hljs-selector-class">.comments</span>&#123;<span class="hljs-attribute">margin</span>:auto;<span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span>;<span class="hljs-attribute">background</span>:<span class="hljs-number">#fff</span>&#125;&#125;</span></span><br><span class="language-css"><span class="language-xml">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml">      &lt;%-</span><span class="language-ruby"> partial(<span class="hljs-string">&#x27;post/valine&#x27;</span>, &#123;</span><br><span class="language-ruby">        <span class="hljs-symbol">key:</span> post.slug,</span><br><span class="language-ruby">        <span class="hljs-symbol">title:</span> post.title,</span><br><span class="language-ruby">        <span class="hljs-symbol">url:</span> config.url+url_for(post.path)</span><br><span class="language-ruby">        &#125;) </span><span class="language-xml">%&gt;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">&lt;%</span><span class="language-ruby"> &#125; </span><span class="language-xml">%&gt;</span><br></code></pre></td></tr></table></figure><p>或者直接把下面这段放到文件的最后</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="language-xml">&lt;%</span><span class="language-perl"> <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">index</span>)&#123; </span><span class="language-xml">%&gt;</span><br><span class="language-xml">&lt;%</span><span class="language-perl"> <span class="hljs-keyword">if</span> (theme.valine &amp;&amp; theme.valine.appid &amp;&amp; theme.valine.appkey)&#123; </span><span class="language-xml">%&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;comments&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;comments&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-selector-class">.comments</span>&#123;<span class="hljs-attribute">margin</span>:<span class="hljs-number">30px</span>;<span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span>;<span class="hljs-attribute">background</span>:<span class="hljs-number">#fff</span>&#125;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>:<span class="hljs-number">800px</span>)&#123;<span class="hljs-selector-class">.comments</span>&#123;<span class="hljs-attribute">margin</span>:auto;<span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span>;<span class="hljs-attribute">background</span>:<span class="hljs-number">#fff</span>&#125;&#125;</span></span><br><span class="language-css"><span class="language-xml">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml">      &lt;%</span><span class="language-perl">- partial(<span class="hljs-string">&#x27;post/valine&#x27;</span>, &#123;</span><br><span class="language-perl">        key: post.slug,</span><br><span class="language-perl">        title: post.title,</span><br><span class="language-perl">        url: config.url+url_for(post.path)</span><br><span class="language-perl">        &#125;) </span><span class="language-xml">%&gt;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br><span class="language-xml">&lt;%</span><span class="language-perl"> &#125; </span><span class="language-xml">%&gt;</span><br><span class="language-xml">&lt;%</span><span class="language-perl"> &#125; </span><span class="language-xml">%&gt;</span><br></code></pre></td></tr></table></figure><p>3.在hexo的 themes&#x2F;yilia&#x2F;layout&#x2F;_partial&#x2F;post中创建valine.ejs文件并加入代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vcomment&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;comment&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;//unpkg.com/valine/dist/Valine.min.js&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdnjs.loli.net/ajax/libs/jquery/3.2.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> notify = <span class="hljs-string">&#x27;&lt;%= theme.valine.notify %&gt;&#x27;</span> == <span class="hljs-literal">true</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> verify = <span class="hljs-string">&#x27;&lt;%= theme.valine.verify %&gt;&#x27;</span> == <span class="hljs-literal">true</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Valine</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">av</span>: <span class="hljs-variable constant_">AV</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#vcomment&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">notify</span>: notify,</span><br><span class="language-javascript">        <span class="hljs-attr">app_id</span>: <span class="hljs-string">&quot;&lt;%= theme.valine.appid %&gt;&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">app_key</span>: <span class="hljs-string">&quot;&lt;%= theme.valine.appkey %&gt;&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">placeholder</span>: <span class="hljs-string">&quot;&lt;%= theme.valine.placeholder %&gt;&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">avatar</span>:<span class="hljs-string">&quot;&lt;%= theme.valine.avatar %&gt;&quot;</span>,</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4.最后重新部署一下, 就能看到效果了</p>]]></content>
    
    
    <categories>
      
      <category>建设博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo-yilia自定义404页面</title>
    <link href="/2019/05/17/yilia%E8%87%AA%E5%AE%9A%E4%B9%89404%E9%A1%B5%E9%9D%A2/"/>
    <url>/2019/05/17/yilia%E8%87%AA%E5%AE%9A%E4%B9%89404%E9%A1%B5%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<ol><li>新建一个文件，文件名”404.html”</li><li>编辑放入下面内容保存，以腾讯404公益界面为例</li></ol><span id="more"></span><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml">---<br>title: 404 Not Found：该页无法显示<br>toc: false<br>comments: false<br>permalink: /404.html<br>---<br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>404<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>                                                                                                                                        <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot;</span> <span class="hljs-attr">homePageName</span>=<span class="hljs-string">&quot;返回首页&quot;</span> <span class="hljs-attr">homePageUrl</span>=<span class="hljs-string">&quot;你的网址&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ol start="3"><li>把此文件放到blog的source文件夹里，重新把网址部署到服务器或github</li></ol><p>展示效果<br><img src="/images/hexo-yilia%E8%87%AA%E5%AE%9A%E4%B9%89404%E9%A1%B5%E9%9D%A2/404.jpg" alt="404"></p>]]></content>
    
    
    <categories>
      
      <category>建设博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo-yilia添加照片-视频-音乐</title>
    <link href="/2019/05/16/yilia%E6%B7%BB%E5%8A%A0%E7%85%A7%E7%89%87-%E8%A7%86%E9%A2%91-%E9%9F%B3%E4%B9%90/"/>
    <url>/2019/05/16/yilia%E6%B7%BB%E5%8A%A0%E7%85%A7%E7%89%87-%E8%A7%86%E9%A2%91-%E9%9F%B3%E4%B9%90/</url>
    
    <content type="html"><![CDATA[<h2 id="一-添加照片"><a href="#一-添加照片" class="headerlink" title="一. 添加照片"></a>一. 添加照片</h2><hr><ol><li>第一种，上传本地的：在hexo创建的博客目录下的source中建立一个images文件夹专门放图片，images的路径：你的博客目录source&#x2F;images ,新建页面</li></ol><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> <span class="hljs-string">&quot;photo&quot;</span><br></code></pre></td></tr></table></figure><span id="more"></span><ol start="2"><li>第二种</li></ol><ul><li><p>设置站点配置_config.yml:将post_asset_folder: false改为post_asset_folder: true_</p></li><li><p>*安装插件:npm install <a href="https://github.com/CodeFalling/hexo-asset-image">https://github.com/CodeFalling/hexo-asset-image</a> – save</p></li><li><p>运行hexo n “XXXXXX”,生成XXXXX.md博文时就会在&#x2F;source&#x2F;_posts目录下生成XXXXXX的文件夹，将你想XXXXX博文中插入的照片放置到这个同名文件夹中即可，图片的命名随意。</p></li><li><p>添加图片:在想添加的位置写入</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[图片名称]</span>(图片文件名)<br></code></pre></td></tr></table></figure><p>例如:可爱的小猫咪</p><p><img src="/images/hexo-yilia%E6%B7%BB%E5%8A%A0%E7%85%A7%E7%89%87-%E8%A7%86%E9%A2%91-%E9%9F%B3%E4%B9%90/%E6%BC%94%E7%A4%BA%E7%85%A7%E7%89%87.jpg" alt="演示照片"></p></li></ul><h2 id="二-添加视频"><a href="#二-添加视频" class="headerlink" title="二. 添加视频"></a>二. 添加视频</h2><hr><ol><li>打开当前博客source\ 新建video文件夹，在video下的新建ins.css文件</li><li>编辑ins.css 文件，添加以下内容</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* ====== video ===== */</span><br><span class="hljs-selector-class">.video-container</span> &#123;<br><span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;<br><span class="hljs-attribute">position</span>: relative;<br><span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">56.25%</span>;<br><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>&#125;<br><span class="hljs-selector-class">.video-container</span> <span class="hljs-selector-tag">iframe</span>, <span class="hljs-selector-class">.video-container</span> <span class="hljs-selector-tag">object</span>, <span class="hljs-selector-class">.video-container</span> embed &#123;<span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;<span class="hljs-attribute">position</span>: absolute;<span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<span class="hljs-attribute">left</span>: <span class="hljs-number">7%</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">85%</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">85%</span>;<span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">20px</span> <span class="hljs-number">2px</span> <span class="hljs-number">#888888</span>;&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>在  source\video 下新建文件 index.md , 编辑添加以下内容<br>hexo new page “video”</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">视频</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-05-13 22:17:49</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-comment">## 每个人都离不开的那张网</span><br><br><span class="hljs-string">&lt;link</span> <span class="hljs-string">rel=&quot;stylesheet&quot;</span> <span class="hljs-string">href=&quot;./ins.css&quot;&gt;</span><br><span class="hljs-string">&lt;center&gt;</span><br><span class="hljs-string">&lt;div</span> <span class="hljs-string">class=&quot;video-container&quot;&gt;</span><br><span class="hljs-string">&lt;iframe</span>  <span class="hljs-string">src=&quot;//player.bilibili.com/player.html?aid=52117681&amp;cid=91234704&amp;page=1&quot;</span>  <span class="hljs-string">allowfullscreen=&quot;true&quot;&gt;</span><br><span class="hljs-string">&lt;/iframe&gt;</span><br><span class="hljs-string">&lt;/div&gt;</span><br><span class="hljs-string">&lt;/center&gt;</span><br></code></pre></td></tr></table></figure><h2 id="三-添加音乐"><a href="#三-添加音乐" class="headerlink" title="三. 添加音乐"></a>三. 添加音乐</h2><hr><p>添加网页音乐</p><p>1、 打开网易云音乐首页，然后搜索你要添加的背景音乐<br>2、 搜索到歌曲点击生成外链播放器，进去下一个界面</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;iframe <span class="hljs-attribute">frameborder</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attribute">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">marginwidth</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">marginheight</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">width</span>=298 <span class="hljs-attribute">height</span>=52 <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;//music.163.com/outchain/player?type=0&amp;id=2579685854&amp;auto=0&amp;height=32&quot;</span>&gt;&lt;/iframe&gt;<br></code></pre></td></tr></table></figure><p>3、 复制外链播放器的代码<br>打开yilia主题下的layout&#x2F;_partial文件夹下的left-col.ejs文件<br>vim themes&#x2F;yilia&#x2F;layout&#x2F;_partial&#x2F;left-col.ejs<br>复制文件内容到最下端</p><p>注：调节播放器大小，改变外链播放器的代码块，长度宽度即可<br>width&#x3D;260 height&#x3D;86</p>]]></content>
    
    
    <categories>
      
      <category>建设博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo下yilia主题添加字数统计和阅读时长功能</title>
    <link href="/2019/05/15/yilia%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E5%92%8C%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF%E5%8A%9F%E8%83%BD/"/>
    <url>/2019/05/15/yilia%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E5%92%8C%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<ol><li><p>安装 hexo-wordcount在博客目录下打开Git Bash Here 输入命令</p> <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i –save hexo-wordcount<br></code></pre></td></tr></table></figure> <span id="more"></span></li><li><p>文件配置在theme\yilia\layout_partial\post下创建word.ejs文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top:10px;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-time&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-meta-item-icon&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-keyboard-o&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-meta-item-text&quot;</span>&gt;</span>  字数统计: <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-count&quot;</span>&gt;</span>&lt;%= wordcount(post.content) %&gt;字<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-time&quot;</span>&gt;</span><br>      <span class="hljs-symbol">&amp;nbsp;</span> | <span class="hljs-symbol">&amp;nbsp;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-meta-item-icon&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-hourglass-half&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-meta-item-text&quot;</span>&gt;</span>  阅读时长: <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-count&quot;</span>&gt;</span>&lt;%= min2read(post.content) %&gt;分<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>然后在 themes&#x2F;yilia&#x2F;layout&#x2F;_partial&#x2F;article.ejs中添加</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&lt;div class=<span class="hljs-string">&quot;article-inner&quot;</span>&gt;<br>    &lt;<span class="hljs-meta">%</span> <span class="hljs-keyword">if</span> <span class="hljs-comment">(post.link || post.title)</span>&#123; <span class="hljs-meta">%</span>&gt;<br>      &lt;header class=<span class="hljs-string">&quot;article-header&quot;</span>&gt;<br>        &lt;<span class="hljs-meta">%</span>- partial<span class="hljs-comment">(&#x27;post/title&#x27;, &#123;class_name: &#x27;article-title&#x27;&#125;)</span> <span class="hljs-meta">%</span>&gt;<br>        &lt;<span class="hljs-meta">%</span> <span class="hljs-keyword">if</span> <span class="hljs-comment">(!post.noDate)</span>&#123; <span class="hljs-meta">%</span>&gt;<br>        &lt;<span class="hljs-meta">%</span>- partial<span class="hljs-comment">(&#x27;post/date&#x27;, &#123;class_name: &#x27;archive-article-date&#x27;, date_format: null&#125;)</span> <span class="hljs-meta">%</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">  <span class="hljs-comment">&lt;!-- 需要添加的位置 --&gt;</span></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 开始添加字数统计--&gt;</span></span><br><span class="language-xml">  &lt;% if(theme.word_count &amp;&amp; !post.no_word_count)</span><span class="hljs-template-variable">&#123;%&gt;</span><br><span class="hljs-template-variable">    &lt;%- partial(&#x27;post/word&#x27;) %&gt;</span><br><span class="hljs-template-variable">    &lt;% &#125;</span><span class="language-xml"> %&gt;</span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 添加完成 --&gt;</span></span><br><span class="language-xml">    </span><br><span class="language-xml">  &lt;% &#125; %&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure></li><li><p>添加阅读统计：使用不蒜子统计,修改</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="language-xml"><span class="hljs-comment">&lt;!-- 开始添加字数统计--&gt;</span></span><br><span class="language-xml">&lt;%</span><span class="language-ruby"> <span class="hljs-keyword">if</span>(theme.word_count &amp;&amp; !post.no_word_count)&#123;</span><span class="language-xml">%&gt;</span><br><span class="language-xml">  &lt;%-</span><span class="language-ruby"> partial(<span class="hljs-string">&#x27;post/word&#x27;</span>) </span><span class="language-xml">%&gt;</span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 开始添加阅读量统计--&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_container_page_pv&quot;</span>&gt;</span></span><br><span class="language-xml">    阅读统计：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_value_page_pv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>次</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 结束添加--&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  &lt;%</span><span class="language-ruby"> &#125; </span><span class="language-xml">%&gt;</span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- 添加完成 --&gt;</span>   </span><br></code></pre></td></tr></table></figure></li><li><p>开启功能在站点的_config.yml中添加下面代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 是否开启字数统计</span><br><span class="hljs-comment">#不需要使用，直接设置值为false，或注释掉</span><br><span class="hljs-attr">word_count:</span> <span class="hljs-literal">True</span><br><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>建设博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Yilia显示站点总访问量-单页面访问量</title>
    <link href="/2019/05/15/Yilia%E6%98%BE%E7%A4%BA%E7%AB%99%E7%82%B9%E6%80%BB%E8%AE%BF%E9%97%AE%E9%87%8F-%E5%8D%95%E9%A1%B5%E9%9D%A2%E8%AE%BF%E9%97%AE%E9%87%8F/"/>
    <url>/2019/05/15/Yilia%E6%98%BE%E7%A4%BA%E7%AB%99%E7%82%B9%E6%80%BB%E8%AE%BF%E9%97%AE%E9%87%8F-%E5%8D%95%E9%A1%B5%E9%9D%A2%E8%AE%BF%E9%97%AE%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>普通用户只需两步走：一行脚本+一行标签，搞定一切。追求极致的用户可以进行任意DIY。</p><p>一、安装脚本（必选）<br>要使用不蒜子必须在页面中引入busuanzi.js，目前最新版如下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><span id="more"></span><p>打开themes&#x2F;你的主题&#x2F;layout&#x2F;_partial&#x2F;footer.ejs添加上述脚本即可(放在最后即可)，当然你也可以添加到 header 中。</p><p>二、安装标签（可选）<br>只需要复制相应的html标签到你的网站要显示访问量的位置即可。您可以随意更改不蒜子标签为自己喜欢的显示效果，内容参考第三部分扩展开发。根据你要显示内容的不同，这分几种情况。</p><p>1、显示站点总访问量<br>要显示站点总访问量，复制以下代码添加到你需要显示的位置。有两种算法可选：</p><p>算法a：pv的方式，单个用户连续点击n篇文章，记录n次访问量。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span><br>    本站总访问量<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>次<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>算法b：uv的方式，单个用户连续点击n篇文章，只记录1次访客数。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_container_site_uv&quot;</span>&gt;</span><br>  本站访客数<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>人次<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>打开themes&#x2F;你的主题&#x2F;layout&#x2F;_partial&#x2F;footer.ejs添加即可。</p><p>2、显示单页面访问量<br>要显示每篇文章的访问量，复制以下代码添加到你需要显示的位置。</p><p>算法：pv的方式，单个用户点击1篇文章，本篇文章记录1次阅读量。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_container_page_pv&quot;</span>&gt;</span><br>  本文总阅读量<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_value_page_pv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>次<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>代码中文字是可以修改的，只要保留id正确即可。</p><blockquote><p>注意使用hexo s部署在本地预览效果的时候，uv数和pv数会过大，这是由于不蒜子用户使用一个存储空间，所以使用localhost:4000进行本地预览的时候会导致数字异常，这是正常现象，只需要将博客部署至云端即可恢复正常。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>建设博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有效沟通</title>
    <link href="/2019/05/13/%E6%9C%89%E6%95%88%E6%B2%9F%E9%80%9A/"/>
    <url>/2019/05/13/%E6%9C%89%E6%95%88%E6%B2%9F%E9%80%9A/</url>
    
    <content type="html"><![CDATA[<p>每天都在沟通，究竟怎样才算是有效的沟通？不管你使用英语、法语、汉语、还是手语都不重要，因为这些都只是沟通的工具罢了。达到沟通本身的目的才是有效沟通，才是沟通的意义所在。</p><span id="more"></span><p>学过计算机网络的都知道，计算机的通信永远要得到对方的一个确认信息，才算完成，而不是说发出信息就完事了。这个笨办法，虽然看似降低了一点点通信效率，但是使得计算机之间的通信非常可靠。人与人之间的通信通常不是这样的，说话的人把话说完，就以为完成了通信，并不管对方是否真的接收了我们传递的信息，或者理解了那些信息的含义。你经常会在一个单位里看到这样的情景，张三让李四去完成一件事，但是过了一段时间，发现李四根本没有开始做。并非李四不愿意做，而是他们之间的沟通出现了问题，李四根本就没在意张三说了什么，或者没有听懂张三的意思。很多时候，工作中的争吵就是由这样的小误会引起的。</p><p>解决这些问题的根本方法，就是进行有效的沟通，确认对方明白了你的意思，然后确认对方是答应你了，还是拒绝你了，不论什么结果，你总要有结论，到此，通信才算结束。这里的“确认”是信息发出人需要主动进行判断“对方”是否明白了你的意思，判断“对方”给你的反馈是否是你需要的还是你不需要的？如果这些都不能确认下来，就说明前面的沟通都是无效的沟通。沟通要以确信对方真正接收到了你传达的信息和信息的含义，才算结束。</p><p>既然沟通要以对方了解你的意思为目的，那么在表达自己的意思时，就需要在你和对方共同认知的基础上讨论那些问题，或者说，要用对方能听得懂，马上理解的语言进行讨论。顾维钧先生是一个很优秀的外交家，他在 1919 年的巴黎和会上向西方国家的代表讲述山东省对中国的重要性时(当时日本想把山东省变成它的殖民地)，用了一个很简单的例子大家就都明白了。顾先生说，孔子对中国人来说，相当于耶稣对西方人一样重要。西方人一直把耶稣的出生地耶路撒冷作为圣地，并且上千年了一直要夺回那个地方。山东是孔子的出生地，它在中国人心中的地位就相当于耶路撒冷在西方人心中的地位。他短短的几句话，就把意思说明白了。对方能听懂，不是因为对山东和孔子有多么熟悉，而是因为熟知耶路撒冷和耶稣。</p><p>既然沟通要以对方了解你的意思为目的，那么在表达自己的意思时，就要用对方能听得懂，马上理解的语言进行讨论。与人有效沟通，重点不在于证明自己正确，而在于达到沟通的目的。智能工具柜的“RFID读卡器”自身的网线接口不能使用，也就是它的网线接口在“RFID读卡器”出厂时就存在问题。我申请反馈换料时的原因描述一览这样写道：“网线接口不能使用”库管收到信息后问我：“是读卡器的技术规格不满足我门的设计要求不能使用？还是读卡器本身不合格存在问题不能使用？还是安装时损毁了不能使用？”我觉得我描述的很清楚了，但是实际情况是对方没有收到我想表达的信息。这时我不但不详细解释而且还和他争辩一番，以证明自己说的没错。争论半天即耽误时间又影响心情，事后想想很不值得。</p><p>既然沟通要以对方了解你的意思为目的，那么在表达自己的意思时，就要开门见山，简洁明了。很多人认为，自己讲的越多，对方接收的信息也越多。其实，如果废话太多，对方根本搞不清你要说什么，沟通的效果为零。更何况在通信中，多少会有点儿噪声， 话多了，难免词不达意，让人误解，这就是噪声。</p><p>总结：第一有效的沟通要以对方的确认为准，不要以为话说出去了，别人就一定接收了你传递的信息；第二要以对方听得懂的话来沟通，切忌卖弄自己的知识， 把简单的问题讲复杂了。第三，沟通要简洁，切中要害。</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode快捷键</title>
    <link href="/2019/05/13/vscode%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2019/05/13/vscode%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<p>基本编辑＃<br>键命令命令ID<br>⌘X剪切线（空选）editor.action.clipboardCutAction<br>⌘C复制行（空选）editor.action.clipboardCopyAction<br>⇧⌘K删除行editor.action.deleteLines<br>⌘Enter在下面插入行editor.action.insertLineAfter<br>⇧⌘Enter在上方插入线条editor.action.insertLineBefore<br>⌥↓向下移动线editor.action.moveLinesDownAction<br>⌥↑向上移动editor.action.moveLinesUpAction<br>⇧⌥↓复制线下editor.action.copyLinesDownAction</p><span id="more"></span><p>⇧⌥↑复制排队editor.action.copyLinesUpAction<br>⌘D添加选择到下一个查找匹配editor.action.addSelectionToNextFindMatch<br>⌘K⌘D将上一个选择移到下一个查找匹配editor.action.moveSelectionToNextFindMatch<br>⌘U撤消上一个光标操作cursorUndo<br>⇧⌥I将光标插入所选每行的末尾editor.action.insertCursorAtEndOfEachLineSelected<br>⇧⌘L选择所有出现的当前选择editor.action.selectHighlights<br>⌘F2选择所有出现的当前单词editor.action.changeAll<br>⌘L选择当前行expandLineSelection<br>⌥⌘↓在下面插入光标editor.action.insertCursorBelow<br>⌥⌘↑在上方插入光标editor.action.insertCursorAbove<br>⇧⌘\跳转到匹配的括号editor.action.jumpToBracket<br>⌘]缩进线editor.action.indentLines<br>⌘[Outdent Lineeditor.action.outdentLines<br>家转到行首cursorHome<br>结束转到行尾cursorEnd<br>⌘↓转到文件结尾cursorBottom<br>⌘↑转到文件的开头cursorTop<br>^PageDown向下滚动线scrollLineDown<br>^PageUp滚动排队scrollLineUp<br>⌘PageDown向下滚动页面scrollPageDown<br>⌘PageUp向上滚动页面scrollPageUp<br>⌥⌘[折叠（折叠）区域editor.fold<br>⌥⌘]展开（uncollapse）区域editor.unfold<br>⌘K⌘[折叠（折叠）所有次区域editor.foldRecursively<br>⌘K⌘]展开（展开）所有子区域editor.unfoldRecursively<br>⌘K⌘0折叠（折叠）所有区域editor.foldAll<br>⌘K⌘J展开（展开）所有区域editor.unfoldAll<br>⌘K⌘C添加行注释editor.action.addCommentLine<br>⌘K⌘U删除行注释editor.action.removeCommentLine<br>⌘&#x2F;切换线评论editor.action.commentLine<br>⇧⌥A切换块评论editor.action.blockComment<br>⌘F找actions.find<br>⌥⌘F更换editor.action.startFindReplaceAction<br>⌘G找下一个editor.action.nextMatchFindAction<br>⇧⌘G找到上一个editor.action.previousMatchFindAction<br>⌥Enter选择查找匹配的所有出现次数editor.action.selectAllMatches<br>⌥⌘C切换查找区分大小写toggleFindCaseSensitive<br>⌥⌘R切换查找正则表达式toggleFindRegex<br>⌥⌘W切换查找整个单词toggleFindWholeWord<br>^⇧M切换使用Tab键设置焦点editor.action.toggleTabFocusMode<br>未分配切换渲染空白toggleRenderWhitespace<br>⌥Z切换Word Wrapeditor.action.toggleWordWrap<br>丰富的语言编辑<br>键命令命令ID<br>^Space触发建议editor.action.triggerSuggest<br>⇧⌘Space触发参数提示editor.action.triggerParameterHints<br>⇧⌥F格式文档editor.action.formatDocument<br>⌘K⌘F格式选择editor.action.formatSelection<br>F12转到定义editor.action.revealDefinition<br>⌘K⌘I显示悬停editor.action.showHover<br>⌥F12窥视定义editor.action.peekDefinition<br>⌘KF12打开定义到一边editor.action.revealDefinitionAside<br>⌘。快速解决editor.action.quickFix<br>⇧F12窥视参考editor.action.referenceSearch.trigger<br>F2重命名符号editor.action.rename<br>⇧⌘。替换为下一个值editor.action.inPlaceReplace.down<br>⇧⌘，替换为以前的值editor.action.inPlaceReplace.up<br>^⇧⌘→展开AST选择editor.action.smartSelect.expand<br>^⇧⌘←收缩AST选择editor.action.smartSelect.shrink<br>⌘K⌘X修剪尾随空格editor.action.trimTrailingWhitespace<br>⌘KM更改语言模式workbench.action.editor.changeLanguageMode<br>导航<br>键命令命令ID<br>⌘T显示所有符号workbench.action.showAllSymbols<br>^G去线…workbench.action.gotoLine<br>⌘P转到文件…，快速打开workbench.action.quickOpen<br>⇧⌘O转到符号…workbench.action.gotoSymbol<br>⇧⌘M显示问题workbench.actions.view.problems<br>F8转到下一个错误或警告editor.action.marker.nextInFiles<br>⇧F8转到上一个错误或警告editor.action.marker.prevInFiles<br>⇧⌘P显示所有命令workbench.action.showCommands<br>^⇧Tab导航编辑器组历史记录workbench.action.openPreviousRecentlyUsedEditorInGroup<br>^-回去workbench.action.navigateBack<br>^-返回快速输入workbench.action.quickInputBack<br>^⇧-直走workbench.action.navigateForward<br>编辑&#x2F;窗口管理<br>键命令命令ID<br>⇧⌘N新窗户workbench.action.newWindow<br>⇧⌘W关闭窗口workbench.action.closeWindow<br>⌘W关闭编辑器workbench.action.closeActiveEditor<br>⌘KF关闭文件夹workbench.action.closeFolder<br>未分配在编辑器组之间循环workbench.action.navigateEditorGroups<br>⌘\拆分编辑器workbench.action.splitEditor<br>⌘1专注于第一编辑组workbench.action.focusFirstEditorGroup<br>⌘2专注于第二编辑组workbench.action.focusSecondEditorGroup<br>⌘3专注于第三编辑组workbench.action.focusThirdEditorGroup<br>未分配专注于左派编辑组workbench.action.focusPreviousGroup<br>未分配专注于权利编辑组workbench.action.focusNextGroup<br>⌘K⇧⌘←向左移动编辑器workbench.action.moveEditorLeftInGroup<br>⌘K⇧⌘→向右移动编辑器workbench.action.moveEditorRightInGroup<br>⌘K←向左移动活动编辑器组workbench.action.moveActiveEditorGroupLeft<br>⌘K→将Active Editor Group右移workbench.action.moveActiveEditorGroupRight<br>^⌘→将编辑器移动到下一组workbench.action.moveEditorToNextGroup<br>^⌘←将编辑器移动到上一组workbench.action.moveEditorToPreviousGroup<br>文件管理<br>键命令命令ID<br>⌘N新文件workbench.action.files.newUntitledFile<br>未分配打开文件…workbench.action.files.openFile<br>⌘S保存workbench.action.files.save<br>⌥⌘S保存全部workbench.action.files.saveAll<br>⇧⌘S另存为…workbench.action.files.saveAs<br>⌘W关workbench.action.closeActiveEditor<br>⌥⌘T关闭他人workbench.action.closeOtherEditors<br>⌘KW关闭组workbench.action.closeEditorsInGroup<br>未分配关闭其他组workbench.action.closeEditorsInOtherGroups<br>未分配关闭组左侧workbench.action.closeEditorsToTheLeft<br>未分配关闭组到右workbench.action.closeEditorsToTheRight<br>⌘K⌘W关闭所有workbench.action.closeAllEditors<br>⇧⌘T重新打开封闭编辑器workbench.action.reopenClosedEditor<br>⌘K输入保持开放workbench.action.keepEditor<br>^Tab打开下一步workbench.action.openNextRecentlyUsedEditorInGroup<br>^⇧Tab打开上一个workbench.action.openPreviousRecentlyUsedEditorInGroup<br>⌘KP复制活动文件的路径workbench.action.files.copyPathOfActiveFile<br>⌘KR在Windows中显示活动文件workbench.action.files.revealActiveFileInWindows<br>⌘KO在新窗口中显示打开的文件workbench.action.files.showOpenedFileInNewWindow<br>未分配比较打开的文件workbench.files.action.compareFileWith<br>显示<br>键命令命令ID<br>^⌘F切换全屏workbench.action.toggleFullScreen<br>⌘KZ切换Zen模式workbench.action.toggleZenMode<br>逃脱逃生离开Zen Modeworkbench.action.exitZenMode<br>⌘&#x3D;放大workbench.action.zoomIn<br>⌘-缩小workbench.action.zoomOut<br>⌘Numpad0重置缩放workbench.action.zoomReset<br>⌘B切换边栏可见性workbench.action.toggleSidebarVisibility<br>⇧⌘E显示资源管理器&#x2F;切换焦点workbench.view.explorer<br>⇧⌘F显示搜索workbench.view.search<br>^⇧G显示源代码管理workbench.view.scm<br>⇧⌘D显示调试workbench.view.debug<br>⇧⌘X显示扩展程序workbench.view.extensions<br>⇧⌘U显示输出workbench.action.output.toggleOutput<br>^Q快速打开视图workbench.action.quickOpenView<br>⇧⌘C打开新命令提示符workbench.action.terminal.openNativeConsole<br>⇧⌘V切换Markdown预览markdown.showPreview<br>⌘KV打开侧面预览markdown.showPreviewToSide<br>^&#96;切换集成终端workbench.action.terminal.toggleTerminal<br>搜索<br>键命令命令ID<br>⇧⌘F显示搜索workbench.view.search<br>⇧⌘H替换文件workbench.action.replaceInFiles<br>⌥⌘C切换匹配案例toggleSearchCaseSensitive<br>⌥⌘W切换匹配整个单词toggleSearchWholeWord<br>⌥⌘R切换使用正则表达式toggleSearchRegex<br>⇧⌘J切换搜索详细信息workbench.action.search.toggleQueryDetails<br>F4关注下一个搜索结果search.action.focusNextSearchResult<br>⇧F4关注上一个搜索结果search.action.focusPreviousSearchResult<br>↓显示下一个搜索字词history.showNext<br>↑显示上一个搜索词history.showPrevious<br>喜好<br>键命令命令ID<br>⌘，打开设置workbench.action.openSettings<br>未分配打开工作区设置workbench.action.openWorkspaceSettings<br>⌘K⌘S打开键盘快捷键workbench.action.openGlobalKeybindings<br>未分配打开用户代码段workbench.action.openSnippets<br>⌘K⌘T选择颜色主题workbench.action.selectTheme<br>未分配配置显示语言workbench.action.configureLocale<br>调试<br>键命令命令ID<br>F9切换断点editor.debug.action.toggleBreakpoint<br>F5开始workbench.action.debug.start<br>F5继续workbench.action.debug.continue<br>^F5开始（没有调试）workbench.action.debug.run<br>F6暂停workbench.action.debug.pause<br>F11踏入workbench.action.debug.stepInto<br>⇧F11走出去workbench.action.debug.stepOut<br>F10跳过workbench.action.debug.stepOver<br>⇧F5停止workbench.action.debug.stop<br>⌘K⌘I显示悬停editor.debug.action.showDebugHover<br>任务<br>键命令命令ID<br>⇧⌘B运行构建任务workbench.action.tasks.build<br>未分配运行测试任务workbench.action.tasks.test<br>扩展<br>键命令命令ID<br>未分配安装扩展workbench.extensions.action.installExtension<br>未分配显示已安装的扩展程序workbench.extensions.action.showInstalledExtensions<br>未分配显示过时的扩展程序workbench.extensions.action.listOutdatedExtensions<br>未分配显示推荐的扩展程序workbench.extensions.action.showRecommendedExtensions<br>未分配显示热门扩展程序workbench.extensions.action.showPopularExtensions<br>未分配更新所有扩展程序workbench.extensions.action.updateAllExtensions</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>收藏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用hexo框架搭建个人博客</title>
    <link href="/2019/05/12/%E4%BD%BF%E7%94%A8hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2019/05/12/%E4%BD%BF%E7%94%A8hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="一-准备工作"><a href="#一-准备工作" class="headerlink" title="一. 准备工作"></a>一. 准备工作</h2><hr><p>1.下载安装nodejs,网址 <a href="https://nodejs.org/">https://nodejs.org</a>  </p><p>2.切换root账号，查看node与npm是否安装正常？  </p>   <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">sudo su<br><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br>npm -v<br></code></pre></td></tr></table></figure><span id="more"></span><p>3.安装cnpm,查看是否安装成功  </p>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm install -g cnpm --registry=https:<span class="hljs-regexp">//</span>registry.npm.taobao.org<br>cnpm -v<br></code></pre></td></tr></table></figure><p>4.安装git，配置用户信息  </p><pre><code class="hljs"><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;John Doe&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> johndoe@example.com<br></code></pre></td></tr></table></figure></code></pre><h2 id="二-安装hexo框架"><a href="#二-安装hexo框架" class="headerlink" title="二. 安装hexo框架"></a>二. 安装hexo框架</h2><hr><p>1.安装hexo，查看是否安装成功  </p><pre><code class="hljs"><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">cnpm install -g hexo-<span class="hljs-keyword">cli</span><br>hexo -v<br></code></pre></td></tr></table></figure></code></pre><p>2.新建blog文件夹  </p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span><br><span class="hljs-built_in">mkdir</span> Blog<br></code></pre></td></tr></table></figure><p>3.进入工程目录  </p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> Blog/<br><span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure><p>4.初始化项目  </p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo hexo init<br><span class="hljs-built_in">ls</span> -l<br></code></pre></td></tr></table></figure><p>5.启动blog  </p>   <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p>6.访问blog，查看效果  </p>   <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">hexo s<br>########################<br>INFO  Start processing<br>INFO  Hexo is running at http:<span class="hljs-comment">//localhost:4000 . Press Ctrl+C to stop.</span><br>########################<br></code></pre></td></tr></table></figure><p>7.新建一篇博客,修改内容  </p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo n <span class="hljs-string">&#x27;我的第一篇博客文章&#x27;</span><br><span class="hljs-built_in">pwd</span><br><span class="hljs-built_in">cd</span> <span class="hljs-built_in">source</span>/_posts<br><span class="hljs-built_in">ls</span><br>vim 我的第一篇博客文章.md<br><span class="hljs-built_in">cd</span> ../..<br><span class="hljs-built_in">pwd</span><br>hexo s<br></code></pre></td></tr></table></figure><h2 id="三-配置hexo文件，发布到个人github"><a href="#三-配置hexo文件，发布到个人github" class="headerlink" title="三. 配置hexo文件，发布到个人github"></a>三. 配置hexo文件，发布到个人github</h2><hr><p>1.安装插件  </p>   <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">cnpm install <span class="hljs-params">--save</span> hexo-deployer-git<br><span class="hljs-keyword">ls</span><br></code></pre></td></tr></table></figure><p>2.编辑配置文件,部署到远端  </p>   <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean">vim _config.yml<br>###############<br> type: git<br> repo: # git 仓库地址<br>  branch: master<br>###############<br></code></pre></td></tr></table></figure>   <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>3.修改主题演示<br>   主题地址： <a href="https://github.com/litten/hexo-theme-yilia.git">https://github.com/litten/hexo-theme-yilia.git</a></p><p>   下载安装配置主题  </p>   <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean">git clone https:<span class="hljs-comment">//github.com/litten/hexo-theme-yilia.git themes/yilia</span><br>ls<br>vim _config.yml <br>#################<br>theme: yilia<br>#################<br></code></pre></td></tr></table></figure><p>4.重新配置后推到远端  </p>   <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo s</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>5.域名解析</p><ul><li>在<strong>博客</strong>的<code>source</code>文件夹下建立一个<code>CNAME</code>的文件</li><li>内容写入你的域名信息。</li><li>发布到<code>github</code>即可，到注册的域名商把购买的域名使用CNAME解析到github。</li></ul><hr><p>参考资料</p><p><a href="https://www.bilibili.com/video/BV1Yb411a7ty">https://www.bilibili.com/video/BV1Yb411a7ty</a></p>]]></content>
    
    
    <categories>
      
      <category>建设博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2019/05/12/hello-world/"/>
    <url>/2019/05/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>欢迎打开自己的blog，终于有自己的blog了</p>]]></content>
    
    
    <categories>
      
      <category>记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitLab CI/CD 介绍和使用</title>
    <link href="/2018/11/22/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/devops/GitLab%20CI%20%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <url>/2018/11/22/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/devops/GitLab%20CI%20%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="一、持续集成介绍"><a href="#一、持续集成介绍" class="headerlink" title="一、持续集成介绍"></a>一、持续集成介绍</h2><blockquote><p>持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试)来验证，从而尽快地发现集成错误。许多团队发现这个过程可以大大减少集成的问题，让团队能够更快的开发内聚的软件。—— Martin Fowler</p></blockquote><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h3><ul><li><strong>持续集成</strong>(<code>Continuous Integration</code>)：<strong>频繁地(一天多次)将代码集成到主干。</strong>让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。“持续集成并不能消除 Bug，而是让它们非常容易发现和改正。”</li><li><strong>持续交付</strong>(<code>Continuous Delivery</code>)：<strong>频繁地将软件的新版本，交付给质量团队或者用户，以供评审。</strong>如果评审通过，代码就进入生产阶段。持续交付可以看作持续集成的下一步。它强调的是，不管怎么更新，软件是随时随地可以交付的。</li><li><strong>持续部署</strong>(<code>continuous Deployment</code>)：<strong>代码通过评审以后，自动部署到生产环境。</strong>是持续部署是持续交付的下一步，持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。</li></ul><h3 id="2-持续集成的好处"><a href="#2-持续集成的好处" class="headerlink" title="2 持续集成的好处"></a>2 持续集成的好处</h3><ul><li><strong>自动化构建且状态对每个人可见</strong>。可以使用<code>Maven</code>、<code>Gradle</code>等来实现自动化构建，可以在构建过程中实现自动化测试（前提是有写单元测试用例）。集成服务器在持续集成过程中发现问题可以及时发送警告给相关的干系人。</li><li><strong>解放了重复性劳动。</strong>自动化部署工作可以解放集成、测试、部署等重复性劳动，而机器集成的频率明显比手工高很多。</li><li><strong>更快地发现和修复问题。</strong>持续集成更早的获取变更，更早的进入测试，更早的发现问题，解决问题的成本显著下降。</li><li><strong>更快的交付成果。</strong>更早发现错误减少解决错误所需的工作量。集成服务器在构建环节发现错误可以及时通知开发人员修复。集成服务器在部署环节发现错误可以回退到上一版本，服务器始终有一个可用的版本。</li><li><strong>减少手工的错误。</strong>在重复性动作上，人容易犯错，而机器犯错的几率几乎为零。</li><li><strong>减少了等待时间。</strong>缩短了从开发、集成、测试、部署各个环节的时间，从而也就缩短了中间可以出现的等待时机。持续集成，意味着开发、集成、测试、部署也得以持续。</li><li><strong>更高的产品质量。</strong>集成服务器往往提供代码质量检测等功能，对不规范或有错误的地方会进行标致，也可以设置邮件和短信等进行警告。</li></ul><h3 id="3-常用持续集成工具"><a href="#3-常用持续集成工具" class="headerlink" title="3 常用持续集成工具"></a>3 常用持续集成工具</h3><ul><li><a href="https://jenkins.io/">Jenkins</a></li><li><a href="https://docs.gitlab.com/ee/ci/README.html">GitLab CI</a></li><li><a href="https://www.jetbrains.com/teamcity/">TeamCity</a></li><li><a href="https://www.travis-ci.org/">Travis CI</a></li><li><a href="https://www.atlassian.com/software/bamboo">Bamboo</a></li><li><a href="https://circleci.com/">CircleCI</a></li><li>…</li></ul><h2 id="二、Gitlab-持续集成"><a href="#二、Gitlab-持续集成" class="headerlink" title="二、Gitlab 持续集成"></a>二、Gitlab 持续集成</h2><p><img src="https://statics.sh1a.qingstor.com/2018/11/22/pipelines.png" alt="GitLab CI/CD"></p><h3 id="1-概念介绍"><a href="#1-概念介绍" class="headerlink" title="1 概念介绍"></a>1 概念介绍</h3><h4 id="1-GitLab"><a href="#1-GitLab" class="headerlink" title="(1) GitLab"></a>(1) GitLab</h4><p><a href="https://about.gitlab.com/">GitLab</a> 是一个利用<code>Ruby on Rails</code>开发的开源应用程序，实现一个自托管的 Git 项目仓库，可通过 Web 界面进行访问公开的或者私人项目。它拥有与<a href="https://github.com/">GitHub</a>类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。</p><h4 id="2-GitLab-CI-x2F-CD"><a href="#2-GitLab-CI-x2F-CD" class="headerlink" title="(2) GitLab CI&#x2F;CD"></a>(2) GitLab CI&#x2F;CD</h4><p><a href="https://docs.gitlab.com/ee/ci/README.html">GitLab CI&#x2F;CD</a> 是<code>GitLab Continuous Integration</code>（Gitlab持续集成）的简称。GitLab 自<code>GitLab 8.0</code>开始提供了持续集成的功能，且对所有项目默认开启。只要在项目仓库的根目录添加<code>.gitlab-ci.yml</code>文件，并且配置了Runner（运行器），那么每一次<code>push</code>或者合并请求（<code>Merge Request</code>）都会触发<a href="https://docs.gitlab.com/ce/ci/pipelines.html">CI Pipeline</a>。</p><h4 id="3-GitLab-Runner"><a href="#3-GitLab-Runner" class="headerlink" title="(3) GitLab Runner"></a>(3) GitLab Runner</h4><p><a href="https://docs.gitlab.com/runner/">GitLab Runner</a> <code>GitLab Runner</code>是一个开源项目，可以运行在 GNU &#x2F; Linux，macOS 和 Windows 操作系统上。每次<code>push</code>的时候 GitLab CI 会根据<code>.gitlab-ci.yml</code>配置文件运行你流水线（<code>Pipeline</code>）中各个阶段的任务（<code>Job</code>），并将结果发送回 GitLab。GitLab Runner 是基于 Gitlab CI 的 API 进行构建的相互隔离的机器（或虚拟机）。GitLab Runner 不需要和 Gitlab 安装在同一台机器上，且考虑到 GitLab Runner 的资源消耗问题和安全问题，也不建议这两者安装在同一台机器上。</p><p>Gitlab Runner 分为三种：</p><ul><li>共享Runner(<code>Shared runners</code>)</li><li>专享Runner(<code>Specific runners</code>)</li><li>分组Runner(<code>Group Runners</code>)</li></ul><h4 id="4-Pipelines"><a href="#4-Pipelines" class="headerlink" title="(4) Pipelines"></a>(4) Pipelines</h4><p><a href="https://docs.gitlab.com/ce/ci/pipelines.html">Pipelines</a> 中文称为流水线，是分阶段执行的构建任务。如：安装依赖、运行测试、打包、部署开发服务器、部署生产服务器等流程。每一次<code>push</code>或者<code>Merge Request</code>都会触发生成一条新的Pipeline。</p><p>下面是流水线示例图：</p><p><img src="https://docs.gitlab.com/ce/ci/img/pipelines_index.png" alt="Pipeline Status"></p><h4 id="5-Stages"><a href="#5-Stages" class="headerlink" title="(5) Stages"></a>(5) Stages</h4><p><a href="https://docs.gitlab.com/ce/ci/yaml/README.html#stages">Stages</a> 表示构建阶段，可以理解为上面所说“安装依赖”、“运行测试”等环节的流程。我们可以在一次 Pipeline 中定义多个 Stages，这些 Stages 会有以下特点：</p><ul><li>所有 Stages 会按照顺序运行，即当一个 Stage 完成后，下一个 Stage 才会开始（当然可以在<code>.gitlab-ci.yml</code>文件中配置上一阶段失败时下一阶段也执行）</li><li>只有当所有 Stages 完成后，该构建任务 (Pipeline) 才会成功</li><li>如果任何一个 Stage 失败，那么后面的 Stages 不会执行，该构建任务 (Pipeline) 失败</li></ul><p>下面是一个流水线内的阶段任务示例图：</p><p><img src="https://docs.gitlab.com/ce/ci/img/pipelines.png" alt="Job Status"></p><h4 id="6-Jobs"><a href="#6-Jobs" class="headerlink" title="(6) Jobs"></a>(6) Jobs</h4><p><a href="https://docs.gitlab.com/ce/ci/pipelines.html#jobs">Jobs</a> 表示构建的作业（或称之为任务），表示某个 Stage 里面执行的具体任务。我们可以在 Stages 里面定义多个 Jobs，这些 Jobs 会有以下特点：</p><ul><li>相同 Stage 中的 Jobs 无执行顺序要求，会并行执行</li><li>相同 Stage 中的 Jobs 都执行成功时，该 Stage 才会成功</li><li>如果任何一个 Job 失败，那么该 Stage 失败，即该构建任务 (Pipeline) 也失败（可以在<code>.gitlab-ci.yml</code>文件中配置允许某 Job 可以失败，也算该 Stage 成功）</li></ul><h4 id="7-gitlab-ci-yml"><a href="#7-gitlab-ci-yml" class="headerlink" title="(7) .gitlab-ci.yml"></a>(7) .gitlab-ci.yml</h4><p>GitLab 中默认开启了 Gitlab CI&#x2F;CD 的支持，且使用<a href="http://yaml.org/">YAML</a>文件<a href="https://docs.gitlab.com/ee/ci/yaml/README.html#examples">.gitlab-ci.yml</a>来管理项目构建配置。该文件需要存放于项目仓库的根目录（默认路径，可在 GitLab 中修改），它定义该项目的 CI&#x2F;CD 如何配置。所以，我们只需要在<code>.gitlab-ci.yml</code>配置文件中定义流水线的各个阶段，以及各个阶段中的若干作业（任务）即可。</p><p>下面是<code>.gitlab-ci.yml</code>文件的一个简单的<code>Hello World</code>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 定义 test 和 package 两个 Stages</span><br><span class="hljs-attr">stages:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">test</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">package</span><br><br><span class="hljs-comment"># 定义 package 阶段的一个 job</span><br><span class="hljs-attr">package-job:</span><br>  <span class="hljs-attr">stage:</span> <span class="hljs-string">package</span><br>  <span class="hljs-attr">script:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;Hello, package-job&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;I am in package stage&quot;</span><br><br><span class="hljs-comment"># 定义 test 阶段的一个 job</span><br><span class="hljs-attr">test-job:</span><br>  <span class="hljs-attr">stage:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">script:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;Hello, test-job&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;I am in test stage&quot;</span><br></code></pre></td></tr></table></figure><p>以上配置中，用 stages 关键字来定义 Pipeline 中的各个构建阶段，然后用一些非关键字来定义 jobs。每个 job 中可以可以再用 stage 关键字来指定该 job 对应哪个 stage。job 里面的<code>script</code>关键字是每个 job 中必须要包含的，它表示每个 job 要执行的命令。</p><blockquote><p><strong>注</strong>：猜猜上面例子的运行结果？</p></blockquote><h4 id="8-Badges"><a href="#8-Badges" class="headerlink" title="(8) Badges"></a>(8) Badges</h4><p><a href="https://docs.gitlab.com/ce/ci/pipelines.html#badges">Badges</a> 即：<strong>徽章</strong>，当 Pipelines 执行过程中或者执行完成时会生成徽章，你可以将这些徽章加入到你的<code>README.md</code>文件中，便于从仓库主页看到最新的构建状态。</p><p>徽章的链接形如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://example.gitlab.com/namespace/project/badges/branch/build.svg <br></code></pre></td></tr></table></figure><p>我们用 GitLab 项目的徽章作为例子，效果如下：</p><p><img src="https://gitlab.com/gitlab-org/gitlab-ce/badges/master/build.svg" alt="Gitlab build badges"> <img src="https://gitlab.com/gitlab-org/gitlab-ce/badges/master/coverage.svg?job=coverage" alt="Gitlab coverage badges"></p><h3 id="2-安装-GitLab-Runner"><a href="#2-安装-GitLab-Runner" class="headerlink" title="2 安装 GitLab Runner"></a>2 安装 GitLab Runner</h3><p><a href="https://docs.gitlab.com/runner/install/index.html">这里</a>有 GitLab Runner安装相关的资源和文档可供大家参考。以下仅以咱们公司常用的<code>Centos</code>为例来做安装说明。</p><h4 id="1-在线安装"><a href="#1-在线安装" class="headerlink" title="(1) 在线安装"></a>(1) 在线安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加官方的repo.</span><br>curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | sudo bash<br><br><span class="hljs-comment"># yum 安装Gtilab Runner.</span><br>sudo yum install gitlab-runner<br></code></pre></td></tr></table></figure><h4 id="2-离线安装"><a href="#2-离线安装" class="headerlink" title="(2) 离线安装"></a>(2) 离线安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装Git</span><br>sudo yum –y install git<br><br><span class="hljs-comment"># rpm离线安装事先下载好的 Gitlab Runner rpm包.</span><br>rpm -ivh gitlab-runner-10.5.0-1.x86_64.rpm<br></code></pre></td></tr></table></figure><blockquote><p><strong>注</strong>：Gitlab Runner 依赖了<code>Git</code>，所以，离线安装 Gitlab Runner 之前得首先安装Git，离线安装包可以从<a href="https://packages.gitlab.com/runner/gitlab-runner">这里</a>下载。</p></blockquote><h3 id="3-注册-Gitlab-Runner"><a href="#3-注册-Gitlab-Runner" class="headerlink" title="3 注册 Gitlab Runner"></a>3 注册 Gitlab Runner</h3><p>安装了 GitLab Runner 之后,就可以为 GitLab 中的仓库<a href="https://docs.gitlab.com/runner/register/index.html">注册一个 Runner</a>，注册的交互式命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo gitlab-runner register<br></code></pre></td></tr></table></figure><p>命令的交互式的过程如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 输入注册命令</span><br>sudo gitlab-runner register<br><br><span class="hljs-comment"># 输入公司的 GitLab 网站地址</span><br>Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )<br>http://gitlab.xxxx.com/<br><br><span class="hljs-comment"># 你项目仓库的token，token可以在 Settings -&gt; CI/CD -&gt; Runners settings 中找到.</span><br>Please enter the gitlab-ci token <span class="hljs-keyword">for</span> this runner<br>xxx<br><br><span class="hljs-comment"># 输入描述这个 runner 的名称</span><br>Please enter the gitlab-ci description <span class="hljs-keyword">for</span> this runner<br>[hostame] my-runner<br><br><span class="hljs-comment"># 输入 runner 的标签</span><br>Please enter the gitlab-ci tags <span class="hljs-keyword">for</span> this runner (comma separated):<br>my-tag,another-tag<br><br><span class="hljs-comment"># 输入 runner 的执行器.</span><br>Please enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell:<br>shell<br></code></pre></td></tr></table></figure><p>以上流程注册成功之后，就可以在你的项目仓库中 <code>Settings</code> -&gt; <code>CI/CD</code> -&gt; <code>Runners settings</code> 看到这个 Runner 了。</p><h3 id="4-Gitlab-Runner-常用命令汇总"><a href="#4-Gitlab-Runner-常用命令汇总" class="headerlink" title="4 Gitlab Runner 常用命令汇总"></a>4 Gitlab Runner 常用命令汇总</h3><p>下面的表格中列出了一些常用的<a href="https://docs.gitlab.com/runner/commands/README.html#gitlab-runner-list">Gitlab Runner命令</a>，以供参考：</p><table><thead><tr><th>命令</th><th align="left">描述</th></tr></thead><tbody><tr><td>gitlab-runner run</td><td align="left">运行一个runner服务</td></tr><tr><td>gitlab-runner register</td><td align="left">注册一个新的runner</td></tr><tr><td>gitlab-runner start</td><td align="left">启动服务</td></tr><tr><td>gitlab-runner stop</td><td align="left">关闭服务</td></tr><tr><td>gitlab-runner restart</td><td align="left">重启服务</td></tr><tr><td>gitlab-runner status</td><td align="left">查看各个runner的状态</td></tr><tr><td>gitlab-runner unregister</td><td align="left">注销掉某个runner</td></tr><tr><td>gitlab-runner list</td><td align="left">显示所有运行着的runner</td></tr><tr><td>gitlab-runner verify</td><td align="left">检查已注册的运行程序是否可以连接到GitLab，但它不验证GitLab Runner服务是否正在使用运行程序。</td></tr></tbody></table><h2 id="三、一个Web项目-CI-x2F-CD-简单示例"><a href="#三、一个Web项目-CI-x2F-CD-简单示例" class="headerlink" title="三、一个Web项目 CI&#x2F;CD 简单示例"></a>三、一个Web项目 CI&#x2F;CD 简单示例</h2><p>接下来，用一个实际项目来演示 GitLab CI&#x2F;CD 的配置和使用，其中主要包括：编译测试、项目打包、部署服务、Sonar手动检查、Sonar定时检查五个阶段。</p><p>下面用一个传统的 Java web 项目(这里称之为<code>cidemo</code>)和<code>Tomcat</code>来作为示例，并用来展示常用配置的使用。当我每次<code>push</code>代码或者<code>Merge Request</code>时，都会生成一条流水线，且会自动执行我们上面所说的一些阶段，而Sonar手动检查我们设置为手动操作，且再额外配置Sonar定时检查的任务。</p><blockquote><p><strong>注</strong>：我 Gitlab Runner 是安装在<code>Centos</code>环境中，并使用的<code>shell</code>执行器。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 定义stages</span><br><span class="hljs-attr">stages:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">test</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">install</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">run</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">sonar</span><br><br><span class="hljs-comment"># 定义安装包的存放位置和Tomcat服务器的地址的变量，便于后续部署使用.</span><br><span class="hljs-attr">variables:</span><br>  <span class="hljs-attr">CIDEMO_PACKAGE_DIR:</span> <span class="hljs-string">&#x27;/home/gitlab-runner/packages/cidemo/&#x27;</span><br>  <span class="hljs-attr">SERVER_HOME_DIR:</span> <span class="hljs-string">&#x27;/home/gitlab-runner/tomcat/cidemo-tomcat/&#x27;</span><br><br><span class="hljs-comment">###################### 构建编译和单元测试的job. #######################</span><br><br><span class="hljs-string">编译测试任务:</span><br>  <span class="hljs-attr">stage:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">only:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">branches</span><br>  <span class="hljs-attr">script:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mvn</span> <span class="hljs-string">clean</span> <span class="hljs-string">test</span><br><br><span class="hljs-comment">###################### Maven安装得到war包的job. #######################</span><br><br><span class="hljs-string">打包任务:</span><br>  <span class="hljs-attr">stage:</span> <span class="hljs-string">install</span><br>  <span class="hljs-attr">only:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">develop</span><br>  <span class="hljs-attr">script:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mvn</span> <span class="hljs-string">install</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&#x27;准备将最新的war包复制、保存到某个目录里面供后续使用.&#x27;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">rm</span> <span class="hljs-string">-rf</span> <span class="hljs-string">$CIDEMO_PACKAGE_DIR/*.war</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cp</span> <span class="hljs-string">target/*.war</span> <span class="hljs-string">$CIDEMO_PACKAGE_DIR/cidemo.war</span><br><br><span class="hljs-comment">####################### 部署运行war包的job. #######################</span><br><br><span class="hljs-string">部署运行任务:</span><br>  <span class="hljs-attr">stage:</span> <span class="hljs-string">run</span><br>  <span class="hljs-attr">only:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">develop</span><br>  <span class="hljs-attr">script:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&#x27;准备部署和运行war包！(为了方便部署到了Tomcat中运行)&#x27;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cd</span> <span class="hljs-string">$SERVER_HOME_DIR</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">sh</span> <span class="hljs-string">bin/shutdown.sh</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">rm</span> <span class="hljs-string">-rf</span> <span class="hljs-string">webapps/cidemo.war</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cp</span> <span class="hljs-string">$CIDEMO_PACKAGE_DIR/cidemo.war</span> <span class="hljs-string">$SERVER_HOME_DIR/webapps/cidemo.war</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nohup</span> <span class="hljs-string">sh</span> <span class="hljs-string">./bin/startup.sh</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">logs/cidemo_nohup.log</span> <span class="hljs-number">2</span><span class="hljs-string">&gt;&amp;1</span> <span class="hljs-string">&amp;</span><br><br><span class="hljs-comment">###################### Sonar手动构建的job. #######################</span><br><br><span class="hljs-string">Sonar手动检查:</span><br>  <span class="hljs-attr">stage:</span> <span class="hljs-string">sonar</span><br>  <span class="hljs-attr">when:</span> <span class="hljs-string">manual</span><br>  <span class="hljs-attr">only:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">develop</span><br>  <span class="hljs-attr">script:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&#x27;准备对项目代码做sonar的质量检查！&#x27;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mvn</span> <span class="hljs-string">compile</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">mvn</span> <span class="hljs-string">sonar:sonar</span> <span class="hljs-string">-Dsonar.host.url=http://172.16.34.102:9000</span> <span class="hljs-string">-Dsonar.login=497a0e0e2fc07f64c4b54edc17bb47dfa251ba34</span><br><br><span class="hljs-comment">###################### Sonar每晚定时构建的job. #######################</span><br><br><span class="hljs-string">Sonar定时检查:</span><br>  <span class="hljs-attr">stage:</span> <span class="hljs-string">sonar</span><br>  <span class="hljs-attr">only:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">schedules</span><br>  <span class="hljs-attr">script:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&#x27;开始定时对项目代码做sonar的质量检查！&#x27;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mvn</span> <span class="hljs-string">compile</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">mvn</span> <span class="hljs-string">sonar:sonar</span> <span class="hljs-string">-Dsonar.host.url=http://172.16.34.102:9000</span> <span class="hljs-string">-Dsonar.login=497a0e0e2fc07f64c4b54edc17bb47dfa251ba34</span><br></code></pre></td></tr></table></figure><h2 id="四、Gitlab-CI-x2F-CD-yaml-常用配置介绍"><a href="#四、Gitlab-CI-x2F-CD-yaml-常用配置介绍" class="headerlink" title="四、Gitlab CI&#x2F;CD yaml 常用配置介绍"></a>四、Gitlab CI&#x2F;CD yaml 常用配置介绍</h2><p>开始构建之前<code>.gitlab-ci.yml</code>文件定义了一系列带有约束说明的任务。这些任务都是以任务名开始并且至少要包含script部分，<code>.gitlab-ci.yml</code>允许指定无限量 jobs。每个 jobs 必须有一个唯一的名字，且名字不能是下面列出的保留字段：</p><ul><li><code>image</code></li><li><code>services</code></li><li><code>stages</code></li><li><code>types</code></li><li><code>before_script</code></li><li><code>after_script</code></li><li><code>variables</code></li><li><code>cache</code></li></ul><p>job由一列参数来定义 jobs 的行为：</p><table><thead><tr><th>Keyword</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td>script</td><td>yes</td><td>Runner执行的命令或脚本</td></tr><tr><td>extends</td><td>no</td><td>定义此作业将继承的配置条目</td></tr><tr><td>image</td><td>no</td><td>所使用的docker镜像，查阅<a href="https://docs.gitlab.com/ce/ci/docker/using_docker_images.html#define-image-and-services-from-gitlab-ciyml">使用docker镜像</a></td></tr><tr><td>services</td><td>no</td><td>所使用的docker服务，查阅<a href="https://docs.gitlab.com/ce/ci/docker/using_docker_images.html#define-image-and-services-from-gitlab-ciyml">使用docker镜像</a></td></tr><tr><td>stage</td><td>no</td><td>定义job stage（默认：<code>test</code>）</td></tr><tr><td>type</td><td>no</td><td><code>stage</code>的别名（已弃用）</td></tr><tr><td>variables</td><td>no</td><td>定义job级别的变量</td></tr><tr><td>only</td><td>no</td><td>定义一列git分支，并为其创建job</td></tr><tr><td>except</td><td>no</td><td>定义一列git分支，不创建job</td></tr><tr><td>tags</td><td>no</td><td>定义一列tags，用来指定选择哪个Runner（同时Runner也要设置tags）</td></tr><tr><td>allow_failure</td><td>no</td><td>允许job失败。失败的job不影响commit状态</td></tr><tr><td>when</td><td>no</td><td>定义何时开始job。可以是<code>on_success</code>，<code>on_failure</code>，<code>always</code>或者<code>manual</code></td></tr><tr><td>dependencies</td><td>no</td><td>定义job依赖关系，这样他们就可以互相传递artifacts</td></tr><tr><td>cache</td><td>no</td><td>定义应在后续运行之间缓存的文件列表</td></tr><tr><td>before_script</td><td>no</td><td>重写一组在作业前执行的命令</td></tr><tr><td>after_script</td><td>no</td><td>重写一组在作业后执行的命令</td></tr><tr><td>environment</td><td>no</td><td>定义此作业完成部署的环境名称</td></tr><tr><td>coverage</td><td>no</td><td>定义给定作业的代码覆盖率设置</td></tr><tr><td>etry</td><td>no</td><td>定义在发生故障时可以自动重试作业的时间和次数</td></tr><tr><td>parallel</td><td>no</td><td>定义应并行运行的作业实例数</td></tr></tbody></table><h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><blockquote><p>是在 GitLab 11.3 中引入的。</p></blockquote><p><code>extends</code>定义了一个使用<code>extends</code>的作业将继承的条目名称。它是使用<a href="https://docs.gitlab.com/ee/ci/yaml/README.html#anchors">YAML锚点</a>的替代方案，并且更加灵活和可读：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">.tests:</span><br>  <span class="hljs-attr">script:</span> <span class="hljs-string">rake</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">stage:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">only:</span><br>    <span class="hljs-attr">refs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">branches</span><br><br><span class="hljs-attr">rspec:</span><br>  <span class="hljs-attr">extends:</span> <span class="hljs-string">.tests</span><br>  <span class="hljs-attr">script:</span> <span class="hljs-string">rake</span> <span class="hljs-string">rspec</span><br>  <span class="hljs-attr">only:</span><br>    <span class="hljs-attr">variables:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">$RSPEC</span><br></code></pre></td></tr></table></figure><p>在上面的示例中，<code>rspec</code>作业继承自<code>.tests</code>模板作业。 GitLab 将根据键执行反向深度合并。 GitLab将：</p><ul><li>将<code>rspec</code>内容以递归方式合并到<code>.tests</code>中。</li><li>不合并键的值。</li></ul><p>这实际生成的是以下<code>rspec</code>作业：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">rspec:</span><br>  <span class="hljs-attr">script:</span> <span class="hljs-string">rake</span> <span class="hljs-string">rspec</span><br>  <span class="hljs-attr">stage:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">only:</span><br>    <span class="hljs-attr">refs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">branches</span><br>    <span class="hljs-attr">variables:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">$RSPEC</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>注</strong>: <code>rake test</code>已被<code>rake rspec</code>脚本覆盖。</p></blockquote><h3 id="image-和-services"><a href="#image-和-services" class="headerlink" title="image 和 services"></a>image 和 services</h3><p>这两个关键字允许使用一个自定义的 Docker 镜像和一系列的服务，并且可以用于整个 job 周期。详细配置文档请查看<a href="https://docs.gitlab.com/ee/ci/docker/README.html">a separate document</a>。</p><h3 id="before-script-和-after-script"><a href="#before-script-和-after-script" class="headerlink" title="before_script 和 after_script"></a>before_script 和 after_script</h3><p><code>before_script</code>用来定义所有 job 之前运行的命令，<code>after_script</code>用来定义所有 job 之后运行的命令。它们可以是一个数组或者是多行字符串。</p><h3 id="stages"><a href="#stages" class="headerlink" title="stages"></a>stages</h3><p>stages 用来定义可以被 job 调用的 stages。stages 的规范允许有灵活的多级 pipelines。</p><p>stages中的元素顺序决定了对应job的执行顺序：</p><ol><li>相同 stage 的 job 可以平行执行。</li><li>下一个 stage 的 job 会在前一个 stage 的 job 成功后开始执行。</li></ol><p>接下仔细看看这个例子，它包含了3个 stage：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">stages:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">build</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">test</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">deploy</span><br></code></pre></td></tr></table></figure><ol><li>首先，所有 build 的 jobs 都是并行执行的。</li><li>所有 build 的 jobs 执行成功后，test 的 jobs 才会开始并行执行。</li><li>所有 test 的 jobs 执行成功，deploy 的 jobs 才会开始并行执行。</li><li>所有的 deploy 的 jobs 执行成功，<code>commit</code>才会标记为<code>success</code>。</li><li>任何一个前置的 jobs 失败了，<code>commit</code>会标记为<code>failed</code>并且下一个 stages 的 jobs 都不会执行。</li></ol><p>这有两个特殊的例子值得一提：</p><ol><li>如果<code>.gitlab-ci.yml</code>中没有定义stages，那么 job’s stages 会默认定义为<code>build</code>，<code>test</code>和<code>deploy</code>。</li><li>如果一个 job 没有指定 stage，那么这个任务会分配到 test stage。</li></ol><h3 id="only-和-except"><a href="#only-和-except" class="headerlink" title="only 和 except"></a>only 和 except</h3><p><code>only</code>和<code>except</code>是两个参数用分支策略来限制 jobs 构建：</p><ul><li><code>only</code>定义哪些分支和标签的git项目将会被job执行。</li><li><code>except</code>定义哪些分支和标签的git项目将不会被job执行。</li></ul><p>下面是refs策略的使用规则：</p><ul><li>only 和 except 可同时使用。如果<code>only</code>和<code>except</code>在一个 job 配置中同时存在，则以 only 为准，跳过 except(从下面示例中得出)。</li><li>only 和 except 可以使用正则表达式。</li><li>only 和 except 允许使用特殊的关键字：<code>branches</code>，<code>tags</code>和<code>triggers</code>。</li><li>only 和 except 允许使用指定仓库地址但不是forks的仓库(查看示例3)。</li></ul><p>在下面这个例子中，job 将只会运行以<code>issue-</code>开始的refs(分支)，然而<code>except</code>中设置将被跳过。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">job:</span><br>  <span class="hljs-comment"># use regexp</span><br>  <span class="hljs-attr">only:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/^issue-.*$/</span><br>  <span class="hljs-comment"># use special keyword</span><br>  <span class="hljs-attr">except:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">branches</span><br></code></pre></td></tr></table></figure><p>在下面这个例子中，job 将只会执行有<code>tags</code>的refs，或者通过<code>API</code>触发器明确地请求构建。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">job:</span><br>  <span class="hljs-comment"># use special keywords</span><br>  <span class="hljs-attr">only:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">tags</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">triggers</span><br></code></pre></td></tr></table></figure><p>下面这个例子将会为所有的分支执行job，但 master 分支除外。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">job:</span><br>  <span class="hljs-attr">only:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">branches@gitlab-org/gitlab-ce</span><br>  <span class="hljs-attr">except:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">master@gitlab-org/gitlab-ce</span><br></code></pre></td></tr></table></figure><h3 id="variables"><a href="#variables" class="headerlink" title="variables"></a>variables</h3><p>GItLab CI 允许在<code>.gitlab-ci.yml</code>文件中添加变量，并在 job 环境中起作用。因为这些配置是存储在 git 仓库中，所以<strong>最好是存储项目的非敏感配置</strong>，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">variables:</span><br>  <span class="hljs-string">DATABASE_URL:&quot;postgres://postgres@postgres/my_database&quot;</span><br></code></pre></td></tr></table></figure><p>这些变量可以被后续的命令和脚本使用。</p><p>除了用户自定义的变量外，Runner 也可以定义它自己的变量。<code>CI_COMMIT_REG_NAME</code>就是一个很好的例子，它的值表示用于构建项目的分支或tag名称。除了在<code>.gitlab-ci.yml</code>中设置变量外，还有可以通过 GitLab 的界面上设置私有变量。</p><p>这里有更多关于<a href="https://docs.gitlab.com/ce/ci/variables/README.html">variables</a>的介绍。</p><h3 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h3><h4 id="cache-paths"><a href="#cache-paths" class="headerlink" title="cache: paths"></a>cache: paths</h4><p>使用<code>paths</code>指令选择要缓存的文件或目录。也可以使用通配符。</p><p>如果 cache 定义在 jobs 的作用域之外，那么它就是全局缓存，所有 jobs 都可以使用该缓存。</p><p>缓存<code>binaries</code>和<code>.config</code>中的所有文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">rspec:</span><br>  <span class="hljs-attr">script:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">cache:</span><br>    <span class="hljs-attr">paths:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">binaries/</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">.config</span><br></code></pre></td></tr></table></figure><p>缓存<code>git</code>中没有被跟踪的文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">rspec:</span><br>  <span class="hljs-attr">script:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">cache:</span><br>    <span class="hljs-attr">untracked:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>缓存<code>binaries</code>下没有被<code>git</code>跟踪的文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">rspec:</span><br>  <span class="hljs-attr">script:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">cache:</span><br>    <span class="hljs-attr">untracked:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">paths:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">binaries/</span><br></code></pre></td></tr></table></figure><p>job 中优先级高于全局的。下面这个<code>rspec</code> job中将只会缓存<code>binaries/</code>下的文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cache:</span><br>  <span class="hljs-attr">paths:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">my/files</span><br><br><span class="hljs-attr">rspec:</span><br>  <span class="hljs-attr">script:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">cache:</span><br>    <span class="hljs-attr">key:</span> <span class="hljs-string">rspec</span><br>    <span class="hljs-attr">paths:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">binaries/</span><br></code></pre></td></tr></table></figure><p>注意，缓存是在 jobs 之前进行共享的。如果你不同的 jobs 缓存不同的文件路径，必须设置不同的<code>cache:key</code>，否则缓存内容将被重写。缓存只是尽力而为之，所以别期望缓存会一直存在。</p><h4 id="cache-key"><a href="#cache-key" class="headerlink" title="cache: key"></a>cache: key</h4><p><code>key</code>指令允许我们定义缓存的作用域(亲和性)，可以是所有 jobs 的单个缓存，也可以是每个 job，也可以是每个分支或者是任何你认为合适的地方。它也可以让你很好的调整缓存，允许你设置不同 jobs 的缓存，甚至是不同分支的缓存。</p><p><code>cache:key</code>可以使用任何的<a href="https://docs.gitlab.com/ce/ci/variables/README.html">预定义变量</a>。</p><p>默认key是默认设置的这个项目缓存，因此默认情况下，从GitLab 9.0开始，每个 pipelines 和 jobs 中可以共享一切。</p><p>配置示例</p><p>缓存每个job：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cache:</span><br>  <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;$CI_JOB_NAME&quot;</span><br>  <span class="hljs-attr">untracked:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>缓存每个分支：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cache:</span><br>  <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;$CI_COMMIT_REF_NAME&quot;</span><br>  <span class="hljs-attr">untracked:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>缓存每个 job 且每个分支：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cache:</span><br>  <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;$CI_JOB_NAME/$CI_COMMIT_REF_NAME&quot;</span><br>  <span class="hljs-attr">untracked:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>缓存每个分支且每个stage：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cache:</span><br>  <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;$CI_JOB_STAGE/$CI_COMMIT_REF_NAME&quot;</span><br>  <span class="hljs-attr">untracked:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>如果使用的Windows Batch(windows批处理)来跑脚本需要用%替代$：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cache:</span><br>  <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;%CI_JOB_STAGE%/%CI_COMMIT_REF_NAME%&quot;</span><br>  <span class="hljs-attr">untracked:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="allow-failure"><a href="#allow-failure" class="headerlink" title="allow_failure"></a>allow_failure</h3><p><code>allow_failure</code>可以用于当你想设置一个 job 失败的之后并不影响后续的CI组件的时候。失败的 jobs 不会影响到<code>commit</code>状态。</p><p>当开启了允许 job 失败，所有的 intents 和 purposes 里的 pipeline 都是成功&#x2F;绿色，但是也会有一个”<code>CI build passed with warnings</code>“信息显示在<code>Merge Request</code>或<code>commit</code>或<code>job page</code>。这被允许失败的作业使用，但是如果失败表示其他地方应采取其他（手动）步骤。</p><p>下面的这个例子中，job1和job2将会并列进行，如果job1失败了，它也不会影响进行中的下一个 stage，因为这里有设置了<code>allow_failure: true</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">job1:</span><br>  <span class="hljs-attr">stage:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">script:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">execute_script_that_will_fail</span><br>  <span class="hljs-attr">allow_failure:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-attr">job2:</span><br>  <span class="hljs-attr">stage:</span> <span class="hljs-string">test</span><br>  <span class="hljs-attr">script:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">execute_script_that_will_succeed</span><br><br><span class="hljs-attr">job3:</span><br>  <span class="hljs-attr">stage:</span> <span class="hljs-string">deploy</span><br>  <span class="hljs-attr">script:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">deploy_to_staging</span><br></code></pre></td></tr></table></figure><h3 id="when"><a href="#when" class="headerlink" title="when"></a>when</h3><p><code>when</code>用于实现在发生故障或尽管失败时运行的作业。when可以设置以下值：</p><ul><li><code>on_success</code> - 只有前面 stages 的所有工作成功时才执行。这是默认值。</li><li><code>on_failure</code> - 当前面 stages 中任意一个jobs失败后执行。</li><li><code>always</code> - 无论前面 stages 中 jobs 状态如何都执行。</li><li><code>manual</code> - 手动执行(GitLab8.10增加)。更多请查看手动操作。</li></ul><h3 id="artifacts"><a href="#artifacts" class="headerlink" title="artifacts"></a>artifacts</h3><p><code>artifacts</code>用于指定成功后应附加到 job 的文件和目录的列表。只能使用项目工作间内的文件或目录路径。在job成功完成后artifacts将会发送到GitLab中，同时也会在 GitLab UI 中提供下载。如果想要在不通的 job 之间传递<code>artifacts</code>，请查阅<a href="https://docs.gitlab.com/ce/ci/yaml/README.html#dependencies">依赖关系</a>。以下是一些例子：</p><p>发送<code>binaries</code>和<code>.config</code>中的所有文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">artifacts:</span><br>  <span class="hljs-attr">paths:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">binaries/</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">.config</span><br></code></pre></td></tr></table></figure><p>发送所有没有被Git跟踪的文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">artifacts:</span><br>  <span class="hljs-attr">untracked:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>发送没有被Git跟踪和<code>binaries</code>中的所有文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">artifacts:</span><br>  <span class="hljs-attr">untracked:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">paths:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">binaries/</span><br></code></pre></td></tr></table></figure><h2 id="五、其他相关内容"><a href="#五、其他相关内容" class="headerlink" title="五、其他相关内容"></a>五、其他相关内容</h2><h3 id="1-API触发器-Triggers"><a href="#1-API触发器-Triggers" class="headerlink" title="1 API触发器 Triggers"></a>1 API触发器 Triggers</h3><p>Triggers 可用于强制使用API调用重建特定分支，<code>tag</code>或<code>commits</code>。API的使用示例可以在<code>Settings</code> -&gt; <code>CI/CD</code> -&gt; <code>Pipeline triggers</code>中找到。</p><p>在<code>triggers</code>文档中<a href="https://docs.gitlab.com/ce/ci/triggers/README.html">查看更多</a>。</p><h3 id="2-配置定时任务"><a href="#2-配置定时任务" class="headerlink" title="2 配置定时任务"></a>2 配置定时任务</h3><p>GitLab CI 中可以在 GitLab <code>Settings</code> -&gt; <code>CI/CD</code> -&gt; <code>Schedules</code>中配置定时任务，点击<code>New Schedule</code>按钮，可以配置你流水线的定时执行任务，包括：描述信息、定时的Cron表达式、目标分支、变量等信息。</p><p>然后在需要定时执行的作业的<code>only</code>分支写上<code>schedules</code>即可。</p><h3 id="3-校验-gitlab-ci-yml"><a href="#3-校验-gitlab-ci-yml" class="headerlink" title="3 校验 .gitlab-ci.yml"></a>3 校验 .gitlab-ci.yml</h3><p>GitLab CI 的每个实例都有一个名为<code>Lint</code>的嵌入式调试工具。 你可以在 GitLab 实例的<code>-/ci/lint</code>下找到该链接。</p><h3 id="4-配置邮件发送"><a href="#4-配置邮件发送" class="headerlink" title="4 配置邮件发送"></a>4 配置邮件发送</h3><p>如果希望在每次构建完成后（或者在仅构建失败的情况下），想邮件发送给相关开发人员，则可以在 GitLab <code>Settings</code> -&gt; <code>Integrations</code> 中找到<code>Pipelines emails</code>，点击进去就可以配置邮件发送相关的内容了。</p><h3 id="5-GitLab-Pages"><a href="#5-GitLab-Pages" class="headerlink" title="5 GitLab Pages"></a>5 GitLab Pages</h3><p><a href="https://gitlab.com/pages/">GitLab Pages</a>是用于托管静态文件的服务。而<code>pages</code>是一个特殊的job，用于将静态的内容上传到GitLab，可用于为您的网站提供服务。它有特殊的语法，因此必须满足以下两个要求：</p><ul><li>任何静态内容必须放在<code>public/</code>目录下</li><li>artifacts必须定义在<code>public/</code>目录下</li></ul><p>下面的这个例子是将所有文件从项目根目录移动到<code>public/</code>目录。<code>.public</code>工作流是<code>cp</code>，并且它不会循环复制<code>public/</code>本身。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">pages:</span><br>  <span class="hljs-attr">stage:</span> <span class="hljs-string">deploy</span><br>  <span class="hljs-attr">script:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">mkdir</span> <span class="hljs-string">.public</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">cp</span> <span class="hljs-string">-r</span> <span class="hljs-string">*</span> <span class="hljs-string">.public</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">mv</span> <span class="hljs-string">.public</span> <span class="hljs-string">public</span><br>  <span class="hljs-attr">artifacts:</span><br>    <span class="hljs-attr">paths:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">public</span><br>  <span class="hljs-attr">only:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>更多内容请查看<a href="https://docs.gitlab.com/ce/user/project/pages/index.html">GitLab Pages用户文档</a>。</p><h3 id="6-跳过-jobs"><a href="#6-跳过-jobs" class="headerlink" title="6 跳过 jobs"></a>6 跳过 jobs</h3><p>如果你的<code>commit</code>信息中包含<code>[ci skip]</code>或者<code>[skip ci]</code>，不论大小写，那么这个<code>commit</code>将会创建但是 jobs 也会跳过。</p><hr><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://docs.gitlab.com/ce/ci/yaml/README.html">官方文档地址</a></li><li><a href="https://segmentfault.com/a/1190000010442764#articleHeader24">segmentfault yaml配置中文翻译</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>软件工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitLab CI</tag>
      
      <tag>DevOps</tag>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CPU多级缓存</title>
    <link href="/2018/11/18/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/CPU%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98/"/>
    <url>/2018/11/18/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/CPU%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h2 id="一、什么是CPU缓存"><a href="#一、什么是CPU缓存" class="headerlink" title="一、什么是CPU缓存"></a>一、什么是CPU缓存</h2><h3 id="1-CPU缓存的来历"><a href="#1-CPU缓存的来历" class="headerlink" title="1. CPU缓存的来历"></a>1. CPU缓存的来历</h3><p>众所周知,CPU是计算机的大脑，它负责执行程序的指令，而内存负责存数据, 包括程序自身的数据。在很多年前，CPU的频率与内存总线的频率在同一层面上。内存的访问速度仅比寄存器慢一些。但是，这一局面在上世纪90年代被打破了。CPU的频率大大提升，但内存总线的频率与内存芯片的性能却没有得到成比例的提升。并不是因为造不出更快的内存，只是因为太贵了。内存如果要达到目前CPU那样的速度，那么它的造价恐怕要贵上好几个数量级。所以，CPU的运算速度要比内存读写速度快很多，这样会使CPU花费很长的时间等待数据的到来或把数据写入到内存中。所以，<strong>为了解决CPU运算速度与内存读写速度不匹配的矛盾</strong>，就出现了CPU缓存。</p><h3 id="2-CPU缓存的概念"><a href="#2-CPU缓存的概念" class="headerlink" title="2. CPU缓存的概念"></a>2. CPU缓存的概念</h3><p><strong>CPU缓存是位于CPU与内存之间的临时数据交换器，它的容量比内存小的多但是交换速度却比内存要快得多。CPU缓存一般直接跟CPU芯片集成或位于主板总线互连的独立芯片上</strong>。</p><p>为了简化与内存之间的通信，高速缓存控制器是针对数据块，而不是字节进行操作的。高速缓存其实就是一组称之为<strong>缓存行</strong>(Cache Line)的固定大小的数据块组成的，典型的一行是<code>64</code>字节。</p><h3 id="3-CPU缓存的意义"><a href="#3-CPU缓存的意义" class="headerlink" title="3. CPU缓存的意义"></a>3. CPU缓存的意义</h3><p>CPU往往需要重复处理相同的数据、重复执行相同的指令，如果这部分数据、指令CPU能在CPU缓存中找到，CPU就不需要从内存或硬盘中再读取数据、指令，从而减少了整机的响应时间。所以，缓存的意义满足以下两种<strong>局部性原理</strong>：</p><ul><li><strong>时间局部性（Temporal Locality）</strong>：如果一个信息项正在被访问，那么在近期它很可能还会被再次访问。</li><li><strong>空间局部性（Spatial Locality）</strong>：如果一个存储器的位置被引用，那么将来他附近的位置也会被引用。</li></ul><h2 id="二、CPU的三级缓存"><a href="#二、CPU的三级缓存" class="headerlink" title="二、CPU的三级缓存"></a>二、CPU的三级缓存</h2><h3 id="1-CPU的三级缓存"><a href="#1-CPU的三级缓存" class="headerlink" title="1. CPU的三级缓存"></a>1. CPU的三级缓存</h3><p>随着多核CPU的发展，CPU缓存通常分成了三个级别：<code>L1</code>，<code>L2</code>，<code>L3</code>。级别越小越接近CPU，所以速度也更快，同时也代表着容量越小。L1 是最接近CPU的, 它容量最小（例如：<code>32K</code>），速度最快，每个核上都有一个 L1 缓存，L1 缓存每个核上其实有两个 L1 缓存, 一个用于存数据的 L1d Cache（Data Cache），一个用于存指令的 L1i Cache（Instruction Cache）。L2 缓存 更大一些（例如：<code>256K</code>），速度要慢一些, 一般情况下每个核上都有一个独立的L2 缓存; L3 缓存是三级缓存中最大的一级（例如3MB），同时也是最慢的一级, 在同一个CPU插槽之间的核共享一个 L3 缓存。</p><p>下面是三级缓存的处理速度参考表：</p><table><thead><tr><th>从CPU到</th><th>大约需要的CPU周期</th><th>大约需要的时间(单位ns)</th></tr></thead><tbody><tr><td>寄存器</td><td>1 cycle</td><td></td></tr><tr><td>L1 Cache</td><td>~3-4 cycles</td><td>~0.5-1 ns</td></tr><tr><td>L2 Cache</td><td>~10-20 cycles</td><td>~3-7 ns</td></tr><tr><td>L3 Cache</td><td>~40-45 cycles</td><td>~15 ns</td></tr><tr><td>跨槽传输</td><td></td><td>~20 ns</td></tr><tr><td>内存</td><td>~120-240 cycles</td><td>~60-120ns</td></tr></tbody></table><p>下图是Intel Core i5-4285U的CPU三级缓存示意图：</p><p><img src="https://statics.sh1a.qingstor.com/2018/11/18/javabf-cpu-1.png" alt="CPU三级缓存"></p><p>就像数据库缓存一样，获取数据时首先会在最快的缓存中找数据，如果缓存没有命中(Cache miss) 则往下一级找, 直到三级缓存都找不到时，那只有向内存要数据了。一次次地未命中，代表取数据消耗的时间越长。</p><h3 id="2-带有高速缓存CPU执行计算的流程"><a href="#2-带有高速缓存CPU执行计算的流程" class="headerlink" title="2. 带有高速缓存CPU执行计算的流程"></a>2. 带有高速缓存CPU执行计算的流程</h3><ol><li>程序以及数据被加载到主内存</li><li>指令和数据被加载到CPU的高速缓存</li><li>CPU执行指令，把结果写到高速缓存</li><li>高速缓存中的数据写回主内存</li></ol><p>目前流行的多级缓存结构如下图：</p><p><img src="https://statics.sh1a.qingstor.com/2018/11/18/javabf-cpu-2.png" alt="多级缓存结构"></p><h2 id="三、CPU缓存一致性协议-MESI"><a href="#三、CPU缓存一致性协议-MESI" class="headerlink" title="三、CPU缓存一致性协议(MESI)"></a>三、CPU缓存一致性协议(MESI)</h2><p><strong>MESI</strong>（<code>Modified Exclusive Shared Or Invalid</code>）(也称为<strong>伊利诺斯协议</strong>，是因为该协议由伊利诺斯州立大学提出的）是一种广泛使用的支持写回策略的缓存一致性协议。为了保证多个CPU缓存中共享数据的一致性，定义了缓存行(Cache Line)的四种状态，而CPU对缓存行的四种操作可能会产生不一致的状态，因此缓存控制器监听到本地操作和远程操作的时候，需要对地址一致的缓存行的状态进行一致性修改，从而保证数据在多个缓存之间保持一致性。</p><h3 id="1-MESI协议中的状态"><a href="#1-MESI协议中的状态" class="headerlink" title="1. MESI协议中的状态"></a>1. MESI协议中的状态</h3><p>CPU中每个缓存行（Caceh line)使用<code>4</code>种状态进行标记，使用<code>2bit</code>来表示:</p><table><thead><tr><th>状态</th><th>描述</th><th>监听任务</th><th>状态转换</th></tr></thead><tbody><tr><td>M 修改 (Modified)</td><td>该Cache line有效，数据被修改了，和内存中的数据不一致，数据只存在于本Cache中。</td><td>缓存行必须时刻监听所有试图读该缓存行相对就主存的操作，这种操作必须在缓存将该缓存行写回主存并将状态变成S（共享）状态之前被延迟执行。</td><td>当被写回主存之后，该缓存行的状态会变成独享（exclusive)状态。</td></tr><tr><td>E 独享、互斥 (Exclusive)</td><td>该Cache line有效，数据和内存中的数据一致，数据只存在于本Cache中。</td><td>缓存行也必须监听其它缓存读主存中该缓存行的操作，一旦有这种操作，该缓存行需要变成S（共享）状态。</td><td>当CPU修改该缓存行中内容时，该状态可以变成Modified状态</td></tr><tr><td>S 共享 (Shared)</td><td>该Cache line有效，数据和内存中的数据一致，数据存在于很多Cache中。</td><td>缓存行也必须监听其它缓存使该缓存行无效或者独享该缓存行的请求，并将该缓存行变成无效（Invalid）。</td><td>当有一个CPU修改该缓存行时，其它CPU中该缓存行可以被作废（变成无效状态 Invalid）。</td></tr><tr><td>I 无效 (Invalid)</td><td>该Cache line无效。</td><td>无</td><td>无</td></tr></tbody></table><blockquote><p><strong>注意</strong>：<br><strong>对于M和E状态而言总是精确的，他们在和该缓存行的真正状态是一致的，而S状态可能是非一致的</strong>。如果一个缓存将处于S状态的缓存行作废了，而另一个缓存实际上可能已经独享了该缓存行，但是该缓存却不会将该缓存行升迁为E状态，这是因为其它缓存不会广播他们作废掉该缓存行的通知，同样由于缓存并没有保存该缓存行的copy的数量，因此（即使有这种通知）也没有办法确定自己是否已经独享了该缓存行。</p></blockquote><p>从上面的意义看来E状态是一种投机性的优化：如果一个CPU想修改一个处于S状态的缓存行，总线事务需要将所有该缓存行的copy变成invalid状态，而修改E状态的缓存不需要使用总线事务。</p><p>MESI状态转换图：</p><p><img src="https://statics.sh1a.qingstor.com/2018/11/18/javabf-cpu-3.png" alt="MESI状态转换图"></p><p>下图表示了当一个缓存行(Cache line)的调整的状态的时候，另外一个缓存行(Cache line)需要调整的状态。</p><table><thead><tr><th>状态</th><th>M</th><th>E</th><th>S</th><th><strong>I</strong></th></tr></thead><tbody><tr><td><strong>M</strong></td><td>×</td><td>×</td><td>×</td><td>√</td></tr><tr><td><strong>E</strong></td><td>×</td><td>×</td><td>×</td><td>√</td></tr><tr><td><strong>S</strong></td><td>×</td><td>×</td><td>√</td><td>√</td></tr><tr><td><strong>I</strong></td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><p>举个示例：</p><blockquote><p>假设cache 1 中有一个变量<code>x = 0</code>的 Cache line 处于S状态(共享)。<br>那么其他拥有x变量的 cache 2、cache 3 等<code>x</code>的 Cache line调整为<code>S</code>状态（共享）或者调整为<code>I</code>状态（无效）。</p></blockquote><h3 id="2-多核缓存协同操作"><a href="#2-多核缓存协同操作" class="headerlink" title="2. 多核缓存协同操作"></a>2. 多核缓存协同操作</h3><h4 id="1-内存变量"><a href="#1-内存变量" class="headerlink" title="(1) 内存变量"></a>(1) 内存变量</h4><p>假设有三个CPU A、B、C，对应三个缓存分别是cache a、b、c。在主内存中定义了<code>x</code>的引用值为0。</p><p><img src="https://statics.sh1a.qingstor.com/2018/11/18/javabf-cpu-4.png" alt="内存变量"></p><h4 id="2-单核读取"><a href="#2-单核读取" class="headerlink" title="(2) 单核读取"></a>(2) 单核读取</h4><p>执行流程是：</p><ul><li>CPU A发出了一条指令，从主内存中读取<code>x</code>。</li><li>从主内存通过 bus 读取到 CPU A 的缓存中（远端读取 Remote read）,这时该 Cache line 修改为 E 状态（独享）。</li></ul><p><img src="https://statics.sh1a.qingstor.com/2018/11/18/javabf-cpu-5.png" alt="单核读取"></p><h4 id="3-双核读取"><a href="#3-双核读取" class="headerlink" title="(3) 双核读取"></a>(3) 双核读取</h4><p>执行流程是：</p><ul><li>CPU A发出了一条指令，从主内存中读取<code>x</code>。</li><li>CPU A从主内存通过bus读取到 cache a 中并将该 Cache line 设置为E状态。</li><li>CPU B发出了一条指令，从主内存中读取<code>x</code>。</li><li>CPU B试图从主内存中读取<code>x</code>时，CPU A检测到了地址冲突。这时CPU A对相关数据做出响应。此时<code>x</code>存储于 cache a 和 cache b 中，<code>x</code>在 chche a 和 cache b 中都被设置为S状态(共享)。</li></ul><p><img src="https://statics.sh1a.qingstor.com/2018/11/18/javabf-cpu-6.png" alt="双核读取"></p><h4 id="4-修改数据"><a href="#4-修改数据" class="headerlink" title="(4) 修改数据"></a>(4) 修改数据</h4><p>执行流程是：</p><ul><li>CPU A 计算完成后发指令需要修改<code>x</code>.</li><li>CPU A 将<code>x</code>设置为M状态（修改）并通知缓存了<code>x</code>的 CPU B, CPU B 将本地 cache b 中的<code>x</code>设置为<code>I</code>状态(无效)</li><li>CPU A 对<code>x</code>进行赋值。</li></ul><p><img src="https://statics.sh1a.qingstor.com/2018/11/18/javabf-cpu-7.png" alt="修改数据"></p><h4 id="5-同步数据"><a href="#5-同步数据" class="headerlink" title="(5) 同步数据"></a>(5) 同步数据</h4><p>那么执行流程是：</p><ul><li>CPU B 发出了要读取x的指令。</li><li>CPU B 通知CPU A,CPU A将修改后的数据同步到主内存时cache a 修改为E（独享）</li><li>CPU A同步CPU B的x,将cache a和同步后cache b中的x设置为S状态（共享）。</li></ul><p><img src="https://statics.sh1a.qingstor.com/2018/11/18/javabf-cpu-8.png" alt="同步数据"></p><h3 id="3-CPU-存储模型简介"><a href="#3-CPU-存储模型简介" class="headerlink" title="3. CPU 存储模型简介"></a>3. CPU 存储模型简介</h3><p>MESI协议为了保证多个 CPU cache 中共享数据的一致性，定义了 Cache line 的四种状态，而 CPU 对 cache 的<code>4</code>种操作可能会产生不一致状态，因此 cache 控制器监听到本地操作和远程操作的时候，需要对地址一致的 Cache line 状态做出一定的修改，从而保证数据在多个cache之间流转的一致性。</p><p>但是，缓存的一致性消息传递是要时间的，这就使得状态切换会有更多的延迟。某些状态的切换需要特殊的处理，可能会阻塞处理器。这些都将会导致各种各样的稳定性和性能问题。比如你需要修改本地缓存中的一条信息，那么你必须将<code>I</code>（无效）状态通知到其他拥有该缓存数据的CPU缓存中，并且等待确认。等待确认的过程会阻塞处理器，这会降低处理器的性能。因为这个等待远远比一个指令的执行时间长的多。所以，为了为了避免这种阻塞导致时间的浪费，引入了存储缓存(<code>Store Buffer</code>)和无效队列(<code>Invalidate Queue</code>)。</p><h4 id="1-存储缓存"><a href="#1-存储缓存" class="headerlink" title="(1) 存储缓存"></a>(1) 存储缓存</h4><p>在没有存储缓存时，CPU 要写入一个量，有以下情况：</p><ul><li>量不在该 CPU 缓存中，则需要发送 Read Invalidate 信号，再等待此信号返回，之后再写入量到缓存中。</li><li>量在该 CPU 缓存中，如果该量的状态是 Exclusive 则直接更改。而如果是 Shared 则需要发送 Invalidate 消息让其它 CPU 感知到这一更改后再更改。</li></ul><p>这些情况中，很有可能会触发该 CPU 与其它 CPU 进行通讯，接着需要等待它们回复。这会浪费大量的时钟周期！为了提高效率，可以使用<strong>异步</strong>的方式去处理：先将值写入到一个 Buffer 中，再发送通讯的信号，等到信号被响应，再应用到 cache 中。并且此 Buffer 能够接受该 CPU 读值。这个 Buffer 就是 Store Buffer。而不须要等待对某个量的赋值指令的完成才继续执行下一条指令，直接去 Store Buffer 中读该量的值，这种优化叫<strong>Store Forwarding</strong>。</p><h4 id="2-无效队列"><a href="#2-无效队列" class="headerlink" title="(2) 无效队列"></a>(2) 无效队列</h4><p>同理，解决了主动发送信号端的效率问题，那么，接受端 CPU 接受到 Invalidate 信号后如果立即采取相应行动(去其它 CPU 同步值)，再返回响应信号，则时钟周期也太长了，此处也可优化。接受端 CPU 接受到信号后不是立即采取行动，而是将 Invalidate 信号插入到一个队列 Queue 中，立即作出响应。等到合适的时机，再去处理这个 Queue 中的 Invalidate 信号，并作相应处理。这个 Queue 就是<strong>Invalidate Queue</strong>。</p><h2 id="四、乱序执行"><a href="#四、乱序执行" class="headerlink" title="四、乱序执行"></a>四、乱序执行</h2><p><strong>乱序执行（<code>out-of-orderexecution</code>）</strong>：是指CPU允许将多条指令不按程序规定的顺序分开发送给各相应电路单元处理的技术。这样将根据各电路单元的状态和各指令能否提前执行的具体情况分析后，将能提前执行的指令立即发送给相应电路。</p><p>这好比请A、B、C三个名人为晚会题写横幅“春节联欢晚会”六个大字，每人各写两个字。如果这时在一张大纸上按顺序由A写好”春节”后再交给B写”联欢”，然后再由C写”晚会”，那么这样在A写的时候，B和C必须等待，而在B写的时候C仍然要等待而A已经没事了。</p><p>但如果采用三个人分别用三张纸同时写的做法， 那么B和C都不必须等待就可以同时各写各的了，甚至C和B还可以比A先写好也没关系（就象乱序执行），但当他们都写完后就必须重新在横幅上（自然可以由别人做，就象CPU中乱序执行后的重新排列单元）按”春节联欢晚会”的顺序排好才能挂出去。</p><p>所以，CPU 为什么会有乱序执行优化？本质原因是<strong>CPU为了效率</strong>，将长费时的操作“异步”执行，排在后面的指令不等前面的指令执行完毕就开始执行后面的指令。而且允许排在前面的长费时指令后于排在后面的指令执行完。</p><p>CPU 执行乱序主要有以下几种：</p><ul><li>**写写乱序(store store)**：<code>a=1;b=2; -&gt; b=2;a=1;</code></li><li>**写读乱序(store load)**：<code>a=1;load(b); -&gt; load(b);a=1;</code></li><li>**读读乱序(load load)**：<code>load(a);load(b); -&gt; load(b);load(a);</code></li><li>**读写乱序(load store)**：<code>load(a);b=2; -&gt; b=2;load(a);</code></li></ul><p>总而言之，<strong>CPU的乱序执行优化指的是处理器为提高运算速度而做出违背代码原有顺序的优化</strong>。</p><hr><p>参考文章：</p><ul><li><a href="http://ifeve.com/from-javaeye-cpu-cache/">从Java视角理解系统结构（二）CPU缓存</a></li><li><a href="http://www.cnblogs.com/yanlong300/p/8986041.html">CPU缓存一致性协议MESI</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>软件工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CPU缓存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用Bash命令整理之其他常用命令</title>
    <link href="/2018/10/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/Linux/%E5%B8%B8%E7%94%A8Bash%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86%E4%B9%8B%E5%85%B6%E4%BB%96%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2018/10/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/Linux/%E5%B8%B8%E7%94%A8Bash%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86%E4%B9%8B%E5%85%B6%E4%BB%96%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="1-hostname-查看主机名"><a href="#1-hostname-查看主机名" class="headerlink" title="1. hostname - 查看主机名"></a>1. hostname - 查看主机名</h2><p><code>hostname</code>命令用于查看系统的主机名，或是修改系统的主机名。</p><p><code>hostname</code>的常用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 显示系统的当前主机名</span><br>hostname<br><br><span class="hljs-comment"># 修改你系统的主机名</span><br>hostname blinkfox-system<br><br><span class="hljs-comment"># 使用 -F 选项，从指定的文件中读取主机名</span><br>hostname -F /root/hostname.txt<br></code></pre></td></tr></table></figure><h2 id="2-uptime-查看系统运行时间"><a href="#2-uptime-查看系统运行时间" class="headerlink" title="2. uptime - 查看系统运行时间"></a>2. uptime - 查看系统运行时间</h2><p><code>uptime</code>命令用于打印系统的运行时间等信息。使用如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uptime</span><br></code></pre></td></tr></table></figure><h2 id="3-w、who-列出登录的用户"><a href="#3-w、who-列出登录的用户" class="headerlink" title="3. w、who - 列出登录的用户"></a>3. w、who - 列出登录的用户</h2><p><code>w</code>命令用于显示登录用户及他们当前运行的进程。输入的内容格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">w<br><br><span class="hljs-comment"># 打印如下</span><br>22:42  up 18 days, 1 hr, 2 <span class="hljs-built_in">users</span>, load averages: 1.23 1.79 1.75<br>USER     TTY      FROM              LOGIN@  IDLE WHAT<br>blinkfox console  -                日19   6days -<br>blinkfox s000     -                五23       - w<br></code></pre></td></tr></table></figure><p><code>who</code>命令有与<code>w</code>命令类似的用途，但它的功能比<code>w</code>命令更强大一些。语法格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">who</span> [OPTION]... [FILE | ARG1 ARG2]<br></code></pre></td></tr></table></figure><p><code>who</code>常用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 显示当前登录的所有用户信息</span><br><span class="hljs-built_in">who</span><br><br><span class="hljs-comment"># 显示系统的启动时间</span><br><span class="hljs-built_in">who</span> -b<br><br><span class="hljs-comment"># 显示系统登录进程</span><br><span class="hljs-built_in">who</span> -l<br><br><span class="hljs-comment"># 显示与当前标准输入关联的用户信息</span><br><span class="hljs-built_in">who</span> -m<br><br><span class="hljs-comment"># 显示系统的运行级别</span><br><span class="hljs-built_in">who</span> -r<br><br><span class="hljs-comment"># 显示所有登录用户的用户名和登录用户数</span><br><span class="hljs-built_in">who</span> -q<br></code></pre></td></tr></table></figure><h2 id="4-uname-查看系统信息"><a href="#4-uname-查看系统信息" class="headerlink" title="4. uname - 查看系统信息"></a>4. uname - 查看系统信息</h2><p><code>uname</code>命令用于打印内核名称和版本、主机名等系统信息。命令的语法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> [OPTION]...<br></code></pre></td></tr></table></figure><p>常用使用方式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 只打印内核的名称</span><br><span class="hljs-built_in">uname</span><br><br><span class="hljs-comment"># 使用 -n 选项，只打印系统的主机名</span><br><span class="hljs-built_in">uname</span> -n<br><br><span class="hljs-comment"># 使用 -r 选项，打印内核版本信息</span><br><span class="hljs-built_in">uname</span> -r<br><br><span class="hljs-comment"># 使用 -m 选项，打印系统的硬件名称</span><br><span class="hljs-built_in">uname</span> -m<br><br><span class="hljs-comment"># 使用 -p 选项，打印系统的处理器类型信息</span><br><span class="hljs-built_in">uname</span> -p<br><br><span class="hljs-comment"># 使用 -i 选项，打印系统的硬件平台信息</span><br><span class="hljs-built_in">uname</span> -i<br><br><span class="hljs-comment"># 使用 -a 选项，打印上述所有示例中的信息</span><br><span class="hljs-built_in">uname</span> -a<br></code></pre></td></tr></table></figure><h2 id="5-date-显示和设置系统日期和时间"><a href="#5-date-显示和设置系统日期和时间" class="headerlink" title="5. date - 显示和设置系统日期和时间"></a>5. date - 显示和设置系统日期和时间</h2><p><code>date</code>命令用于以多种格式显示日期和时间，或设置系统的日期和时间。<code>date</code>命令的语法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">date</span> [OPTION]... [+FORMAT]<br><span class="hljs-built_in">date</span> [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]<br></code></pre></td></tr></table></figure><p>常用使用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 以默认格式显示系统的当前日期时间</span><br><span class="hljs-built_in">date</span><br><br><span class="hljs-comment"># 格式化当前日期</span><br><span class="hljs-built_in">date</span> +<span class="hljs-string">&quot;%Y-%m-%d&quot;</span><br><br><span class="hljs-comment"># 格式化输出昨天的日期</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;1 day ago&quot;</span> +<span class="hljs-string">&quot;%Y-%m-%d&quot;</span><br><br><span class="hljs-comment"># 2秒后格式化输出</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;2 second&quot;</span> +<span class="hljs-string">&quot;%Y-%m-%d %H:%M.%S&quot;</span><br><br><span class="hljs-comment"># 普通格式化转出</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;2009-12-12&quot;</span> +<span class="hljs-string">&quot;%Y/%m/%d %H:%M.%S&quot;</span><br><br><span class="hljs-comment"># apache格式转换</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;Dec 5, 2009 12:00:37 AM&quot;</span> +<span class="hljs-string">&quot;%Y-%m-%d %H:%M.%S&quot;</span><br><br><span class="hljs-comment"># 日期加减操作</span><br><span class="hljs-built_in">date</span> +%Y%m%d <span class="hljs-comment">#显示前天年月日</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;+1 day&quot;</span> +%Y%m%d <span class="hljs-comment">#显示前一天的日期</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;-1 day&quot;</span> +%Y%m%d <span class="hljs-comment">#显示后一天的日期</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;-1 month&quot;</span> +%Y%m%d <span class="hljs-comment">#显示上一月的日期</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;+1 month&quot;</span> +%Y%m%d <span class="hljs-comment">#显示下一月的日期</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;-1 year&quot;</span> +%Y%m%d <span class="hljs-comment">#显示前一年的日期</span><br><span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;+1 year&quot;</span> +%Y%m%d <span class="hljs-comment">#显示下一年的日期</span><br><br><span class="hljs-comment"># 设定时间</span><br><span class="hljs-built_in">date</span> -s <span class="hljs-comment"># 设置当前时间，只有root权限才能设置，其他只能查看</span><br><span class="hljs-built_in">date</span> -s 20160816 <span class="hljs-comment"># 设置成20160816，这样会把具体时间设置成空00:00:00</span><br><span class="hljs-built_in">date</span> -s 01:01:01 <span class="hljs-comment"># 设置具体时间，不会对日期做更改</span><br><span class="hljs-built_in">date</span> -s <span class="hljs-string">&quot;01:01:01 2012-05-23&quot;</span> <span class="hljs-comment"># 这样可以设置全部时间 </span><br><span class="hljs-built_in">date</span> -s <span class="hljs-string">&quot;01:01:01 20120523&quot;</span> <span class="hljs-comment"># 这样可以设置全部时间</span><br><span class="hljs-built_in">date</span> -s <span class="hljs-string">&quot;2012-05-23 01:01:01&quot;</span> <span class="hljs-comment"># 这样可以设置全部时间 </span><br><span class="hljs-built_in">date</span> -s <span class="hljs-string">&quot;20120523 01:01:01&quot;</span> <span class="hljs-comment"># 这样可以设置全部时间</span><br></code></pre></td></tr></table></figure><h2 id="6-id-显示用户属性"><a href="#6-id-显示用户属性" class="headerlink" title="6. id - 显示用户属性"></a>6. id - 显示用户属性</h2><p><code>id</code>命令用于打印输出用户<code>uid</code>、<code>gid</code>、用户名和组名等用户身份信息。<code>id</code>命令的语法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">id</span> [OPTION]... [USERNAME]<br></code></pre></td></tr></table></figure><p>常见使用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 输出当前用户的uid、用户名、gid、组名及用户属于的群组信息</span><br><span class="hljs-built_in">id</span><br><br><span class="hljs-comment"># 使用 -u 选项，输出用户的 uid</span><br><span class="hljs-built_in">id</span> -u<br><br><span class="hljs-comment">#-u 选项和 -n 选项结合使用，输出账户的用户名</span><br><span class="hljs-built_in">id</span> -un<br><br><span class="hljs-comment"># 使用 -g 选项，输出帐号当前起作用的gid</span><br><span class="hljs-built_in">id</span> -g<br><br><span class="hljs-comment"># -g 与 -n 选项结合使用，输出帐号当前起作用的用户组名</span><br><span class="hljs-built_in">id</span> -gn<br><br><span class="hljs-comment"># 使用 -G 选项，输出帐号所属的所有群组id</span><br><span class="hljs-built_in">id</span> -G root<br><br><span class="hljs-comment"># -G 与 -n 选项结合使用，输出账号所属的所有群组的名称</span><br><span class="hljs-built_in">id</span> -Gn root<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用Bash命令整理之文本处理</title>
    <link href="/2018/10/11/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/Linux/%E5%B8%B8%E7%94%A8Bash%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86%E4%B9%8B%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/"/>
    <url>/2018/10/11/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/Linux/%E5%B8%B8%E7%94%A8Bash%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86%E4%B9%8B%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="1-sort-文本排序"><a href="#1-sort-文本排序" class="headerlink" title="1. sort - 文本排序"></a>1. sort - 文本排序</h2><p><code>sort</code>命令用于将文本文件的行排序。默认情况下，<code>sort</code>命令是按照字符串的字母顺序排序。</p><p>sort 的常用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将文本内容按字母顺序排序</span><br><span class="hljs-built_in">sort</span> example.txt<br><br><span class="hljs-comment"># 使用 -u 选项，移除所有重复行后排序</span><br><span class="hljs-built_in">sort</span> -u example.txt<br><br><span class="hljs-comment"># 使用 -n 选项，将令数字按数值的大小排序</span><br><span class="hljs-built_in">sort</span> -n example.txt<br><br><span class="hljs-comment"># 使用 -r 选项，以倒序方式排序</span><br><span class="hljs-built_in">sort</span> -n -r example.txt<br><br><span class="hljs-comment"># 同时将 file1、file2 的内容排序</span><br><span class="hljs-built_in">sort</span> file1 file2<br></code></pre></td></tr></table></figure><h2 id="2-uniq-文本去重"><a href="#2-uniq-文本去重" class="headerlink" title="2.uniq - 文本去重"></a>2.uniq - 文本去重</h2><p><code>uniq</code>命令用于移除或发现文件中重复的条目。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 它将移除文件中重复的行并显示单一行</span><br><span class="hljs-built_in">uniq</span> example.txt<br><br><span class="hljs-comment"># 可以统计重复行出现的次数</span><br><span class="hljs-built_in">uniq</span> -c example.txt<br><br><span class="hljs-comment"># 使用 -d 选项，只显示文件中有重复的行并只显示一次</span><br><span class="hljs-built_in">uniq</span> -d example.txt<br><br><span class="hljs-comment"># 使用 -D 选项，显示文件中所有重复的行</span><br><span class="hljs-built_in">uniq</span> -D example.txt<br><br><span class="hljs-comment"># 使用 -u 选项，只显示文件中不重复的行</span><br><span class="hljs-built_in">uniq</span> -u example.txt<br><br><span class="hljs-comment"># 使用 -w 选项，限制 uniq 命令只比较每行的前 3 个字符是否重复</span><br><span class="hljs-built_in">uniq</span> -w 3 example.txt<br><br><span class="hljs-comment"># 使用 -s 选项，避免 uniq 命令比较每行的前 3 个字符，只比较后面的字符是否重复</span><br><span class="hljs-built_in">uniq</span> -s 3 example.txt<br><br><span class="hljs-comment"># 使用 -f 选项，避免 uniq 命令比较第一列的内容，只比较后面的字符是否重复</span><br><span class="hljs-built_in">uniq</span> -f 1 example.txt<br></code></pre></td></tr></table></figure><h2 id="3-tr-替换或删除字符"><a href="#3-tr-替换或删除字符" class="headerlink" title="3.tr - 替换或删除字符"></a>3.tr - 替换或删除字符</h2><p><code>tr</code>命令主要用于删除文件中控制字符或进行字符转换。使用<code>tr</code>时要转换两个字符串：字符串 1 用于查询，字符串 2 用于处理各种转换。<code>tr</code>刚执行时，字符串 1 中的字符被映射到字符串 2 中的字符，然后转换操作开始。</p><p><code>tr</code>命令的语法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tr</span> [OPTION]... SET1 [SET2]<br></code></pre></td></tr></table></figure><p>常用命令示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 若要将大括号转换为小括号</span><br><span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;&#123;&#125;&#x27;</span> <span class="hljs-string">&#x27;()&#x27;</span> &lt; textfile &gt; newfile<br><br><span class="hljs-comment"># 若要将大括号转换成方括号</span><br><span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;&#123;&#125;&#x27;</span> <span class="hljs-string">&#x27;\[]&#x27;</span> &lt; textfile &gt; newfile<br><br><span class="hljs-comment"># 若要将小写字符转换成大写，请输入：</span><br><span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;a-z&#x27;</span> <span class="hljs-string">&#x27;A-Z&#x27;</span> &lt; textfile &gt; newfile<br><br><span class="hljs-comment"># 若要创建一个文件中的单词列表</span><br><span class="hljs-built_in">tr</span> -cs <span class="hljs-string">&#x27;[:lower:][:upper:]&#x27;</span> <span class="hljs-string">&#x27;[\n*]&#x27;</span> &lt; textfile &gt; newfile<br><br><span class="hljs-comment"># 若要从某个文件中删除所有空字符</span><br><span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27;\0&#x27;</span> &lt; textfile &gt; newfile<br><br><span class="hljs-comment"># 若要用单独的换行替换每一序列的一个或多个换行，请输入：</span><br><span class="hljs-built_in">tr</span> -s <span class="hljs-string">&#x27;\n&#x27;</span> &lt; textfile &gt; newfile<br><br><span class="hljs-comment"># 要以单个“#”字符替换 &lt;space&gt; 字符类中的每个字符序列</span><br><span class="hljs-built_in">tr</span> -s <span class="hljs-string">&#x27;[:space:]&#x27;</span> <span class="hljs-string">&#x27;[#*]&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="4-grep-查找字符串"><a href="#4-grep-查找字符串" class="headerlink" title="4.grep - 查找字符串"></a>4.grep - 查找字符串</h2><p><code>grep</code>命令用于搜索文本或指定的文件中与指定的字符串或模式相匹配的行。默认情况下，<code>grep</code>命令只显示匹配的行。</p><p><code>grep</code>命令的语法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep [OPTION]... PATTERN [FILE]...<br>grep [OPTION]... [-e PATTERN | -f FILE] [FILE]...<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># `grep`命令查找文件/etc/passwd 中帐号 blinkfox 的信息</span><br>grep blinkfox /etc/passwd<br><br><span class="hljs-comment"># 使用 -i 选项，强制 grep 命令忽略搜索关键字的大小写</span><br>grep -i blinkfox /etc/passwd<br><br><span class="hljs-comment"># 使用 -r 选项，可以递归搜索指定目录下的所有文件</span><br>grep -r blinkfox /etc/<br><br><span class="hljs-comment"># 使用 -w 选项，只匹配包含指定单词的行</span><br>grep -w blinkfox /etc/<br><br><span class="hljs-comment"># 使用 -c 选项，报告文件或文本中模式被匹配的次数</span><br>grep -c blinkfox /etc/passwd<br><br><span class="hljs-comment"># 使用 -n 选项，显示每一个匹配的行的行号</span><br>grep -n blinkfox /etc/passwd<br><br><span class="hljs-comment"># 使用 -v 选项，可以输出除匹配指定模式的行以外的其他所有行</span><br>grep -v blinkfox /etc/passwd<br><br><span class="hljs-comment"># 使用 --color 选项，在输出中将匹配的字符串以彩色的形式标出</span><br>grep --color blinkfox /etc/passwd<br></code></pre></td></tr></table></figure><h2 id="5-diff-比较两个文件"><a href="#5-diff-比较两个文件" class="headerlink" title="5.diff - 比较两个文件"></a>5.diff - 比较两个文件</h2><p><code>diff</code>命令用于比较两个文件，并找出它们之间的不同。<code>diff</code>命令的语法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">diff [OPTION]... from-file to-file<br></code></pre></td></tr></table></figure><p>常用使用方式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 比较两个文件</span><br>diff nsswitch.conf nsswitch.conf.org<br><br><span class="hljs-comment"># 使用 -w 选项，比较时忽略空格</span><br>diff -w nsswitch.conf nsswitch.conf.org<br><br><span class="hljs-comment"># 使用 -y 选项，以并排的格式输出两个文件的比较结果</span><br>diff -y nsswitch.conf nsswitch.conf.org<br><br>使用 -c 选项，以上下对比的格式输出两个文件的比较结果<br>diff -c nsswitch.conf nsswitch.conf.org<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用Bash命令整理之操作文件和目录</title>
    <link href="/2018/10/10/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/Linux/%E5%B8%B8%E7%94%A8Bash%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86%E4%B9%8B%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95/"/>
    <url>/2018/10/10/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/Linux/%E5%B8%B8%E7%94%A8Bash%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86%E4%B9%8B%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="1-touch-创建文件"><a href="#1-touch-创建文件" class="headerlink" title="1. touch - 创建文件"></a>1. touch - 创建文件</h2><p><code>touch</code>命令就可用于创建、变更和修改文件的时间戳。它是 Linux 操作系统的标准程序。<code>touch</code>命令又如下选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">-a: 只改变访问时间 <br>-c: 不创建任何文件<br>-m: 只改变修改时间<br>-r: 使用指定文件的时间替代当前时间<br>-t: 使用 [[CC]YY]MMDDhhmm[.ss] 替代当前时间<br></code></pre></td></tr></table></figure><p>touch 命令的常见用法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建一个名为 effyl 的新空文件</span><br><span class="hljs-built_in">touch</span> effyl<br><br><span class="hljs-comment"># 同时创建名称分别为 effyl myeffyl lueffyl 的三个文件</span><br><span class="hljs-built_in">touch</span> effyl myeffyl lueffyl<br><br><span class="hljs-comment"># 使用 -a 选项，可以改变或更新文件的最新访问时间，如果文件 effyl 不存在，则新创建一个</span><br><span class="hljs-built_in">touch</span> -a effyl<br><br><span class="hljs-comment"># 使用 -c 选项，可以避免创建一个新文件，并用当前时间更新文件的时间戳</span><br><span class="hljs-built_in">touch</span> -c effyl<br><br><span class="hljs-comment"># 使用 -m 选项，可以只改变文件的修改时间，而访问时间不变</span><br><span class="hljs-built_in">touch</span> -m effyl<br><br><span class="hljs-comment"># 使用 -c 和 -t 选项，来明确设置文件的时间</span><br><span class="hljs-built_in">touch</span> -c -t YYMMDDHHMM filename<br><br><span class="hljs-comment"># 如果想使用文件 myeffyl 的时间戳更新文件 effyl 的时间戳，可以使用 -r 选项</span><br><span class="hljs-built_in">touch</span> -r myeffyl effyl<br></code></pre></td></tr></table></figure><h2 id="2-mkdir-创建目录"><a href="#2-mkdir-创建目录" class="headerlink" title="2.mkdir - 创建目录"></a>2.mkdir - 创建目录</h2><p><code>mkdir</code>命令用于创建一个新目录。最基本的<code>mkdir</code>命令的使用方法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在当前目录下创建一个给定的目录名</span><br><span class="hljs-built_in">mkdir</span> &lt;<span class="hljs-built_in">dirname</span>&gt;<br><br><span class="hljs-comment"># 在 backup 中的相对路径创建一个名为 old 的目录</span><br><span class="hljs-built_in">mkdir</span> backup/old<br><br><span class="hljs-comment"># 在 backup 中的绝对路径中创建一个名为 old 的目录</span><br><span class="hljs-built_in">mkdir</span> /home/blinkfox/backup/old<br><br><span class="hljs-comment"># 使用 -p 选项，会自动创建所有还不存在的父目录</span><br><span class="hljs-built_in">mkdir</span> -p backup/old<br><br><span class="hljs-comment"># 使用 -m 选项，可以设置将要创建目录的权限</span><br><span class="hljs-comment"># 如：创建一个任何人都有读写访问权限的目录</span><br><span class="hljs-built_in">mkdir</span> -p -m 777 backup/old<br></code></pre></td></tr></table></figure><h2 id="3-cp-复制文件或目录"><a href="#3-cp-复制文件或目录" class="headerlink" title="3.cp - 复制文件或目录"></a>3.cp - 复制文件或目录</h2><p><code>cp</code>命令用于将文件从一个地方复制到另一个地方。原来的文件保持不变，新文件可能保持原名或用一个不同的名字。</p><p>使用 cp 命令复制文件和目录的语法有以下几种：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 复制源文件到目标文件</span><br><span class="hljs-built_in">cp</span> [OPTION] SOURCE DEST<br><br><span class="hljs-comment"># 复制一个或多个源文件到一个目录</span><br><span class="hljs-built_in">cp</span> [OPTION] SOURCE... DIRECTORY<br><br><span class="hljs-comment"># 同上</span><br><span class="hljs-built_in">cp</span> [OPTION] -t DIRECTORY SOURCE... <br></code></pre></td></tr></table></figure><p>常用使用示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在当前目录下，创建一个文件 file.txt 的副本，取名为 newfile.txt</span><br><span class="hljs-built_in">cp</span> file.txt newfile.txt<br><br><span class="hljs-comment"># 复制当前目录下的 file.txt 文件到 /tmp 目录下</span><br><span class="hljs-built_in">cp</span> file.txt /tmp<br><br><span class="hljs-comment"># 复制当前目录下的所有文件到 /tmp 目录下</span><br><span class="hljs-built_in">cp</span> * /tmp<br><br><span class="hljs-comment"># 使用 -p 选项，可以使复制一个文件到新文件时，保留源文件的所有者、权限等信息</span><br><span class="hljs-built_in">cp</span> -p filename /path/to/new/location/myfile<br><br><span class="hljs-comment"># 使用 -R 或 -r 选项，恶意递归地复制一个目录</span><br><span class="hljs-comment"># 即将一个目录及其下的所有文件和子目录都复制到另一个目录</span><br><span class="hljs-built_in">cp</span> -R * /home/blinkfox/backup<br></code></pre></td></tr></table></figure><h2 id="4-ln-链接文件或目录"><a href="#4-ln-链接文件或目录" class="headerlink" title="4.ln - 链接文件或目录"></a>4.ln - 链接文件或目录</h2><p><code>ln</code>命令用于创建软链接或硬链接。使用 -s 选项，可以创建一个软链接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在目录 lib 下创建一个软链接 library.so，链接到 /home/blinkfox/src/library.so</span><br><span class="hljs-built_in">ln</span> -s /home/blinkfox/src/library.so /home/blinkfox/lib<br><br><span class="hljs-comment"># 创建目录的软链接</span><br><span class="hljs-built_in">ln</span> -s /home/blinkfox/src <span class="hljs-built_in">source</span><br></code></pre></td></tr></table></figure><h2 id="5-mv-移动文件或目录"><a href="#5-mv-移动文件或目录" class="headerlink" title="5. mv - 移动文件或目录"></a>5. mv - 移动文件或目录</h2><p><code>mv</code>命令用于将文件和目录从一个位置移到另外一个位置。除了移动文件，<code>mv</code>命令还可用于修改文件或目录的名字。</p><p>mv 命令的基本语法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> SOURCE... DIRECTORY<br></code></pre></td></tr></table></figure><p>常用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将当前目录下的文件 source.txt 移到目录 /tmp 下</span><br><span class="hljs-built_in">mv</span> source.txt /tmp<br><br><span class="hljs-comment"># 将目录 dir1、dir2 移到目录 dir_dist 下</span><br><span class="hljs-built_in">mv</span> dir1 dir2 dir_dist<br><br><span class="hljs-comment"># 将当前目录下的 old.txt 文件更名为 new.txt</span><br><span class="hljs-built_in">mv</span> old.txt new.txt<br><br><span class="hljs-comment"># 使用 -i 选项，在重写覆盖目标文件或目录之前给出提示信息</span><br><span class="hljs-built_in">mv</span> -i old.txt new.txt<br><br><span class="hljs-comment"># 将当前目录下的所有文件移动到目录 /tmp 下</span><br><span class="hljs-built_in">mv</span> * /tmp/<br><br><span class="hljs-comment"># 使用 -i 选项，从 dir1 中移动那些在目标目录中不存在的文件到目标目录</span><br><span class="hljs-built_in">mv</span> -u dir1/* dir2/<br></code></pre></td></tr></table></figure><h2 id="6-rm-删除文件或目录"><a href="#6-rm-删除文件或目录" class="headerlink" title="6.rm - 删除文件或目录"></a>6.rm - 删除文件或目录</h2><p><code>rm</code>命令用于删除指定的文件和目录。其语法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> [OPTIONS]... FILE...<br></code></pre></td></tr></table></figure><p><code>rm</code>的常用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除当前目录下的文件 file1.txt、file2.txt、file3.txt</span><br><span class="hljs-built_in">rm</span> file1.txt file2.txt file3.txt<br><br><span class="hljs-comment"># 删除当前目录下的所有文件</span><br><span class="hljs-built_in">rm</span> *<br><br><span class="hljs-comment"># 删除你当前帐号主目录下的 temp 目录中的所有文件</span><br><span class="hljs-built_in">rm</span> ~/temp/*<br><br><span class="hljs-comment"># 使用 -i 选项，可以在删除每个文件或目录前提示用户确认</span><br><span class="hljs-built_in">rm</span> -i *<br><br><span class="hljs-comment"># 删除当前目录下所有以&quot;.doc&quot;结尾的文件</span><br><span class="hljs-built_in">rm</span> *.doc<br><br><span class="hljs-comment"># 删除当前目录下所有文件名中包含&quot;movie&quot;字符串的文件</span><br><span class="hljs-built_in">rm</span> *movie*<br><br><span class="hljs-comment"># 删除当前目录下所有以&quot;a&quot;开头的文件</span><br><span class="hljs-built_in">rm</span> a*<br><br><span class="hljs-comment"># 删除当前目录下整个文件名（包括扩展名）只有 3 个字符的所有文件</span><br><span class="hljs-built_in">rm</span> ???<br><br><span class="hljs-comment"># 删除当前目录下文件扩展名有两个字符的所有文件</span><br><span class="hljs-built_in">rm</span> *.??<br><br><span class="hljs-comment"># 删除当前目录下文件名中含有字母 a 或 b 或 c 的所有文件</span><br><span class="hljs-built_in">rm</span> *[abc]*<br><br><span class="hljs-comment"># 删除当前目录下文件名中包含 0~9 的所有文件</span><br><span class="hljs-built_in">rm</span> *[0-9]*<br><br><span class="hljs-comment"># 删除当前目录下文件扩展名是字母 c 或 h 的所有文件</span><br><span class="hljs-built_in">rm</span> *.[ch]<br><br><span class="hljs-comment"># 删除 /tmp 目录下的所有文件及其子目录</span><br><span class="hljs-built_in">rm</span> -rf /tmp/*<br></code></pre></td></tr></table></figure><blockquote><p>-f 删除前不提示用户确认，并忽略不存在的文件</p></blockquote><blockquote><p>-r 递归地删除目录及其下的内容</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>软件工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用Bash命令整理之查看文件和目录</title>
    <link href="/2018/10/09/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/Linux/%E5%B8%B8%E7%94%A8Bash%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86%E4%B9%8B%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95/"/>
    <url>/2018/10/09/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/Linux/%E5%B8%B8%E7%94%A8Bash%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86%E4%B9%8B%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="1-ls-列出文件名和目录"><a href="#1-ls-列出文件名和目录" class="headerlink" title="1. ls - 列出文件名和目录"></a>1. ls - 列出文件名和目录</h2><p><code>ls</code>命令是<code>Linux</code>中最常用的命令之一，其作用就是列出文件名和目录。在命令行提示符下，直接输入<code>ls</code>命令，不带任何选项，将列出当前目录下所有文件和目录，但不会显示详细的信息，比如，文件类型、大小、修改日期和时间、权限等。</p><p>以下便是<code>ls</code>命令及其选项的作用说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 仅列出当前目录下所有文件和目录</span><br><span class="hljs-built_in">ls</span><br><br><span class="hljs-comment"># 每行显示一条记录，每条记录包括文件类型、大小、修改日期和时间、权限等</span><br><span class="hljs-built_in">ls</span> -l<br><br><span class="hljs-comment"># 将文件大小显示符合人类阅读习惯的格式</span><br><span class="hljs-built_in">ls</span> -lh<br><br><span class="hljs-comment"># 将使用不同的特殊字符归类不同的文件类型</span><br><span class="hljs-built_in">ls</span> -F<br><br><span class="hljs-comment"># 以长列表格式列出某个目录的信息</span><br><span class="hljs-built_in">ls</span> -ld /var/log<br><br><span class="hljs-comment"># 将递归地列出子目录的内容</span><br><span class="hljs-built_in">ls</span> -R /etc/sysconfig/<br><br><span class="hljs-comment"># 以长列表格式按文件或目录的修改时间倒序地列出文件和目录</span><br><span class="hljs-built_in">ls</span> -ltr<br><br><span class="hljs-comment"># 以长列表格式按文件大小顺序列出文件和目录</span><br><span class="hljs-built_in">ls</span> -<span class="hljs-built_in">ls</span><br><br><span class="hljs-comment"># 列出包括隐藏文件或目录在内的所有文件和目录，包括“.”（当前目录）和“..”（父目录）</span><br><span class="hljs-built_in">ls</span> -a<br><br><span class="hljs-comment"># 列出包括隐藏文件或目录在内的所有文件和目录，不包括“.”（当前目录）和“..”（父目录）</span><br><span class="hljs-built_in">ls</span> -A<br><br>输出的内容类似于-l选项，指示显示uid和gid，替代显示所有者和用户组<br><span class="hljs-built_in">ls</span> -n<br></code></pre></td></tr></table></figure><h2 id="2-cat-连接显示文件内容"><a href="#2-cat-连接显示文件内容" class="headerlink" title="2. cat - 连接显示文件内容"></a>2. cat - 连接显示文件内容</h2><p><code>cat</code> 命令也是Linux系统中最常用的命令之一。<code>cat</code>命令让我们可以看看文件的内容、连接文件、创建一个或多个文件和重定向输出到终端或文件。</p><p><code>cat</code>命令的语法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> [OPTION] [FILE]...<br></code></pre></td></tr></table></figure><p><code>cat</code>常用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用 cat 命令查看文件 /etc/group 的内容</span><br><span class="hljs-built_in">cat</span> /etc/group<br><br><span class="hljs-comment"># 显示多个文件的内容</span><br><span class="hljs-built_in">cat</span> /etc/redhat-release /etc/issue<br><br><span class="hljs-comment"># -n 选项，可以显示文件内容的行号</span><br><span class="hljs-built_in">cat</span> -n /etc/fstab<br><br><span class="hljs-comment"># -b 选项和 -n 选项类似，但只标识非空白行的行号</span><br><span class="hljs-built_in">cat</span> -b /etc/fstab<br><br><span class="hljs-comment"># -e 选项，将在每一行的结尾显示“$”字符</span><br><span class="hljs-built_in">cat</span> -e /etc/fstab<br></code></pre></td></tr></table></figure><blockquote><p>当你只输入 cat 命令，而没有任何参数时，它只是接收标准输入的内容并在标准输出中显示。所以你在输入一行内容并回车后，会在接下来的一行显示相同的内容。你也可以重定向标准输出到一个新文件。</p></blockquote><h2 id="3-less、more-分屏显示文件"><a href="#3-less、more-分屏显示文件" class="headerlink" title="3.less、more - 分屏显示文件"></a>3.less、more - 分屏显示文件</h2><p><code>more</code>命令在你使用小的xterm窗口时，或是想不使用文本编辑器而只是简单地阅读一个文件时是很有用的。more命令是一个用于一次翻阅一整屏文件的过滤器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看一个文件，自动清空屏幕并显示文件开头部分</span><br>more /etc/inittab<br><br><span class="hljs-comment"># 指定一次显示num行</span><br>more -num /etc/inittab<br></code></pre></td></tr></table></figure><p>与<code>more</code>命令相比，我个人更喜欢<code>less</code>命令来查看文件。<code>less</code>命令与<code>more</code>命令类似，但<code>less</code>命令向前和向后翻页都支持，而且<code>less</code>命令不需要在查看前加载整个文件，即<code>less</code>命令查看文件更快速。</p><p><code>less</code>常用命令参数如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">-b  &lt;缓冲区大小&gt; 设置缓冲区的大小<br>-e  当文件显示结束后，自动离开<br>-f  强迫打开特殊文件，例如外围设备代号、目录和二进制文件<br>-g  只标志最后搜索的关键词<br>-i  忽略搜索时的大小写<br>-m  显示类似more命令的百分比<br>-N  显示每行的行号<br>-o  &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来<br>-Q  不使用警告音<br>-s  显示连续空行为一行<br>-S  行过长时间将超出部分舍弃<br>-x  &lt;数字&gt; 将“tab”键显示为规定的数字空格<br>/字符串：向下搜索“字符串”的功能<br>?字符串：向上搜索“字符串”的功能<br>n： 重复前一个搜索（与 / 或 ? 有关）<br>N： 反向重复前一个搜索（与 / 或 ? 有关）<br>b  向后翻一页<br>d  向后翻半页<br>h  显示帮助界面<br>Q  退出less 命令<br>u  向前滚动半页<br>y  向前滚动一行<br>空格键 滚动一行<br>回车键 滚动一页<br>[pagedown]： 向下翻动一页<br>[pageup]：   向上翻动一页<br></code></pre></td></tr></table></figure><h2 id="4-head-显示文件头部"><a href="#4-head-显示文件头部" class="headerlink" title="4.head - 显示文件头部"></a>4.head - 显示文件头部</h2><p><code>head</code>命令用于打印指定输入的开头部分内容。默认情况下，打印每个指定输入的前10行内容。</p><p>使用<code>-n</code>选项可以指定打印文件的前N行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 指定打印文件的前5行</span><br><span class="hljs-built_in">head</span> -n 5 /etc/inittab<br>（或）<span class="hljs-built_in">head</span> -5 /etc/inittab<br><br><span class="hljs-comment"># 打印文件的前N个字节的数据</span><br><span class="hljs-built_in">head</span> -c 10 /etc/inittab<br></code></pre></td></tr></table></figure><h2 id="5-tail-显示文件尾部"><a href="#5-tail-显示文件尾部" class="headerlink" title="5.tail - 显示文件尾部"></a>5.tail - 显示文件尾部</h2><p><code>tail</code>命令和<code>head</code>命令相反，它打印指定输入的结尾部分的内容。默认情况下，它打印指定输入的最后10行内容。</p><p>使用<code>-n</code>选项可以指定打印文件的最后N行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 指定打印文件的后10行</span><br><span class="hljs-built_in">tail</span> -n 10 /etc/inittab<br><span class="hljs-built_in">tail</span> -10 /etc/inittab<br><br><span class="hljs-comment"># 即时打印文件中新写入的行</span><br><span class="hljs-built_in">tail</span> -f /var/log/messages<br><br><span class="hljs-comment"># --retry选项表示持续尝试打开某个文件，当你想打开一个稍后才会创建或即使不可用的文件</span><br><span class="hljs-built_in">tail</span> -f /tmp/debug.log --retry<br></code></pre></td></tr></table></figure><h2 id="6-file-查看文件类型"><a href="#6-file-查看文件类型" class="headerlink" title="6.file - 查看文件类型"></a>6.file - 查看文件类型</h2><p><code>file</code>命令用于接收一个文件作为参数并执行某些测试，已确定正确的文件类型。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看文件类型</span><br>file /etc/inittab<br><br><span class="hljs-comment"># 可以MIME类型的格式显示文件类型的信息</span><br>file -i  /etc/inittab<br><br><span class="hljs-comment"># 使用-N 选项，输出的队列可以以在文件名之后无空白填充的形式显示</span><br>file -N *<br></code></pre></td></tr></table></figure><h2 id="7-wc-查看文件统计信息"><a href="#7-wc-查看文件统计信息" class="headerlink" title="7.wc - 查看文件统计信息"></a>7.wc - 查看文件统计信息</h2><p><code>wc</code>命令用于查看文件的行数、单词数和字符数等信息。语法类似如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">wc</span> filename<br>X Y Z /etc/inittab<br></code></pre></td></tr></table></figure><p>其中X表示行数，Y表示单词数，Z表示字节数，filename表示文件名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># -l选项，可以只统计文件的行数信息</span><br><span class="hljs-built_in">wc</span> -l /etc/inittab<br><br><span class="hljs-comment"># -w选项，可以只统计文件的单词数信息</span><br><span class="hljs-built_in">wc</span> -w /etc/inittab<br><br><span class="hljs-comment"># -c选项，可以只统计文件的字节数信息</span><br><span class="hljs-built_in">wc</span> -c /etc/inittab<br><br><span class="hljs-comment"># -L选项，可以只统计文件中最长的行的长度</span><br><span class="hljs-built_in">wc</span> -L /etc/inittab<br></code></pre></td></tr></table></figure><h2 id="8-find-查找文件或目录"><a href="#8-find-查找文件或目录" class="headerlink" title="8.find - 查找文件或目录"></a>8.find - 查找文件或目录</h2><p><code>find</code>命令用于根据你指定的参数搜索和定位文件和目录的列表。<code>find</code>命令可以在多种情况下使用，比如你可以通过权限、用户、用户组、文件类型、日期、大小和其他可能的条件来查找文件。</p><p><code>find</code>命令常用使用和说明如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查找指定目录下的某个文件</span><br>find /etc/ -name inittab<br><br><span class="hljs-comment"># 在当前目录下查找名称为 inittab 的文件</span><br>find . -name inittab<br><br><span class="hljs-comment"># 在当前目录下，文件不区分大小写是example的所有文件</span><br>find . -iname example<br><br><span class="hljs-comment"># 找出当前目录下所有以 sh 结尾的文件</span><br>find . -<span class="hljs-built_in">type</span> f -name <span class="hljs-string">&quot;*.sh&quot;</span><br><br><span class="hljs-comment"># 找出当前目录下，文件权限是 777 的所有文件</span><br>find . -<span class="hljs-built_in">type</span> f -perm 777<br><br><span class="hljs-comment"># 找出当前目录下，文件权限不是 777 的所有文件</span><br>find . -<span class="hljs-built_in">type</span> f ! -perm 777<br><br><span class="hljs-comment"># 找出当前目录下所有只读文件</span><br>find . -<span class="hljs-built_in">type</span> f ! -perm /a+w<br><br><span class="hljs-comment"># 找出你帐号主目录下的所有可执行文件</span><br>find ~ -<span class="hljs-built_in">type</span> f -perm /a+w<br><br><span class="hljs-comment"># 找出 /tmp 目录下的.log文件并将其删除：</span><br>find /tmp/ -<span class="hljs-built_in">type</span> f -name <span class="hljs-string">&quot;*.log&quot;</span> -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">rm</span> -f &#123;&#125; \;<br><br><span class="hljs-comment"># 找出当前目录下的所有空文件</span><br>find . -<span class="hljs-built_in">type</span> f -empty<br><br><span class="hljs-comment"># 找出当前目录下的所有空目录</span><br>find . -<span class="hljs-built_in">type</span> d -empty<br><br><span class="hljs-comment"># 找出 /tmp 目录下的所有隐藏文件</span><br>find /tmp/ -<span class="hljs-built_in">type</span> f -name <span class="hljs-string">&quot;.*&quot;</span><br><br><span class="hljs-comment"># 找出 /tmp 目录下，所有者是 root 的文件和目录</span><br>find /tmp/ -user root<br><br><span class="hljs-comment"># 找出 /tmp 目录下，用户组是 developer 的文件和目录</span><br>find /tmp/ -group root<br><br><span class="hljs-comment"># 找出你账号的主目录下，3 天前修改的文件</span><br>find ~ -<span class="hljs-built_in">type</span> f -mtime 3<br><br><span class="hljs-comment"># 找出你账号的主目录下，30 天以前修改的所有文件</span><br>find ~ -<span class="hljs-built_in">type</span> f -mtime +30<br><br><span class="hljs-comment"># 找出你账号的主目录下，3 天以内修改的所有文件</span><br>find ~ -<span class="hljs-built_in">type</span> f -mtime -3<br><br><span class="hljs-comment"># 找出你账号的主目录下，30 天以前，60 天以内修改的所有文件</span><br>find ~ -<span class="hljs-built_in">type</span> f -mtime +30 -mtime -60<br><br><span class="hljs-comment"># 找出 /etc 目录下，一小时以内变更过的文件</span><br>find /etc -<span class="hljs-built_in">type</span> f -cmin -60<br><br><span class="hljs-comment"># 找出 /etc 目录下，一小时以内访问过的文件</span><br>find /etc -<span class="hljs-built_in">type</span> f -amin -60<br><br><span class="hljs-comment"># 找出你账号主目录下，大小是50MB的所有文件</span><br>find ~ -<span class="hljs-built_in">type</span> f -size 50MB<br><br><span class="hljs-comment"># 找出你账号主目录下，大于50MB小于100MB的所有文件</span><br>find ~ -<span class="hljs-built_in">type</span> f -size +50MB -size -100MB<br><br><span class="hljs-comment"># 找出你账号主目录下，大于100MB的文件并将其删除</span><br>find ~ -<span class="hljs-built_in">type</span> f -size +100MB -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">rm</span> -rf &#123;&#125; \;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git知识点整理</title>
    <link href="/2018/09/24/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/Git/Git%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    <url>/2018/09/24/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/Git/Git%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Git基本概念。"><a href="#1-Git基本概念。" class="headerlink" title="1. Git基本概念。"></a>1. Git基本概念。</h2><ul><li><code>repository</code></li><li><code>config</code></li><li><code>init</code></li><li><code>clone</code></li><li><code>fetch</code></li><li><code>pull</code></li><li><code>commit</code></li><li><code>push</code></li><li><code>branch</code></li><li><code>head</code></li><li><code>tag</code></li><li><code>merge</code></li><li><code>conflict</code></li><li><code>diff</code></li><li><code>log</code></li><li><code>show</code></li><li><code>status</code></li></ul><h2 id="2-Git工作空间和文件状态"><a href="#2-Git工作空间和文件状态" class="headerlink" title="2. Git工作空间和文件状态"></a>2. Git工作空间和文件状态</h2><h3 id="1-工作空间"><a href="#1-工作空间" class="headerlink" title="(1).工作空间"></a>(1).工作空间</h3><p><img src="http://blog.chinaunix.net/attachment/201402/19/10415985_139279770639pM.jpg" alt="Git工作空间"></p><p>左侧为工作区，右侧为版本库。</p><ul><li>工作区（<code>Working Directory</code>） 就是在电脑里能看到的目录，比如learngit文件夹就是一个工作区。</li><li>版本库（<code>Repository</code>）工作区有一个隐藏目录<code>.git</code>，是Git的版本库。</li></ul><p>在版本库中标记为<code>index</code>的区域为暂存区，标记为<code>master</code>的是Git为我们自动创建的第一个分支，代表的是目录树。此时<code>HEAD</code>实际是指向<code>master</code>分支的一个“游标”，所以图示的命令中出现HEAD的地方可以用<code>master</code>来替换。图中的objects标识的区域为git的对象库，实际位于<code>.git/objects</code>目录下。</p><ul><li>当对工作区修改（或新增）的文件执行<code>git add</code>命令时，暂存区的目录树会被更新，同时工作区修改（或新增）的文件内容会被写入到对象库中的一个新的对象中，而该对象的id被记录在暂存区的文件索引中。</li><li>当执行提交操作<code>git commit</code>时，暂存区的目录树会写到版本库（对象库）中，master分支会做相应的更新，即master最新指向的目录树就是提交时原暂存区的目录树。</li><li>当执行<code>git reset HEAD</code>命令时，暂存区的目录树会被重写，会被master分支指向的目录树所替换，但是工作区不受影响。</li><li>当执行<code>git rm --cached</code>命令时，会直接从暂存区删除文件，工作区则不做出改变。</li><li>当执行<code>git checkout .</code>或<code>git checkout --</code> 命令时，会用暂存区全部的文件或指定的文件替换工作区的文件。这个操作很危险，会清楚工作区中未添加到暂存区的改动。</li><li>当执行<code>git checkout HEAD .</code>或<code>git checkout HEAD</code>命令时，会用HEAD指向的master分支中的全部或部分文件替换暂存区和工作区中的文件。这个命令也是极度危险的。因为不但会清楚工作区中未提交的改动，也会清楚暂存区中未提交的改动。</li></ul><h3 id="1-文件状态"><a href="#1-文件状态" class="headerlink" title="(1).文件状态"></a>(1).文件状态</h3><p>Git 有三种状态，你的文件可能处于其中之一：**已提交(<code>committed</code>)<strong>、</strong>已修改(<code>modified</code>)<strong>和</strong>已暂存(<code>staged</code>)**。</p><h2 id="3-Git配置系统级、全局、当前仓库用户名、邮箱的命令"><a href="#3-Git配置系统级、全局、当前仓库用户名、邮箱的命令" class="headerlink" title="3. Git配置系统级、全局、当前仓库用户名、邮箱的命令"></a>3. Git配置系统级、全局、当前仓库用户名、邮箱的命令</h2><p>系统级、全局、当前仓库选项分别是:仓库-system、-global、-local(或默认不填)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;Jerry Mouse&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;jerry@yiibai.com&quot;</span><br></code></pre></td></tr></table></figure><p>列出Git设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>git config --list<br>git config -l<br></code></pre></td></tr></table></figure><h2 id="4-Git-fetch和pull的区别"><a href="#4-Git-fetch和pull的区别" class="headerlink" title="4. Git fetch和pull的区别"></a>4. Git fetch和pull的区别</h2><ul><li><code>git fetch</code>：相当于是从远程获取最新版本到本地，不会自动merge.</li><li><code>git pull</code>：相当于是从远程获取最新版本并merge到本地.</li></ul><h3 id="1-git-fetch示例："><a href="#1-git-fetch示例：" class="headerlink" title="(1). git fetch示例："></a>(1). git fetch示例：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Git fetch origin master<br>git <span class="hljs-built_in">log</span> -p master..origin/master<br>git merge origin/master<br></code></pre></td></tr></table></figure><p>以上命令的含义：</p><ul><li>首先从远程的<code>origin</code>的<code>master</code>主分支下载最新的版本到<code>origin/master</code>分支上</li><li>然后比较本地的<code>master</code>分支和<code>origin/master</code>分支的差别</li><li>最后进行合并</li><li>上述过程其实可以用以下更清晰的方式来进行：</li></ul><h3 id="1-git-pull示例："><a href="#1-git-pull示例：" class="headerlink" title="(1). git pull示例："></a>(1). git pull示例：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull origin master<br></code></pre></td></tr></table></figure><p>上述命令其实相当于<code>git fetch</code>和<code>git merge</code>。在实际使用中，<code>git fetch</code>更安全一些，因为在merge前，我们可以查看更新情况，然后再决定是否合并。</p><h2 id="5-Git-reset和revert的却别"><a href="#5-Git-reset和revert的却别" class="headerlink" title="5. Git reset和revert的却别"></a>5. Git reset和revert的却别</h2><ul><li><code>git revert</code>是用一次新的commit来回滚之前的commit，<code>git reset</code>是直接删除指定的commit。 </li><li>在回滚这一操作上看，效果差不多。但是在日后继续merge以前的老版本时有区别。因为<code>git revert</code>是用一次逆向的commit“中和”之前的提交，因此日后合并老的branch时，导致这部分改变不会再次出现，但是<code>git reset</code>是之间把某些commit在某个branch上删除，因而和老的branch再次merge时，这些被回滚的commit应该还会被引入。</li><li><code>git reset</code>是把HEAD向后移动了一下，而<code>git revert</code>是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。</li><li>git revert与git reset最大的不同是，git revert 仅仅是撤销某次提交。</li></ul><p>另外，说一下<code>git revert</code>， <code>git reset –hard</code>和 <code>–soft</code>的区别</p><ul><li><code>git reset –mixed id</code>: 是将git的HEAD变了（也就是提交记录变了），但文件并没有改变，（也就是working tree并没有改变）。</li><li><code>git reset –soft id</code>: 实际上，是<code>git reset –mixed id</code>后，又做了一次<code>git add</code>。</li><li><code>git reset –herd id</code>: 是将git的HEAD变了，文件也变了。</li></ul><h2 id="6-Git-merge和reabse的相同点和不同点"><a href="#6-Git-merge和reabse的相同点和不同点" class="headerlink" title="6. Git merge和reabse的相同点和不同点"></a>6. Git merge和reabse的相同点和不同点</h2><p><code>merge</code>是合并的意思，<code>rebase</code>是复位基底的意思，相同点都是用来合并分支的。</p><p><img src="http://images2015.cnblogs.com/blog/759200/201608/759200-20160806092734215-279978821.png" alt="merge和rebase"></p><p>不同点:</p><ul><li><code>merge</code>操作会生成一个新的节点，之前的提交分开显示。而<code>rebase</code>操作不会生成新的节点，是将两个分支融合成一个线性的提交。</li><li>解决冲突时。merge操作遇到冲突的时候，当前merge不能继续进行下去。手动修改冲突内容后，add 修改，commit就可以了。而<code>rebase</code>操作的话，会中断rebase,同时会提示去解决冲突。解决冲突后,将修改add后执行<code>git rebase –continue</code>继续操作，或者<code>git rebase –skip</code>忽略冲突。</li><li><code>git pull</code>和<code>git pull --rebase</code>区别：<code>git pull</code>做了两个操作分别是”获取”和”合并”。所以加了rebase就是以rebase的方式进行合并分支，默认为merge。</li></ul><p><strong>总结</strong>：选择 merge 还是 rebase？</p><ul><li>merge 是一个合并操作，会将两个分支的修改合并在一起，默认操作的情况下会提交合并中修改的内容</li><li>merge 的提交历史忠实地记录了实际发生过什么，关注点在真实的提交历史上面</li><li>rebase 并没有进行合并操作，只是提取了当前分支的修改，将其复制在了目标分支的最新提交后面</li><li>rebase 的提交历史反映了项目过程中发生了什么，关注点在开发过程上面</li><li>merge 与 rebase 都是非常强大的分支整合命令，没有优劣之分，使用哪一个应由项目和团队的开发需求决定</li><li>merge 和 rebase 还有很多强大的选项，可以使用 git help <command> 查看</li></ul><h2 id="7-Git-stash是什么？它的相关使用方式命令"><a href="#7-Git-stash是什么？它的相关使用方式命令" class="headerlink" title="7. Git stash是什么？它的相关使用方式命令"></a>7. Git stash是什么？它的相关使用方式命令</h2><ul><li>git stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。</li><li>git stash pop: 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复。</li><li>git stash pop –index stash@{0}: 恢复编号为0的进度的工作区和暂存区。</li><li>git stash apply stash@{1} 以将你指定版本号为stash@{1}的工作取出来</li><li>git stash drop[<stash>] 删除某一个进度，默认删除最新进度</li><li>git stash list: 显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。</li><li>git stash clear: 清空Git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 恢复工作进度</span><br>git stash pop [--index] [&lt;stash&gt;]<br>--index 参数：不仅恢复工作区，还恢复暂存区<br>&lt;stash&gt; 指定恢复某一个具体进度。如果没有这个参数，默认恢复最新进度<br><br><span class="hljs-comment"># 这是git stash保存进度的完整命令形式</span><br>git stash [save message] [-k|--no-keep-index] [--patch]<br>-k和--no-keep-index指定保存进度后，是否重置暂存区<br>--patch 会显示工作区和HEAD的差异,通过编辑差异文件，排除不需要保存的内容。和git add -p命令类似<br><br>使用save可以对进度添加备注<br><span class="hljs-comment"># git stash save &quot;这是保存的进度&quot;</span><br></code></pre></td></tr></table></figure><h2 id="8-Git只从暂存区删除，从工作空间删除的命令分别是什么"><a href="#8-Git只从暂存区删除，从工作空间删除的命令分别是什么" class="headerlink" title="8. Git只从暂存区删除，从工作空间删除的命令分别是什么?"></a>8. Git只从暂存区删除，从工作空间删除的命令分别是什么?</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">rm</span> --cached<br><br>git <span class="hljs-built_in">rm</span><br>git commit<br></code></pre></td></tr></table></figure><h2 id="9-Git标签的使用"><a href="#9-Git标签的使用" class="headerlink" title="9. Git标签的使用"></a>9. Git标签的使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出现有的标签</span><br>git tag<br><br><span class="hljs-comment"># 打标签</span><br>git tag -a v1.01 -m <span class="hljs-string">&quot;Relase version 1.01&quot;</span><br><br><span class="hljs-comment"># 查看相应标签的版本信息</span><br>git show v1.4<br></code></pre></td></tr></table></figure><ul><li>-a 选项,创建一个含附注类型的标签</li><li>-m 选项,指定了对应的标签说明</li></ul><h2 id="9-Git分支的使用"><a href="#9-Git分支的使用" class="headerlink" title="9. Git分支的使用"></a>9. Git分支的使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看本地分支</span><br>git branch<br><br><span class="hljs-comment"># 查看远程分支</span><br>git branch -r<br><br><span class="hljs-comment"># 创建本地分支(注意新分支创建后不会自动切换为当前分支)</span><br>git branch [name]<br><br><span class="hljs-comment"># 切换分支</span><br>git checkout [name]<br><br><span class="hljs-comment"># 创建新分支并立即切换到新分支</span><br>git checkout -b [name]<br><br><span class="hljs-comment"># 强制删除一个分支</span><br>git branch -D [name]<br><br><span class="hljs-comment"># 合并分支(将名称为[name]的分支与当前分支合并)</span><br>git merge [name]<br><br><span class="hljs-comment"># 查看各个分支最后提交信息</span><br>git br -v<br><br><span class="hljs-comment"># 查看已经被合并到当前分支的分支</span><br>git br --merged<br><br><span class="hljs-comment"># 查看尚未被合并到当前分支的分支</span><br>git br --no-merged<br></code></pre></td></tr></table></figure><h2 id="10-介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。"><a href="#10-介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。" class="headerlink" title="10. 介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。"></a>10. 介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。</h2><p>merge和rebase对于ours和theirs的定义是完全相反的。在merge时，ours指代的是当前分支，theirs代表需要被合并的分支。而在rebase过程中，ours指向了修改参考分支，theirs却是当前分支。因为rebase 隐含了一个<code>git checkout upstream</code>的过程，将<code>HEAD</code>从local分支变成了upstream分支。git会在rebase结束后撤销这个改变，但它已经不可避免地影响了冲突的状态，使rebase中ours和theirs的定义与merge 截然相反。因此，在使用ours与theirs时请格外小心。</p><h2 id="11-Git远程操作相关"><a href="#11-Git远程操作相关" class="headerlink" title="11. Git远程操作相关"></a>11. Git远程操作相关</h2><h3 id="1-clone"><a href="#1-clone" class="headerlink" title="(1). clone"></a>(1). clone</h3><blockquote><p>git clone &lt;版本库的网址&gt;<br>git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 克隆jQuery的版本库</span><br> git <span class="hljs-built_in">clone</span> https://github.com/jquery/jquery.git<br> <br> git <span class="hljs-built_in">clone</span> -o jQuery https://github.com/jquery/jquery.git<br></code></pre></td></tr></table></figure><h3 id="2-remote"><a href="#2-remote" class="headerlink" title="(2). remote"></a>(2). remote</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出所有远程主机</span><br>git remote<br><br><span class="hljs-comment"># 使用-v选项，可以参看远程主机的网址</span><br>git remote -v<br> <br><span class="hljs-comment"># 可以查看该主机的详细信息</span><br>git remote show &lt;主机名&gt;<br> <br><span class="hljs-comment"># 添加远程主机</span><br>git remote add &lt;主机名&gt; &lt;网址&gt;<br><br><span class="hljs-comment"># 删除远程主机</span><br>git remote <span class="hljs-built_in">rm</span> &lt;主机名&gt;<br><br><span class="hljs-comment"># 修改远程主机名称</span><br>git remote rename &lt;原主机名&gt; &lt;新主机名&gt;<br></code></pre></td></tr></table></figure><h3 id="3-fetch"><a href="#3-fetch" class="headerlink" title="(3). fetch"></a>(3). fetch</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 取回所有分支(branch)的更新到本地</span><br>git fetch &lt;远程主机名&gt;<br><br><span class="hljs-comment"># 取回某的特定分支的更新</span><br>git fetch &lt;远程主机名&gt; &lt;分支名&gt;<br><br><span class="hljs-comment"># 取回origin主机的master分支的更新</span><br>git fetch origin master<br><br><span class="hljs-comment"># 所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取。比如origin主机的master，就要用origin/master读取。可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支</span><br>git merge origin/master<br>git rebase origin/master<br></code></pre></td></tr></table></figure><h3 id="4-pull"><a href="#4-pull" class="headerlink" title="(4). pull"></a>(4). pull</h3><blockquote><p>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 取回origin主机的next分支，与本地的master分支合并</span><br>git pull origin next:master<br><br><span class="hljs-comment"># 如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</span><br>git pull origin next<br><br><span class="hljs-comment"># 上面的命令实质上等同于先做git fetch，再做git merge。</span><br>git fetch origin<br>git merge origin/next<br><br><span class="hljs-comment"># 合并需要采用rebase模式</span><br>git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;<br></code></pre></td></tr></table></figure><h3 id="5-push"><a href="#5-push" class="headerlink" title="(5). push"></a>(5). push</h3><blockquote><p>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</p></blockquote><p><strong>注意</strong>:分支推送顺序的写法是”&lt;来源地&gt;:&lt;目的地&gt;”，所以git pull是”&lt;远程分支&gt;:&lt;本地分支&gt;”，而git push是”&lt;本地分支&gt;:&lt;远程分支&gt;”。</p><ul><li>如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建。</li><li>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建</span><br>git push origin master<br><br><span class="hljs-comment"># 省略了本地分支，以下等同，删除origin主机的master分支</span><br>git push origin :master<br>git push origin --delete master<br><br><span class="hljs-comment"># 如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略</span><br>git push origin<br><br><span class="hljs-comment"># 如果当前分支只有一个追踪分支，那么主机名都可以省略。</span><br>git push<br><br><span class="hljs-comment"># 如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push</span><br>git push -u origin master<br><br><span class="hljs-comment"># 不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机</span><br>git push --all origin<br><br><span class="hljs-comment"># 强制推送</span><br>git push --force origin<br><br><span class="hljs-comment"># git push不会推送标签(tag)，除非使用–tags选项</span><br>git push origin --tags<br></code></pre></td></tr></table></figure><h2 id="12-Git-Flow使用简介"><a href="#12-Git-Flow使用简介" class="headerlink" title="12. Git Flow使用简介"></a>12. Git Flow使用简介</h2><p>就像代码需要代码规范一样，代码管理同样需要一个清晰的流程和规范。三种广泛使用的工作流程：</p><ul><li>Git flow</li><li>Github flow</li><li>Gitlab flow</li></ul><p>三种工作流程，有一个共同点：都采用”功能驱动式开发”（Feature-driven development，简称FDD）。它指的是，需求是开发的起点，先有需求再有功能分支（feature branch）或者补丁分支（hotfix branch）。完成开发后，该分支就合并到主分支，然后被删除。最早诞生、并得到广泛采用的一种工作流程，就是<a href="http://nvie.com/posts/a-successful-git-branching-model/">Git flow</a>。</p><p>它最主要的特点有两个。首先，项目存在两个长期分支，分别是：主分支master、开发分支develop。其次，项目存在三种短期分支，分别是：功能分支（feature branch）、补丁分支（hotfix branch）、预发分支（release branch），一旦完成开发，它们就会被合并进develop或master，然后被删除。</p><h3 id="1-Git-Flow流程图"><a href="#1-Git-Flow流程图" class="headerlink" title="(1). Git Flow流程图"></a>(1). Git Flow流程图</h3><p><img src="https://statics.sh1a.qingstor.com/2018/09/24/imagegit-flow.png" alt="Git Flow流程图"></p><h3 id="2-Git-Flow常用的分支"><a href="#2-Git-Flow常用的分支" class="headerlink" title="(2). Git Flow常用的分支"></a>(2). Git Flow常用的分支</h3><ul><li><code>Production</code>分支。也就是我们经常使用的Master分支，这个分支最近发布到生产环境的代码，最近发布的Release， 这个分支只能从其他分支合并，不能在这个分支直接修改。</li><li><code>Develop</code>分支。这个分支是我们是我们的主开发分支，包含所有要发布到下一个Release的代码，这个主要合并与其他分支，比如Feature分支。</li><li><code>Feature</code>分支。这个分支主要是用来开发一个新的功能，一旦开发完成，我们合并回Develop分支进入下一个Release。</li><li><code>Release</code>分支。当你需要一个发布一个新Release的时候，我们基于Develop分支创建一个Release分支，完成Release后，我们合并到Master和Develop分支。</li><li><code>Hotfix</code>分支。当我们在Production发现新的Bug时候，我们需要创建一个Hotfix, 完成Hotfix后，我们合并回Master和Develop分支，所以Hotfix的改动会进入下一个Release。</li></ul><h3 id="3-Git-Flow代码示例"><a href="#3-Git-Flow代码示例" class="headerlink" title="(3). Git Flow代码示例"></a>(3). Git Flow代码示例</h3><h4 id="a-创建develop分支"><a href="#a-创建develop分支" class="headerlink" title="a. 创建develop分支"></a>a. 创建develop分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch develop<br>git push -u origin develop<br></code></pre></td></tr></table></figure><h4 id="b-开始新Feature开发"><a href="#b-开始新Feature开发" class="headerlink" title="b. 开始新Feature开发"></a>b. 开始新Feature开发</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -b some-feature develop<br><span class="hljs-comment"># Optionally, push branch to origin:</span><br>git push -u origin some-feature<br><br><span class="hljs-comment"># 做一些改动</span><br>git status<br>git add some-file<br>git commit<br></code></pre></td></tr></table></figure><h4 id="c-完成Feature"><a href="#c-完成Feature" class="headerlink" title="c. 完成Feature"></a>c. 完成Feature</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull origin develop<br>git checkout develop<br>git merge --no-ff some-feature<br>git push origin develop<br><br>git branch -d some-feature<br><br><span class="hljs-comment"># If you pushed branch to origin:</span><br>git push origin --delete some-feature<br></code></pre></td></tr></table></figure><h4 id="d-开始Relase"><a href="#d-开始Relase" class="headerlink" title="d. 开始Relase"></a>d. 开始Relase</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -b release-0.1.0 develop<br><br><span class="hljs-comment"># Optional: Bump version number, commit</span><br><span class="hljs-comment"># Prepare release, commit</span><br></code></pre></td></tr></table></figure><h4 id="e-完成Release"><a href="#e-完成Release" class="headerlink" title="e. 完成Release"></a>e. 完成Release</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout master<br>git merge --no-ff release-0.1.0<br>git push<br><br>git checkout develop<br>git merge --no-ff release-0.1.0<br>git push<br><br>git branch -d release-0.1.0<br><br><span class="hljs-comment"># If you pushed branch to origin:</span><br>git push origin --delete release-0.1.0   <br><br>git tag -a v0.1.0 master<br>git push --tags<br></code></pre></td></tr></table></figure><h4 id="f-开始Hotfix"><a href="#f-开始Hotfix" class="headerlink" title="f. 开始Hotfix"></a>f. 开始Hotfix</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -b hotfix-0.1.1 master<br></code></pre></td></tr></table></figure><h4 id="g-完成Hotfix"><a href="#g-完成Hotfix" class="headerlink" title="g. 完成Hotfix"></a>g. 完成Hotfix</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout master<br>git merge --no-ff hotfix-0.1.1<br>git push<br><br>git checkout develop<br>git merge --no-ff hotfix-0.1.1<br>git push<br><br>git branch -d hotfix-0.1.1<br><br>git tag -a v0.1.1 master<br>git push --tags<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
